
freertos-attackhelp-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08006c94  08006c94  00016c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f4c  08006f4c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006f4c  08006f4c  00016f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f54  08006f54  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f58  08006f58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042c4  20000074  08006fd0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004338  08006fd0  00024338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cae0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003697  00000000  00000000  0003cb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  00040220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  000416b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049b6  00000000  00000000  00042a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aebe  00000000  00000000  000473be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc263  00000000  00000000  0006227c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013e4df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a08  00000000  00000000  0013e534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c7c 	.word	0x08006c7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006c7c 	.word	0x08006c7c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	b095      	sub	sp, #84	; 0x54
 80005dc:	af0e      	add	r7, sp, #56	; 0x38
  uint8_t uartmsg1[] = "UART Initialized\r\n";
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <main+0x64>)
 80005e0:	1d3c      	adds	r4, r7, #4
 80005e2:	461d      	mov	r5, r3
 80005e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e8:	682b      	ldr	r3, [r5, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	8022      	strh	r2, [r4, #0]
 80005ee:	3402      	adds	r4, #2
 80005f0:	0c1b      	lsrs	r3, r3, #16
 80005f2:	7023      	strb	r3, [r4, #0]

  HAL_Init();
 80005f4:	f000 fe0c 	bl	8001210 <HAL_Init>
  SystemClock_Config();
 80005f8:	f000 f824 	bl	8000644 <SystemClock_Config>
  MX_GPIO_Init();
 80005fc:	f000 f8ba 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000600:	f000 f88e 	bl	8000720 <MX_USART2_UART_Init>

  HAL_UART_Transmit(&huart2, uartmsg1, 18, 1000);
 8000604:	1d39      	adds	r1, r7, #4
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	2212      	movs	r2, #18
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <main+0x68>)
 800060e:	f002 fe83 	bl	8003318 <HAL_UART_Transmit>

  main_edf(huart2);
 8000612:	4e0b      	ldr	r6, [pc, #44]	; (8000640 <main+0x68>)
 8000614:	466d      	mov	r5, sp
 8000616:	f106 0410 	add.w	r4, r6, #16
 800061a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800061c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800061e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000626:	6823      	ldr	r3, [r4, #0]
 8000628:	602b      	str	r3, [r5, #0]
 800062a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800062e:	f000 f9af 	bl	8000990 <main_edf>

  return 0;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	371c      	adds	r7, #28
 8000638:	46bd      	mov	sp, r7
 800063a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800063c:	08006ca4 	.word	0x08006ca4
 8000640:	20004258 	.word	0x20004258

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	; 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 feea 	bl	800642c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <SystemClock_Config+0xd4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a29      	ldr	r2, [pc, #164]	; (8000718 <SystemClock_Config+0xd4>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <SystemClock_Config+0xd4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <SystemClock_Config+0xd8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000690:	4a22      	ldr	r2, [pc, #136]	; (800071c <SystemClock_Config+0xd8>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <SystemClock_Config+0xd8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b8:	2310      	movs	r3, #16
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fe44 	bl	8002360 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006de:	f000 f917 	bl	8000910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fa70 	bl	8001be4 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800070a:	f000 f901 	bl	8000910 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART2_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000758:	f002 fd04 	bl	8003164 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f8d5 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20004258 	.word	0x20004258
 8000770:	40004400 	.word	0x40004400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b52      	ldr	r3, [pc, #328]	; (80008d8 <MX_GPIO_Init+0x164>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a51      	ldr	r2, [pc, #324]	; (80008d8 <MX_GPIO_Init+0x164>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b4f      	ldr	r3, [pc, #316]	; (80008d8 <MX_GPIO_Init+0x164>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <MX_GPIO_Init+0x164>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a4a      	ldr	r2, [pc, #296]	; (80008d8 <MX_GPIO_Init+0x164>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b48      	ldr	r3, [pc, #288]	; (80008d8 <MX_GPIO_Init+0x164>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b44      	ldr	r3, [pc, #272]	; (80008d8 <MX_GPIO_Init+0x164>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a43      	ldr	r2, [pc, #268]	; (80008d8 <MX_GPIO_Init+0x164>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b41      	ldr	r3, [pc, #260]	; (80008d8 <MX_GPIO_Init+0x164>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b3d      	ldr	r3, [pc, #244]	; (80008d8 <MX_GPIO_Init+0x164>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a3c      	ldr	r2, [pc, #240]	; (80008d8 <MX_GPIO_Init+0x164>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b3a      	ldr	r3, [pc, #232]	; (80008d8 <MX_GPIO_Init+0x164>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b36      	ldr	r3, [pc, #216]	; (80008d8 <MX_GPIO_Init+0x164>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a35      	ldr	r2, [pc, #212]	; (80008d8 <MX_GPIO_Init+0x164>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <MX_GPIO_Init+0x164>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2120      	movs	r1, #32
 800081a:	4830      	ldr	r0, [pc, #192]	; (80008dc <MX_GPIO_Init+0x168>)
 800081c:	f001 f970 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000826:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	482a      	ldr	r0, [pc, #168]	; (80008e0 <MX_GPIO_Init+0x16c>)
 8000838:	f000 fe3e 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800083c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000840:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000842:	2303      	movs	r3, #3
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4823      	ldr	r0, [pc, #140]	; (80008e0 <MX_GPIO_Init+0x16c>)
 8000852:	f000 fe31 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8000856:	f649 73d3 	movw	r3, #40915	; 0x9fd3
 800085a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085c:	2303      	movs	r3, #3
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	481c      	ldr	r0, [pc, #112]	; (80008dc <MX_GPIO_Init+0x168>)
 800086c:	f000 fe24 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000870:	2320      	movs	r3, #32
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4815      	ldr	r0, [pc, #84]	; (80008dc <MX_GPIO_Init+0x168>)
 8000888:	f000 fe16 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800088c:	f24f 73f7 	movw	r3, #63479	; 0xf7f7
 8000890:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000892:	2303      	movs	r3, #3
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4810      	ldr	r0, [pc, #64]	; (80008e4 <MX_GPIO_Init+0x170>)
 80008a2:	f000 fe09 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008a6:	2304      	movs	r3, #4
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008aa:	2303      	movs	r3, #3
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	480b      	ldr	r0, [pc, #44]	; (80008e8 <MX_GPIO_Init+0x174>)
 80008ba:	f000 fdfd 	bl	80014b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	2028      	movs	r0, #40	; 0x28
 80008c4:	f000 fdb4 	bl	8001430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008c8:	2028      	movs	r0, #40	; 0x28
 80008ca:	f000 fddd 	bl	8001488 <HAL_NVIC_EnableIRQ>

}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	; 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020800 	.word	0x40020800
 80008e4:	40020400 	.word	0x40020400
 80008e8:	40020c00 	.word	0x40020c00

080008ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fe:	f000 fca9 	bl	8001254 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40001000 	.word	0x40001000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add her own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800091c:	b5b0      	push	{r4, r5, r7, lr}
 800091e:	b08e      	sub	sp, #56	; 0x38
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  uint8_t assertmsg1[] = "Error occurred in file: ";
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <assert_failed+0x68>)
 8000928:	f107 041c 	add.w	r4, r7, #28
 800092c:	461d      	mov	r5, r3
 800092e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000932:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000936:	c403      	stmia	r4!, {r0, r1}
 8000938:	7022      	strb	r2, [r4, #0]
  uint8_t assertmsg2[20];

  sprintf(assertmsg2, " on line %lu\r\n", line);
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	4911      	ldr	r1, [pc, #68]	; (8000988 <assert_failed+0x6c>)
 8000942:	4618      	mov	r0, r3
 8000944:	f005 fd7a 	bl	800643c <siprintf>
  /* USER CODE BEGIN 6 */
  /* User can add her own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  HAL_UART_Transmit(&huart2, assertmsg1, 23, 50);
 8000948:	f107 011c 	add.w	r1, r7, #28
 800094c:	2332      	movs	r3, #50	; 0x32
 800094e:	2217      	movs	r2, #23
 8000950:	480e      	ldr	r0, [pc, #56]	; (800098c <assert_failed+0x70>)
 8000952:	f002 fce1 	bl	8003318 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, file, strlen((char*)file), 1000);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff fc64 	bl	8000224 <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	b29a      	uxth	r2, r3
 8000960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000964:	6879      	ldr	r1, [r7, #4]
 8000966:	4809      	ldr	r0, [pc, #36]	; (800098c <assert_failed+0x70>)
 8000968:	f002 fcd6 	bl	8003318 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, assertmsg2, 20, 200);
 800096c:	f107 0108 	add.w	r1, r7, #8
 8000970:	23c8      	movs	r3, #200	; 0xc8
 8000972:	2214      	movs	r2, #20
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <assert_failed+0x70>)
 8000976:	f002 fccf 	bl	8003318 <HAL_UART_Transmit>

  /* USER CODE END 6 */
}
 800097a:	bf00      	nop
 800097c:	3738      	adds	r7, #56	; 0x38
 800097e:	46bd      	mov	sp, r7
 8000980:	bdb0      	pop	{r4, r5, r7, pc}
 8000982:	bf00      	nop
 8000984:	08006cc8 	.word	0x08006cc8
 8000988:	08006cb8 	.word	0x08006cb8
 800098c:	20004258 	.word	0x20004258

08000990 <main_edf>:
TickType_t xTaskTick1 = 0;
TickType_t xTaskTick2 = 0;
TickType_t xTaskTick3 = 0;
TickType_t xTaskTick4 = 0;

void main_edf(UART_HandleTypeDef pass_huart) {
 8000990:	b084      	sub	sp, #16
 8000992:	b5b0      	push	{r4, r5, r7, lr}
 8000994:	b090      	sub	sp, #64	; 0x40
 8000996:	af04      	add	r7, sp, #16
 8000998:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800099c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	huart2 = pass_huart;
 80009a0:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <main_edf+0xd8>)
 80009a2:	4618      	mov	r0, r3
 80009a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009a8:	2244      	movs	r2, #68	; 0x44
 80009aa:	4619      	mov	r1, r3
 80009ac:	f005 fd30 	bl	8006410 <memcpy>

	// Initialize CMSIS/FreeRTOS Kernel
    osKernelInitialize();
 80009b0:	f003 f800 	bl	80039b4 <osKernelInitialize>

    xTaskPeriodicCreate( vEDFTask1, "task1", configMINIMAL_STACK_SIZE, NULL, 1, &xTask1Handle, EDF_TASK1_PERIOD);
 80009b4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80009b8:	9302      	str	r3, [sp, #8]
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <main_edf+0xdc>)
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	2301      	movs	r3, #1
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2300      	movs	r3, #0
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	492a      	ldr	r1, [pc, #168]	; (8000a70 <main_edf+0xe0>)
 80009c8:	482a      	ldr	r0, [pc, #168]	; (8000a74 <main_edf+0xe4>)
 80009ca:	f003 fdde 	bl	800458a <xTaskPeriodicCreate>
    xTaskPeriodicCreate( vEDFTask2, "task2", configMINIMAL_STACK_SIZE, NULL, 1, &xTask2Handle, EDF_TASK2_PERIOD);
 80009ce:	f241 7370 	movw	r3, #6000	; 0x1770
 80009d2:	9302      	str	r3, [sp, #8]
 80009d4:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <main_edf+0xe8>)
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	2301      	movs	r3, #1
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2300      	movs	r3, #0
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	4926      	ldr	r1, [pc, #152]	; (8000a7c <main_edf+0xec>)
 80009e2:	4827      	ldr	r0, [pc, #156]	; (8000a80 <main_edf+0xf0>)
 80009e4:	f003 fdd1 	bl	800458a <xTaskPeriodicCreate>
    xTaskPeriodicCreate( vEDFTask3, "task3", configMINIMAL_STACK_SIZE, NULL, 1, &xTask3Handle, EDF_TASK3_PERIOD);
 80009e8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80009ec:	9302      	str	r3, [sp, #8]
 80009ee:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <main_edf+0xf4>)
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	2301      	movs	r3, #1
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2300      	movs	r3, #0
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	4923      	ldr	r1, [pc, #140]	; (8000a88 <main_edf+0xf8>)
 80009fc:	4823      	ldr	r0, [pc, #140]	; (8000a8c <main_edf+0xfc>)
 80009fe:	f003 fdc4 	bl	800458a <xTaskPeriodicCreate>
    xTaskPeriodicCreate( vEDFTask4, "task4", configMINIMAL_STACK_SIZE, NULL, 1, &xTask4Handle, EDF_TASK4_PERIOD);
 8000a02:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000a06:	9302      	str	r3, [sp, #8]
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <main_edf+0x100>)
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2300      	movs	r3, #0
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	491f      	ldr	r1, [pc, #124]	; (8000a94 <main_edf+0x104>)
 8000a16:	4820      	ldr	r0, [pc, #128]	; (8000a98 <main_edf+0x108>)
 8000a18:	f003 fdb7 	bl	800458a <xTaskPeriodicCreate>

    xTask1Handle = xTaskGetHandle("Task1");
 8000a1c:	481f      	ldr	r0, [pc, #124]	; (8000a9c <main_edf+0x10c>)
 8000a1e:	f004 f977 	bl	8004d10 <xTaskGetHandle>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <main_edf+0xdc>)
 8000a26:	6013      	str	r3, [r2, #0]
    xTask2Handle = xTaskGetHandle("Task2");
 8000a28:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <main_edf+0x110>)
 8000a2a:	f004 f971 	bl	8004d10 <xTaskGetHandle>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <main_edf+0xe8>)
 8000a32:	6013      	str	r3, [r2, #0]

    uint8_t startmsg[] = "Initial tasks created, starting kernel...\r\n";
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <main_edf+0x114>)
 8000a36:	1d3c      	adds	r4, r7, #4
 8000a38:	461d      	mov	r5, r3
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    HAL_UART_Transmit(&huart2, startmsg, strlen((char*)startmsg), 1000);
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fbe9 	bl	8000224 <strlen>
 8000a52:	4603      	mov	r3, r0
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	1d39      	adds	r1, r7, #4
 8000a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <main_edf+0xd8>)
 8000a5e:	f002 fc5b 	bl	8003318 <HAL_UART_Transmit>

    // Start FreeRTOS Kernel
    osKernelStart();
 8000a62:	f002 ffcb 	bl	80039fc <osKernelStart>

    for ( ; ; );
 8000a66:	e7fe      	b.n	8000a66 <main_edf+0xd6>
 8000a68:	20004258 	.word	0x20004258
 8000a6c:	20000090 	.word	0x20000090
 8000a70:	08006ce4 	.word	0x08006ce4
 8000a74:	08000ad5 	.word	0x08000ad5
 8000a78:	20000094 	.word	0x20000094
 8000a7c:	08006cec 	.word	0x08006cec
 8000a80:	08000b6d 	.word	0x08000b6d
 8000a84:	20000098 	.word	0x20000098
 8000a88:	08006cf4 	.word	0x08006cf4
 8000a8c:	08000bf9 	.word	0x08000bf9
 8000a90:	2000009c 	.word	0x2000009c
 8000a94:	08006cfc 	.word	0x08006cfc
 8000a98:	08000c85 	.word	0x08000c85
 8000a9c:	08006d04 	.word	0x08006d04
 8000aa0:	08006d0c 	.word	0x08006d0c
 8000aa4:	08006d14 	.word	0x08006d14

08000aa8 <HAL_GPIO_EXTI_Callback>:
}

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80fb      	strh	r3, [r7, #6]
//	uint8_t testbuf[] = "button interrupt detected\r\n";
	if (GPIO_Pin == B1_Pin) {
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ab8:	d105      	bne.n	8000ac6 <HAL_GPIO_EXTI_Callback+0x1e>
		vTaskSuspend(xTask1Handle);
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x28>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f003 ff2e 	bl	8004920 <vTaskSuspend>
	}
	else {
		__NOP();
	}
}
 8000ac4:	e000      	b.n	8000ac8 <HAL_GPIO_EXTI_Callback+0x20>
		__NOP();
 8000ac6:	bf00      	nop
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000090 	.word	0x20000090

08000ad4 <vEDFTask1>:

void vEDFTask1(void *pvParameters) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	const TickType_t xTaskFreq = EDF_TASK1_PERIOD;
 8000adc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000ae0:	61fb      	str	r3, [r7, #28]
	TickType_t xLastWakeTime;

	uint8_t task_start[] = "S1 ";
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <vEDFTask1+0x84>)
 8000ae4:	60fb      	str	r3, [r7, #12]
	uint8_t task_end[] = "F1 ";
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <vEDFTask1+0x88>)
 8000ae8:	60bb      	str	r3, [r7, #8]

	TickType_t capacity = EDF_TASK1_BUDGET;
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	61bb      	str	r3, [r7, #24]

	xLastWakeTime = xTaskGetTickCount();
 8000af0:	f004 f890 	bl	8004c14 <xTaskGetTickCount>
 8000af4:	4603      	mov	r3, r0
 8000af6:	613b      	str	r3, [r7, #16]
	for(;;) {
		HAL_UART_Transmit(&huart2, task_start, 3, 50);
 8000af8:	f107 010c 	add.w	r1, r7, #12
 8000afc:	2332      	movs	r3, #50	; 0x32
 8000afe:	2203      	movs	r2, #3
 8000b00:	4817      	ldr	r0, [pc, #92]	; (8000b60 <vEDFTask1+0x8c>)
 8000b02:	f002 fc09 	bl	8003318 <HAL_UART_Transmit>
		HAL_UART_write_uint32(xLastWakeTime);
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f913 	bl	8000d34 <HAL_UART_write_uint32>

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b0e:	2120      	movs	r1, #32
 8000b10:	4814      	ldr	r0, [pc, #80]	; (8000b64 <vEDFTask1+0x90>)
 8000b12:	f001 f827 	bl	8001b64 <HAL_GPIO_TogglePin>

		while(xTaskTick1 != capacity);
 8000b16:	bf00      	nop
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <vEDFTask1+0x94>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d1fa      	bne.n	8000b18 <vEDFTask1+0x44>
		xTaskTick1 = 0;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <vEDFTask1+0x94>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]

		TickType_t xFinishedTime = xTaskGetTickCount();
 8000b28:	f004 f874 	bl	8004c14 <xTaskGetTickCount>
 8000b2c:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart2, task_end, 3, 50);
 8000b2e:	f107 0108 	add.w	r1, r7, #8
 8000b32:	2332      	movs	r3, #50	; 0x32
 8000b34:	2203      	movs	r2, #3
 8000b36:	480a      	ldr	r0, [pc, #40]	; (8000b60 <vEDFTask1+0x8c>)
 8000b38:	f002 fbee 	bl	8003318 <HAL_UART_Transmit>
		HAL_UART_write_uint32(xFinishedTime);
 8000b3c:	6978      	ldr	r0, [r7, #20]
 8000b3e:	f000 f8f9 	bl	8000d34 <HAL_UART_write_uint32>
		uart_write_char('\n');
 8000b42:	200a      	movs	r0, #10
 8000b44:	f000 f8e4 	bl	8000d10 <uart_write_char>

		vTaskDelayUntil(&xLastWakeTime, xTaskFreq);
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	69f9      	ldr	r1, [r7, #28]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 fe68 	bl	8004824 <vTaskDelayUntil>
	for(;;) {
 8000b54:	e7d0      	b.n	8000af8 <vEDFTask1+0x24>
 8000b56:	bf00      	nop
 8000b58:	00203153 	.word	0x00203153
 8000b5c:	00203146 	.word	0x00203146
 8000b60:	20004258 	.word	0x20004258
 8000b64:	40020000 	.word	0x40020000
 8000b68:	200000a4 	.word	0x200000a4

08000b6c <vEDFTask2>:
	}
}

void vEDFTask2(void *pvParameters) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	const TickType_t xTaskFreq = EDF_TASK2_PERIOD;
 8000b74:	f241 7370 	movw	r3, #6000	; 0x1770
 8000b78:	61fb      	str	r3, [r7, #28]
	TickType_t xLastWakeTime;

	uint8_t task_start[] = "S2 ";
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <vEDFTask2+0x7c>)
 8000b7c:	60fb      	str	r3, [r7, #12]
	uint8_t task_end[] = "F2 ";
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <vEDFTask2+0x80>)
 8000b80:	60bb      	str	r3, [r7, #8]

	TickType_t capacity = EDF_TASK2_BUDGET;
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	61bb      	str	r3, [r7, #24]

	xLastWakeTime = xTaskGetTickCount();
 8000b88:	f004 f844 	bl	8004c14 <xTaskGetTickCount>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	613b      	str	r3, [r7, #16]
	for(;;) {
		HAL_UART_Transmit(&huart2, task_start, 3, 50);
 8000b90:	f107 010c 	add.w	r1, r7, #12
 8000b94:	2332      	movs	r3, #50	; 0x32
 8000b96:	2203      	movs	r2, #3
 8000b98:	4815      	ldr	r0, [pc, #84]	; (8000bf0 <vEDFTask2+0x84>)
 8000b9a:	f002 fbbd 	bl	8003318 <HAL_UART_Transmit>
		HAL_UART_write_uint32(xLastWakeTime);
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f8c7 	bl	8000d34 <HAL_UART_write_uint32>

		while(xTaskTick2 != capacity);
 8000ba6:	bf00      	nop
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <vEDFTask2+0x88>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d1fa      	bne.n	8000ba8 <vEDFTask2+0x3c>
		xTaskTick2 = 0;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <vEDFTask2+0x88>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]

		TickType_t xFinishedTime = xTaskGetTickCount();
 8000bb8:	f004 f82c 	bl	8004c14 <xTaskGetTickCount>
 8000bbc:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart2, task_end, 3, 50);
 8000bbe:	f107 0108 	add.w	r1, r7, #8
 8000bc2:	2332      	movs	r3, #50	; 0x32
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <vEDFTask2+0x84>)
 8000bc8:	f002 fba6 	bl	8003318 <HAL_UART_Transmit>
		HAL_UART_write_uint32(xFinishedTime);
 8000bcc:	6978      	ldr	r0, [r7, #20]
 8000bce:	f000 f8b1 	bl	8000d34 <HAL_UART_write_uint32>
		uart_write_char('\n');
 8000bd2:	200a      	movs	r0, #10
 8000bd4:	f000 f89c 	bl	8000d10 <uart_write_char>

		vTaskDelayUntil(&xLastWakeTime, xTaskFreq);
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	69f9      	ldr	r1, [r7, #28]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fe20 	bl	8004824 <vTaskDelayUntil>
	for(;;) {
 8000be4:	e7d4      	b.n	8000b90 <vEDFTask2+0x24>
 8000be6:	bf00      	nop
 8000be8:	00203253 	.word	0x00203253
 8000bec:	00203246 	.word	0x00203246
 8000bf0:	20004258 	.word	0x20004258
 8000bf4:	200000a8 	.word	0x200000a8

08000bf8 <vEDFTask3>:
	}
}

void vEDFTask3(void *pvParameters) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	const TickType_t xTaskFreq = EDF_TASK3_PERIOD;
 8000c00:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000c04:	61fb      	str	r3, [r7, #28]
	TickType_t xLastWakeTime;

	uint8_t task_start[] = "S3 ";
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <vEDFTask3+0x7c>)
 8000c08:	60fb      	str	r3, [r7, #12]
	uint8_t task_end[] = "F3 ";
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <vEDFTask3+0x80>)
 8000c0c:	60bb      	str	r3, [r7, #8]

	TickType_t capacity = EDF_TASK3_BUDGET;
 8000c0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c12:	61bb      	str	r3, [r7, #24]

	xLastWakeTime = xTaskGetTickCount();
 8000c14:	f003 fffe 	bl	8004c14 <xTaskGetTickCount>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	613b      	str	r3, [r7, #16]
	for(;;) {
		HAL_UART_Transmit(&huart2, task_start, 3, 50);
 8000c1c:	f107 010c 	add.w	r1, r7, #12
 8000c20:	2332      	movs	r3, #50	; 0x32
 8000c22:	2203      	movs	r2, #3
 8000c24:	4815      	ldr	r0, [pc, #84]	; (8000c7c <vEDFTask3+0x84>)
 8000c26:	f002 fb77 	bl	8003318 <HAL_UART_Transmit>
		HAL_UART_write_uint32(xLastWakeTime);
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f881 	bl	8000d34 <HAL_UART_write_uint32>

		while(xTaskTick3 != capacity);
 8000c32:	bf00      	nop
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <vEDFTask3+0x88>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d1fa      	bne.n	8000c34 <vEDFTask3+0x3c>
		xTaskTick3 = 0;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <vEDFTask3+0x88>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]

		TickType_t xFinishedTime = xTaskGetTickCount();
 8000c44:	f003 ffe6 	bl	8004c14 <xTaskGetTickCount>
 8000c48:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart2, task_end, 3, 50);
 8000c4a:	f107 0108 	add.w	r1, r7, #8
 8000c4e:	2332      	movs	r3, #50	; 0x32
 8000c50:	2203      	movs	r2, #3
 8000c52:	480a      	ldr	r0, [pc, #40]	; (8000c7c <vEDFTask3+0x84>)
 8000c54:	f002 fb60 	bl	8003318 <HAL_UART_Transmit>
		HAL_UART_write_uint32(xFinishedTime);
 8000c58:	6978      	ldr	r0, [r7, #20]
 8000c5a:	f000 f86b 	bl	8000d34 <HAL_UART_write_uint32>
		uart_write_char('\n');
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f000 f856 	bl	8000d10 <uart_write_char>

		vTaskDelayUntil(&xLastWakeTime, xTaskFreq);
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	69f9      	ldr	r1, [r7, #28]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 fdda 	bl	8004824 <vTaskDelayUntil>
	for(;;) {
 8000c70:	e7d4      	b.n	8000c1c <vEDFTask3+0x24>
 8000c72:	bf00      	nop
 8000c74:	00203353 	.word	0x00203353
 8000c78:	00203346 	.word	0x00203346
 8000c7c:	20004258 	.word	0x20004258
 8000c80:	200000ac 	.word	0x200000ac

08000c84 <vEDFTask4>:
	}
}

void vEDFTask4(void *pvParameters) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	const TickType_t xTaskFreq = EDF_TASK4_PERIOD;
 8000c8c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000c90:	61fb      	str	r3, [r7, #28]
	TickType_t xLastWakeTime;

	uint8_t task_start[] = "S4 ";
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <vEDFTask4+0x7c>)
 8000c94:	60fb      	str	r3, [r7, #12]
	uint8_t task_end[] = "F4 ";
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <vEDFTask4+0x80>)
 8000c98:	60bb      	str	r3, [r7, #8]

	TickType_t capacity = EDF_TASK4_BUDGET;
 8000c9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c9e:	61bb      	str	r3, [r7, #24]

	xLastWakeTime = xTaskGetTickCount();
 8000ca0:	f003 ffb8 	bl	8004c14 <xTaskGetTickCount>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	613b      	str	r3, [r7, #16]
	for(;;) {
		HAL_UART_Transmit(&huart2, task_start, 3, 50);
 8000ca8:	f107 010c 	add.w	r1, r7, #12
 8000cac:	2332      	movs	r3, #50	; 0x32
 8000cae:	2203      	movs	r2, #3
 8000cb0:	4815      	ldr	r0, [pc, #84]	; (8000d08 <vEDFTask4+0x84>)
 8000cb2:	f002 fb31 	bl	8003318 <HAL_UART_Transmit>
		HAL_UART_write_uint32(xLastWakeTime);
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f83b 	bl	8000d34 <HAL_UART_write_uint32>

		while(xTaskTick4 != capacity);
 8000cbe:	bf00      	nop
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <vEDFTask4+0x88>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d1fa      	bne.n	8000cc0 <vEDFTask4+0x3c>
		xTaskTick4 = 0;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <vEDFTask4+0x88>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]

		TickType_t xFinishedTime = xTaskGetTickCount();
 8000cd0:	f003 ffa0 	bl	8004c14 <xTaskGetTickCount>
 8000cd4:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart2, task_end, 3, 50);
 8000cd6:	f107 0108 	add.w	r1, r7, #8
 8000cda:	2332      	movs	r3, #50	; 0x32
 8000cdc:	2203      	movs	r2, #3
 8000cde:	480a      	ldr	r0, [pc, #40]	; (8000d08 <vEDFTask4+0x84>)
 8000ce0:	f002 fb1a 	bl	8003318 <HAL_UART_Transmit>
		HAL_UART_write_uint32(xFinishedTime);
 8000ce4:	6978      	ldr	r0, [r7, #20]
 8000ce6:	f000 f825 	bl	8000d34 <HAL_UART_write_uint32>
		uart_write_char('\n');
 8000cea:	200a      	movs	r0, #10
 8000cec:	f000 f810 	bl	8000d10 <uart_write_char>

		vTaskDelayUntil(&xLastWakeTime, xTaskFreq);
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	69f9      	ldr	r1, [r7, #28]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f003 fd94 	bl	8004824 <vTaskDelayUntil>
	for(;;) {
 8000cfc:	e7d4      	b.n	8000ca8 <vEDFTask4+0x24>
 8000cfe:	bf00      	nop
 8000d00:	00203453 	.word	0x00203453
 8000d04:	00203446 	.word	0x00203446
 8000d08:	20004258 	.word	0x20004258
 8000d0c:	200000b0 	.word	0x200000b0

08000d10 <uart_write_char>:
	}
}

void uart_write_char(uint8_t ch) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &ch, 1, 100);
 8000d1a:	1df9      	adds	r1, r7, #7
 8000d1c:	2364      	movs	r3, #100	; 0x64
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4803      	ldr	r0, [pc, #12]	; (8000d30 <uart_write_char+0x20>)
 8000d22:	f002 faf9 	bl	8003318 <HAL_UART_Transmit>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20004258 	.word	0x20004258

08000d34 <HAL_UART_write_uint32>:

	HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), 1000);

}
// Parses an unsigned long (uint32) into a buffer for the HAL function.
void HAL_UART_write_uint32(uint32_t n) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	uint8_t longbuf[10];

	longbuf[0] = (uint8_t)(48 + n/1000000);	// MSB
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a46      	ldr	r2, [pc, #280]	; (8000e58 <HAL_UART_write_uint32+0x124>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	0c9b      	lsrs	r3, r3, #18
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	3330      	adds	r3, #48	; 0x30
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	733b      	strb	r3, [r7, #12]
	n = n % 1000000;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a41      	ldr	r2, [pc, #260]	; (8000e58 <HAL_UART_write_uint32+0x124>)
 8000d52:	fba2 1203 	umull	r1, r2, r2, r3
 8000d56:	0c92      	lsrs	r2, r2, #18
 8000d58:	4940      	ldr	r1, [pc, #256]	; (8000e5c <HAL_UART_write_uint32+0x128>)
 8000d5a:	fb01 f202 	mul.w	r2, r1, r2
 8000d5e:	1a9b      	subs	r3, r3, r2
 8000d60:	607b      	str	r3, [r7, #4]
	longbuf[1] = (uint8_t)(48 + n/100000);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	095b      	lsrs	r3, r3, #5
 8000d66:	4a3e      	ldr	r2, [pc, #248]	; (8000e60 <HAL_UART_write_uint32+0x12c>)
 8000d68:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6c:	09db      	lsrs	r3, r3, #7
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	3330      	adds	r3, #48	; 0x30
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	737b      	strb	r3, [r7, #13]
	n = n % 100000;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	095a      	lsrs	r2, r3, #5
 8000d7a:	4939      	ldr	r1, [pc, #228]	; (8000e60 <HAL_UART_write_uint32+0x12c>)
 8000d7c:	fba1 1202 	umull	r1, r2, r1, r2
 8000d80:	09d2      	lsrs	r2, r2, #7
 8000d82:	4938      	ldr	r1, [pc, #224]	; (8000e64 <HAL_UART_write_uint32+0x130>)
 8000d84:	fb01 f202 	mul.w	r2, r1, r2
 8000d88:	1a9b      	subs	r3, r3, r2
 8000d8a:	607b      	str	r3, [r7, #4]
	longbuf[2] = (uint8_t)(48 + n/10000);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a36      	ldr	r2, [pc, #216]	; (8000e68 <HAL_UART_write_uint32+0x134>)
 8000d90:	fba2 2303 	umull	r2, r3, r2, r3
 8000d94:	0b5b      	lsrs	r3, r3, #13
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	3330      	adds	r3, #48	; 0x30
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	73bb      	strb	r3, [r7, #14]
	n = n % 10000;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a31      	ldr	r2, [pc, #196]	; (8000e68 <HAL_UART_write_uint32+0x134>)
 8000da2:	fba2 1203 	umull	r1, r2, r2, r3
 8000da6:	0b52      	lsrs	r2, r2, #13
 8000da8:	f242 7110 	movw	r1, #10000	; 0x2710
 8000dac:	fb01 f202 	mul.w	r2, r1, r2
 8000db0:	1a9b      	subs	r3, r3, r2
 8000db2:	607b      	str	r3, [r7, #4]
	longbuf[3] = (uint8_t)(48 + n/1000);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a2d      	ldr	r2, [pc, #180]	; (8000e6c <HAL_UART_write_uint32+0x138>)
 8000db8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbc:	099b      	lsrs	r3, r3, #6
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	3330      	adds	r3, #48	; 0x30
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	73fb      	strb	r3, [r7, #15]
	n = n % 1000;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a28      	ldr	r2, [pc, #160]	; (8000e6c <HAL_UART_write_uint32+0x138>)
 8000dca:	fba2 1203 	umull	r1, r2, r2, r3
 8000dce:	0992      	lsrs	r2, r2, #6
 8000dd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dd4:	fb01 f202 	mul.w	r2, r1, r2
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	607b      	str	r3, [r7, #4]
	longbuf[4] = (uint8_t)(48 + n/100);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a24      	ldr	r2, [pc, #144]	; (8000e70 <HAL_UART_write_uint32+0x13c>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	095b      	lsrs	r3, r3, #5
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	3330      	adds	r3, #48	; 0x30
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	743b      	strb	r3, [r7, #16]
	n = n % 100;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <HAL_UART_write_uint32+0x13c>)
 8000df2:	fba2 1203 	umull	r1, r2, r2, r3
 8000df6:	0952      	lsrs	r2, r2, #5
 8000df8:	2164      	movs	r1, #100	; 0x64
 8000dfa:	fb01 f202 	mul.w	r2, r1, r2
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	607b      	str	r3, [r7, #4]
	longbuf[5] = (uint8_t)(48 + n/10);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <HAL_UART_write_uint32+0x140>)
 8000e06:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0a:	08db      	lsrs	r3, r3, #3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	3330      	adds	r3, #48	; 0x30
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	747b      	strb	r3, [r7, #17]
	n = n % 10;
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_UART_write_uint32+0x140>)
 8000e18:	fba3 1302 	umull	r1, r3, r3, r2
 8000e1c:	08d9      	lsrs	r1, r3, #3
 8000e1e:	460b      	mov	r3, r1
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	607b      	str	r3, [r7, #4]
	longbuf[6] = (uint8_t)(48 + n);			// LSB
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	3330      	adds	r3, #48	; 0x30
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	74bb      	strb	r3, [r7, #18]

	// Terminate string properly
	longbuf[7] = '\r';
 8000e34:	230d      	movs	r3, #13
 8000e36:	74fb      	strb	r3, [r7, #19]
	longbuf[8] = '\n';
 8000e38:	230a      	movs	r3, #10
 8000e3a:	753b      	strb	r3, [r7, #20]
	longbuf[9] = '\0';
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	757b      	strb	r3, [r7, #21]

	// Send buffer to
	HAL_UART_Transmit(&huart2, longbuf, 9, 100);
 8000e40:	f107 010c 	add.w	r1, r7, #12
 8000e44:	2364      	movs	r3, #100	; 0x64
 8000e46:	2209      	movs	r2, #9
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <HAL_UART_write_uint32+0x144>)
 8000e4a:	f002 fa65 	bl	8003318 <HAL_UART_Transmit>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	431bde83 	.word	0x431bde83
 8000e5c:	000f4240 	.word	0x000f4240
 8000e60:	0a7c5ac5 	.word	0x0a7c5ac5
 8000e64:	000186a0 	.word	0x000186a0
 8000e68:	d1b71759 	.word	0xd1b71759
 8000e6c:	10624dd3 	.word	0x10624dd3
 8000e70:	51eb851f 	.word	0x51eb851f
 8000e74:	cccccccd 	.word	0xcccccccd
 8000e78:	20004258 	.word	0x20004258

08000e7c <update_task_tick_counts>:

void update_task_tick_counts(char * taskName, TickType_t currentTick)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
    if (strcmp(taskName, "task1") == 0)
 8000e86:	4925      	ldr	r1, [pc, #148]	; (8000f1c <update_task_tick_counts+0xa0>)
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff f9c1 	bl	8000210 <strcmp>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d109      	bne.n	8000ea8 <update_task_tick_counts+0x2c>
        xTaskTick1 += (currentTick - xTotalTickCount);
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <update_task_tick_counts+0xa4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	1ad2      	subs	r2, r2, r3
 8000e9c:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <update_task_tick_counts+0xa8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4a20      	ldr	r2, [pc, #128]	; (8000f24 <update_task_tick_counts+0xa8>)
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e031      	b.n	8000f0c <update_task_tick_counts+0x90>
    else if (strcmp(taskName, "task2") == 0)
 8000ea8:	491f      	ldr	r1, [pc, #124]	; (8000f28 <update_task_tick_counts+0xac>)
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff f9b0 	bl	8000210 <strcmp>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d109      	bne.n	8000eca <update_task_tick_counts+0x4e>
        xTaskTick2 += (currentTick - xTotalTickCount);
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <update_task_tick_counts+0xa4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	1ad2      	subs	r2, r2, r3
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <update_task_tick_counts+0xb0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <update_task_tick_counts+0xb0>)
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	e020      	b.n	8000f0c <update_task_tick_counts+0x90>
    else if (strcmp(taskName, "task3") == 0)
 8000eca:	4919      	ldr	r1, [pc, #100]	; (8000f30 <update_task_tick_counts+0xb4>)
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff f99f 	bl	8000210 <strcmp>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d109      	bne.n	8000eec <update_task_tick_counts+0x70>
        xTaskTick3 += (currentTick - xTotalTickCount);
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <update_task_tick_counts+0xa4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	1ad2      	subs	r2, r2, r3
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <update_task_tick_counts+0xb8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <update_task_tick_counts+0xb8>)
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e00f      	b.n	8000f0c <update_task_tick_counts+0x90>
    else if (strcmp(taskName, "task4") == 0)
 8000eec:	4912      	ldr	r1, [pc, #72]	; (8000f38 <update_task_tick_counts+0xbc>)
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff f98e 	bl	8000210 <strcmp>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d108      	bne.n	8000f0c <update_task_tick_counts+0x90>
        xTaskTick4 += (currentTick - xTotalTickCount);
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <update_task_tick_counts+0xa4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	1ad2      	subs	r2, r2, r3
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <update_task_tick_counts+0xc0>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <update_task_tick_counts+0xc0>)
 8000f0a:	6013      	str	r3, [r2, #0]

    xTotalTickCount = currentTick;
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <update_task_tick_counts+0xa4>)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	6013      	str	r3, [r2, #0]
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08006ce4 	.word	0x08006ce4
 8000f20:	200000a0 	.word	0x200000a0
 8000f24:	200000a4 	.word	0x200000a4
 8000f28:	08006cec 	.word	0x08006cec
 8000f2c:	200000a8 	.word	0x200000a8
 8000f30:	08006cf4 	.word	0x08006cf4
 8000f34:	200000ac 	.word	0x200000ac
 8000f38:	08006cfc 	.word	0x08006cfc
 8000f3c:	200000b0 	.word	0x200000b0

08000f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_MspInit+0x54>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <HAL_MspInit+0x54>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_MspInit+0x54>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_MspInit+0x54>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_MspInit+0x54>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	6413      	str	r3, [r2, #64]	; 0x40
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_MspInit+0x54>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	210f      	movs	r1, #15
 8000f82:	f06f 0001 	mvn.w	r0, #1
 8000f86:	f000 fa53 	bl	8001430 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800

08000f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a19      	ldr	r2, [pc, #100]	; (800101c <HAL_UART_MspInit+0x84>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d12b      	bne.n	8001012 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001002:	2307      	movs	r3, #7
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_UART_MspInit+0x8c>)
 800100e:	f000 fa53 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40004400 	.word	0x40004400
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000

08001028 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001038:	2200      	movs	r2, #0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	2036      	movs	r0, #54	; 0x36
 800103e:	f000 f9f7 	bl	8001430 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001042:	2036      	movs	r0, #54	; 0x36
 8001044:	f000 fa20 	bl	8001488 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <HAL_InitTick+0xa4>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <HAL_InitTick+0xa4>)
 8001052:	f043 0310 	orr.w	r3, r3, #16
 8001056:	6413      	str	r3, [r2, #64]	; 0x40
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <HAL_InitTick+0xa4>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f003 0310 	and.w	r3, r3, #16
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001064:	f107 0210 	add.w	r2, r7, #16
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f000 ff92 	bl	8001f98 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001074:	f000 ff68 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8001078:	4603      	mov	r3, r0
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <HAL_InitTick+0xa8>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	0c9b      	lsrs	r3, r3, #18
 8001088:	3b01      	subs	r3, #1
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HAL_InitTick+0xac>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <HAL_InitTick+0xb0>)
 8001090:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_InitTick+0xac>)
 8001094:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001098:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <HAL_InitTick+0xac>)
 800109c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_InitTick+0xac>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_InitTick+0xac>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <HAL_InitTick+0xac>)
 80010ae:	f001 fcb5 	bl	8002a1c <HAL_TIM_Base_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d104      	bne.n	80010c2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010b8:	4806      	ldr	r0, [pc, #24]	; (80010d4 <HAL_InitTick+0xac>)
 80010ba:	f001 fda9 	bl	8002c10 <HAL_TIM_Base_Start_IT>
 80010be:	4603      	mov	r3, r0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3730      	adds	r7, #48	; 0x30
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	431bde83 	.word	0x431bde83
 80010d4:	2000429c 	.word	0x2000429c
 80010d8:	40001000 	.word	0x40001000

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <NMI_Handler+0x4>

080010e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <HardFault_Handler+0x4>

080010e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <MemManage_Handler+0x4>

080010ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <BusFault_Handler+0x4>

080010f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <UsageFault_Handler+0x4>

080010fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800110c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001110:	f000 fd50 	bl	8001bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <TIM6_DAC_IRQHandler+0x10>)
 800111e:	f001 fe3d 	bl	8002d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000429c 	.word	0x2000429c

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f005 f92e 	bl	80063bc <__errno>
 8001160:	4603      	mov	r3, r0
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20020000 	.word	0x20020000
 800118c:	00000400 	.word	0x00000400
 8001190:	200000b4 	.word	0x200000b4
 8001194:	20004338 	.word	0x20004338

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011c2:	490e      	ldr	r1, [pc, #56]	; (80011fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011c4:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d8:	4c0b      	ldr	r4, [pc, #44]	; (8001208 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011e6:	f7ff ffd7 	bl	8001198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f005 f8ed 	bl	80063c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff f9f3 	bl	80005d8 <main>
  bx  lr    
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001200:	08006f5c 	.word	0x08006f5c
  ldr r2, =_sbss
 8001204:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001208:	20004338 	.word	0x20004338

0800120c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>
	...

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <HAL_Init+0x40>)
 800121a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_Init+0x40>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800122a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_Init+0x40>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f8d9 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123e:	200f      	movs	r0, #15
 8001240:	f7ff fef2 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001244:	f7ff fe7c 	bl	8000f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023c00 	.word	0x40023c00

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008
 8001278:	200042e4 	.word	0x200042e4

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	200042e4 	.word	0x200042e4

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4907      	ldr	r1, [pc, #28]	; (8001330 <__NVIC_EnableIRQ+0x38>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	; (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	; (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b07      	cmp	r3, #7
 80013fc:	d00f      	beq.n	800141e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b06      	cmp	r3, #6
 8001402:	d00c      	beq.n	800141e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b05      	cmp	r3, #5
 8001408:	d009      	beq.n	800141e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b04      	cmp	r3, #4
 800140e:	d006      	beq.n	800141e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d003      	beq.n	800141e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001416:	2192      	movs	r1, #146	; 0x92
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800141a:	f7ff fa7f 	bl	800091c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ff38 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	08006d88 	.word	0x08006d88

08001430 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d903      	bls.n	8001450 <HAL_NVIC_SetPriority+0x20>
 8001448:	21aa      	movs	r1, #170	; 0xaa
 800144a:	480e      	ldr	r0, [pc, #56]	; (8001484 <HAL_NVIC_SetPriority+0x54>)
 800144c:	f7ff fa66 	bl	800091c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	d903      	bls.n	800145e <HAL_NVIC_SetPriority+0x2e>
 8001456:	21ab      	movs	r1, #171	; 0xab
 8001458:	480a      	ldr	r0, [pc, #40]	; (8001484 <HAL_NVIC_SetPriority+0x54>)
 800145a:	f7ff fa5f 	bl	800091c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145e:	f7ff ff3d 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001462:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	68b9      	ldr	r1, [r7, #8]
 8001468:	6978      	ldr	r0, [r7, #20]
 800146a:	f7ff ff8d 	bl	8001388 <NVIC_EncodePriority>
 800146e:	4602      	mov	r2, r0
 8001470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff5c 	bl	8001334 <__NVIC_SetPriority>
}
 800147c:	bf00      	nop
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	08006d88 	.word	0x08006d88

08001488 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	da03      	bge.n	80014a2 <HAL_NVIC_EnableIRQ+0x1a>
 800149a:	21be      	movs	r1, #190	; 0xbe
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_NVIC_EnableIRQ+0x2c>)
 800149e:	f7ff fa3d 	bl	800091c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ff26 	bl	80012f8 <__NVIC_EnableIRQ>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	08006d88 	.word	0x08006d88

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a37      	ldr	r2, [pc, #220]	; (80015b0 <HAL_GPIO_Init+0xf8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d01f      	beq.n	8001516 <HAL_GPIO_Init+0x5e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a36      	ldr	r2, [pc, #216]	; (80015b4 <HAL_GPIO_Init+0xfc>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01b      	beq.n	8001516 <HAL_GPIO_Init+0x5e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a35      	ldr	r2, [pc, #212]	; (80015b8 <HAL_GPIO_Init+0x100>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d017      	beq.n	8001516 <HAL_GPIO_Init+0x5e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a34      	ldr	r2, [pc, #208]	; (80015bc <HAL_GPIO_Init+0x104>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_Init+0x5e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a33      	ldr	r2, [pc, #204]	; (80015c0 <HAL_GPIO_Init+0x108>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00f      	beq.n	8001516 <HAL_GPIO_Init+0x5e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <HAL_GPIO_Init+0x10c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00b      	beq.n	8001516 <HAL_GPIO_Init+0x5e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a31      	ldr	r2, [pc, #196]	; (80015c8 <HAL_GPIO_Init+0x110>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x5e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a30      	ldr	r2, [pc, #192]	; (80015cc <HAL_GPIO_Init+0x114>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x5e>
 800150e:	21ac      	movs	r1, #172	; 0xac
 8001510:	482f      	ldr	r0, [pc, #188]	; (80015d0 <HAL_GPIO_Init+0x118>)
 8001512:	f7ff fa03 	bl	800091c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_GPIO_Init+0x74>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	0c1b      	lsrs	r3, r3, #16
 8001526:	041b      	lsls	r3, r3, #16
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x7c>
 800152c:	21ad      	movs	r1, #173	; 0xad
 800152e:	4828      	ldr	r0, [pc, #160]	; (80015d0 <HAL_GPIO_Init+0x118>)
 8001530:	f7ff f9f4 	bl	800091c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d035      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d031      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b11      	cmp	r3, #17
 800154a:	d02d      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d029      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b12      	cmp	r3, #18
 800155a:	d025      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001564:	d020      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800156e:	d01b      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001578:	d016      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001582:	d011      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800158c:	d00c      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001596:	d007      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
 80015a0:	21ae      	movs	r1, #174	; 0xae
 80015a2:	480b      	ldr	r0, [pc, #44]	; (80015d0 <HAL_GPIO_Init+0x118>)
 80015a4:	f7ff f9ba 	bl	800091c <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	e289      	b.n	8001ac2 <HAL_GPIO_Init+0x60a>
 80015ae:	bf00      	nop
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020c00 	.word	0x40020c00
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40021400 	.word	0x40021400
 80015c8:	40021800 	.word	0x40021800
 80015cc:	40021c00 	.word	0x40021c00
 80015d0:	08006dc4 	.word	0x08006dc4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 8265 	bne.w	8001abc <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d005      	beq.n	800160a <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001606:	2b02      	cmp	r3, #2
 8001608:	d144      	bne.n	8001694 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00f      	beq.n	8001632 <HAL_GPIO_Init+0x17a>
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d00b      	beq.n	8001632 <HAL_GPIO_Init+0x17a>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d007      	beq.n	8001632 <HAL_GPIO_Init+0x17a>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x17a>
 800162a:	21c0      	movs	r1, #192	; 0xc0
 800162c:	4831      	ldr	r0, [pc, #196]	; (80016f4 <HAL_GPIO_Init+0x23c>)
 800162e:	f7ff f975 	bl	800091c <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001668:	2201      	movs	r2, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	f003 0201 	and.w	r2, r3, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b03      	cmp	r3, #3
 800169e:	d02b      	beq.n	80016f8 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00b      	beq.n	80016c0 <HAL_GPIO_Init+0x208>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d007      	beq.n	80016c0 <HAL_GPIO_Init+0x208>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x208>
 80016b8:	21d1      	movs	r1, #209	; 0xd1
 80016ba:	480e      	ldr	r0, [pc, #56]	; (80016f4 <HAL_GPIO_Init+0x23c>)
 80016bc:	f7ff f92e 	bl	800091c <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	e002      	b.n	80016f8 <HAL_GPIO_Init+0x240>
 80016f2:	bf00      	nop
 80016f4:	08006dc4 	.word	0x08006dc4
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b02      	cmp	r3, #2
 8001702:	f040 810c 	bne.w	800191e <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80e3 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	2b09      	cmp	r3, #9
 8001716:	f000 80de 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80d9 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80d4 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80cf 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80ca 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	2b01      	cmp	r3, #1
 8001748:	f000 80c5 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	2b01      	cmp	r3, #1
 8001752:	f000 80c0 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	2b02      	cmp	r3, #2
 800175c:	f000 80bb 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	2b02      	cmp	r3, #2
 8001766:	f000 80b6 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	2b02      	cmp	r3, #2
 8001770:	f000 80b1 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	2b03      	cmp	r3, #3
 800177a:	f000 80ac 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	2b04      	cmp	r3, #4
 8001784:	f000 80a7 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	2b04      	cmp	r3, #4
 800178e:	f000 80a2 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	2b04      	cmp	r3, #4
 8001798:	f000 809d 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	f000 8098 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	f000 8093 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	2b09      	cmp	r3, #9
 80017b6:	f000 808e 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	2b06      	cmp	r3, #6
 80017c0:	f000 8089 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	2b09      	cmp	r3, #9
 80017ca:	f000 8084 	beq.w	80018d6 <HAL_GPIO_Init+0x41e>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	2b07      	cmp	r3, #7
 80017d4:	d07f      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	2b07      	cmp	r3, #7
 80017dc:	d07b      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b07      	cmp	r3, #7
 80017e4:	d077      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d073      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d06f      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d06b      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	2b09      	cmp	r3, #9
 8001804:	d067      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	2b09      	cmp	r3, #9
 800180c:	d063      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	2b0a      	cmp	r3, #10
 8001814:	d05f      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	2b0a      	cmp	r3, #10
 800181c:	d05b      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b0b      	cmp	r3, #11
 8001824:	d057      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b0c      	cmp	r3, #12
 800182c:	d053      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d04f      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b0d      	cmp	r3, #13
 800183c:	d04b      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2b0f      	cmp	r3, #15
 8001844:	d047      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b05      	cmp	r3, #5
 800184c:	d043      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b0c      	cmp	r3, #12
 8001854:	d03f      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	2b06      	cmp	r3, #6
 800185c:	d03b      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d037      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b04      	cmp	r3, #4
 800186c:	d033      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b05      	cmp	r3, #5
 8001874:	d02f      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	2b06      	cmp	r3, #6
 800187c:	d02b      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b06      	cmp	r3, #6
 8001884:	d027      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b07      	cmp	r3, #7
 800188c:	d023      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b07      	cmp	r3, #7
 8001894:	d01f      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b07      	cmp	r3, #7
 800189c:	d01b      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b07      	cmp	r3, #7
 80018a4:	d017      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d00f      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b09      	cmp	r3, #9
 80018bc:	d00b      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	2b0a      	cmp	r3, #10
 80018c4:	d007      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	2b0a      	cmp	r3, #10
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x41e>
 80018ce:	21de      	movs	r1, #222	; 0xde
 80018d0:	4880      	ldr	r0, [pc, #512]	; (8001ad4 <HAL_GPIO_Init+0x61c>)
 80018d2:	f7ff f823 	bl	800091c <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	08da      	lsrs	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3208      	adds	r2, #8
 80018de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	220f      	movs	r2, #15
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	691a      	ldr	r2, [r3, #16]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	08da      	lsrs	r2, r3, #3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3208      	adds	r2, #8
 8001918:	69b9      	ldr	r1, [r7, #24]
 800191a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	2203      	movs	r2, #3
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0203 	and.w	r2, r3, #3
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80ae 	beq.w	8001abc <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	4b5c      	ldr	r3, [pc, #368]	; (8001ad8 <HAL_GPIO_Init+0x620>)
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	4a5b      	ldr	r2, [pc, #364]	; (8001ad8 <HAL_GPIO_Init+0x620>)
 800196a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196e:	6453      	str	r3, [r2, #68]	; 0x44
 8001970:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <HAL_GPIO_Init+0x620>)
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197c:	4a57      	ldr	r2, [pc, #348]	; (8001adc <HAL_GPIO_Init+0x624>)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a4f      	ldr	r2, [pc, #316]	; (8001ae0 <HAL_GPIO_Init+0x628>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d025      	beq.n	80019f4 <HAL_GPIO_Init+0x53c>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a4e      	ldr	r2, [pc, #312]	; (8001ae4 <HAL_GPIO_Init+0x62c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d01f      	beq.n	80019f0 <HAL_GPIO_Init+0x538>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a4d      	ldr	r2, [pc, #308]	; (8001ae8 <HAL_GPIO_Init+0x630>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d019      	beq.n	80019ec <HAL_GPIO_Init+0x534>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a4c      	ldr	r2, [pc, #304]	; (8001aec <HAL_GPIO_Init+0x634>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d013      	beq.n	80019e8 <HAL_GPIO_Init+0x530>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a4b      	ldr	r2, [pc, #300]	; (8001af0 <HAL_GPIO_Init+0x638>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d00d      	beq.n	80019e4 <HAL_GPIO_Init+0x52c>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a4a      	ldr	r2, [pc, #296]	; (8001af4 <HAL_GPIO_Init+0x63c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d007      	beq.n	80019e0 <HAL_GPIO_Init+0x528>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a49      	ldr	r2, [pc, #292]	; (8001af8 <HAL_GPIO_Init+0x640>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_GPIO_Init+0x524>
 80019d8:	2306      	movs	r3, #6
 80019da:	e00c      	b.n	80019f6 <HAL_GPIO_Init+0x53e>
 80019dc:	2307      	movs	r3, #7
 80019de:	e00a      	b.n	80019f6 <HAL_GPIO_Init+0x53e>
 80019e0:	2305      	movs	r3, #5
 80019e2:	e008      	b.n	80019f6 <HAL_GPIO_Init+0x53e>
 80019e4:	2304      	movs	r3, #4
 80019e6:	e006      	b.n	80019f6 <HAL_GPIO_Init+0x53e>
 80019e8:	2303      	movs	r3, #3
 80019ea:	e004      	b.n	80019f6 <HAL_GPIO_Init+0x53e>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e002      	b.n	80019f6 <HAL_GPIO_Init+0x53e>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_GPIO_Init+0x53e>
 80019f4:	2300      	movs	r3, #0
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	f002 0203 	and.w	r2, r2, #3
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	4093      	lsls	r3, r2
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a06:	4935      	ldr	r1, [pc, #212]	; (8001adc <HAL_GPIO_Init+0x624>)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <HAL_GPIO_Init+0x644>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a38:	4a30      	ldr	r2, [pc, #192]	; (8001afc <HAL_GPIO_Init+0x644>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <HAL_GPIO_Init+0x644>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a62:	4a26      	ldr	r2, [pc, #152]	; (8001afc <HAL_GPIO_Init+0x644>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a68:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_GPIO_Init+0x644>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a8c:	4a1b      	ldr	r2, [pc, #108]	; (8001afc <HAL_GPIO_Init+0x644>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_GPIO_Init+0x644>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab6:	4a11      	ldr	r2, [pc, #68]	; (8001afc <HAL_GPIO_Init+0x644>)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	f67f ad85 	bls.w	80015d4 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	08006dc4 	.word	0x08006dc4
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40013800 	.word	0x40013800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40020400 	.word	0x40020400
 8001ae8:	40020800 	.word	0x40020800
 8001aec:	40020c00 	.word	0x40020c00
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40021400 	.word	0x40021400
 8001af8:	40021800 	.word	0x40021800
 8001afc:	40013c00 	.word	0x40013c00

08001b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001b10:	887b      	ldrh	r3, [r7, #2]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <HAL_GPIO_WritePin+0x20>
 8001b16:	887b      	ldrh	r3, [r7, #2]
 8001b18:	0c1b      	lsrs	r3, r3, #16
 8001b1a:	041b      	lsls	r3, r3, #16
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <HAL_GPIO_WritePin+0x2a>
 8001b20:	f240 119d 	movw	r1, #413	; 0x19d
 8001b24:	480e      	ldr	r0, [pc, #56]	; (8001b60 <HAL_GPIO_WritePin+0x60>)
 8001b26:	f7fe fef9 	bl	800091c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001b2a:	787b      	ldrb	r3, [r7, #1]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_GPIO_WritePin+0x40>
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d004      	beq.n	8001b40 <HAL_GPIO_WritePin+0x40>
 8001b36:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001b3a:	4809      	ldr	r0, [pc, #36]	; (8001b60 <HAL_GPIO_WritePin+0x60>)
 8001b3c:	f7fe feee 	bl	800091c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001b40:	787b      	ldrb	r3, [r7, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b4c:	e003      	b.n	8001b56 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	041a      	lsls	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	619a      	str	r2, [r3, #24]
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	08006dc4 	.word	0x08006dc4

08001b64 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <HAL_GPIO_TogglePin+0x1c>
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	0c1b      	lsrs	r3, r3, #16
 8001b7a:	041b      	lsls	r3, r3, #16
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <HAL_GPIO_TogglePin+0x26>
 8001b80:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001b84:	480a      	ldr	r0, [pc, #40]	; (8001bb0 <HAL_GPIO_TogglePin+0x4c>)
 8001b86:	f7fe fec9 	bl	800091c <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b90:	887a      	ldrh	r2, [r7, #2]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4013      	ands	r3, r2
 8001b96:	041a      	lsls	r2, r3, #16
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	43d9      	mvns	r1, r3
 8001b9c:	887b      	ldrh	r3, [r7, #2]
 8001b9e:	400b      	ands	r3, r1
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	619a      	str	r2, [r3, #24]
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	08006dc4 	.word	0x08006dc4

08001bb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe ff68 	bl	8000aa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40013c00 	.word	0x40013c00

08001be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e18c      	b.n	8001f12 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x24>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d904      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x2e>
 8001c08:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8001c0c:	4887      	ldr	r0, [pc, #540]	; (8001e2c <HAL_RCC_ClockConfig+0x248>)
 8001c0e:	f7fe fe85 	bl	800091c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d031      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d02e      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d02b      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d028      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d025      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d022      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b06      	cmp	r3, #6
 8001c3a:	d01f      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b07      	cmp	r3, #7
 8001c40:	d01c      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d019      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b09      	cmp	r3, #9
 8001c4c:	d016      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b0a      	cmp	r3, #10
 8001c52:	d013      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	2b0b      	cmp	r3, #11
 8001c58:	d010      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	d00d      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b0d      	cmp	r3, #13
 8001c64:	d00a      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b0e      	cmp	r3, #14
 8001c6a:	d007      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	2b0f      	cmp	r3, #15
 8001c70:	d004      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x98>
 8001c72:	f240 215d 	movw	r1, #605	; 0x25d
 8001c76:	486d      	ldr	r0, [pc, #436]	; (8001e2c <HAL_RCC_ClockConfig+0x248>)
 8001c78:	f7fe fe50 	bl	800091c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	; (8001e30 <HAL_RCC_ClockConfig+0x24c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d90c      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b69      	ldr	r3, [pc, #420]	; (8001e30 <HAL_RCC_ClockConfig+0x24c>)
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <HAL_RCC_ClockConfig+0x24c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e136      	b.n	8001f12 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d049      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cbc:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <HAL_RCC_ClockConfig+0x250>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4a5c      	ldr	r2, [pc, #368]	; (8001e34 <HAL_RCC_ClockConfig+0x250>)
 8001cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cd4:	4b57      	ldr	r3, [pc, #348]	; (8001e34 <HAL_RCC_ClockConfig+0x250>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4a56      	ldr	r2, [pc, #344]	; (8001e34 <HAL_RCC_ClockConfig+0x250>)
 8001cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d024      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x14e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b80      	cmp	r3, #128	; 0x80
 8001cee:	d020      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x14e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b90      	cmp	r3, #144	; 0x90
 8001cf6:	d01c      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x14e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2ba0      	cmp	r3, #160	; 0xa0
 8001cfe:	d018      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x14e>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2bb0      	cmp	r3, #176	; 0xb0
 8001d06:	d014      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x14e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2bc0      	cmp	r3, #192	; 0xc0
 8001d0e:	d010      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x14e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2bd0      	cmp	r3, #208	; 0xd0
 8001d16:	d00c      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x14e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2be0      	cmp	r3, #224	; 0xe0
 8001d1e:	d008      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x14e>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2bf0      	cmp	r3, #240	; 0xf0
 8001d26:	d004      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x14e>
 8001d28:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001d2c:	483f      	ldr	r0, [pc, #252]	; (8001e2c <HAL_RCC_ClockConfig+0x248>)
 8001d2e:	f7fe fdf5 	bl	800091c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d32:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <HAL_RCC_ClockConfig+0x250>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	493d      	ldr	r1, [pc, #244]	; (8001e34 <HAL_RCC_ClockConfig+0x250>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d059      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d010      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x196>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d00c      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x196>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d008      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x196>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d004      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x196>
 8001d70:	f240 2187 	movw	r1, #647	; 0x287
 8001d74:	482d      	ldr	r0, [pc, #180]	; (8001e2c <HAL_RCC_ClockConfig+0x248>)
 8001d76:	f7fe fdd1 	bl	800091c <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <HAL_RCC_ClockConfig+0x250>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d119      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0bf      	b.n	8001f12 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d003      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d107      	bne.n	8001db2 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_RCC_ClockConfig+0x250>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0af      	b.n	8001f12 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_RCC_ClockConfig+0x250>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0a7      	b.n	8001f12 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_RCC_ClockConfig+0x250>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f023 0203 	bic.w	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4919      	ldr	r1, [pc, #100]	; (8001e34 <HAL_RCC_ClockConfig+0x250>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd4:	f7ff fa52 	bl	800127c <HAL_GetTick>
 8001dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ddc:	f7ff fa4e 	bl	800127c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e08f      	b.n	8001f12 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_RCC_ClockConfig+0x250>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 020c 	and.w	r2, r3, #12
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d1eb      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_RCC_ClockConfig+0x24c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d212      	bcs.n	8001e38 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_RCC_ClockConfig+0x24c>)
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_ClockConfig+0x24c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d007      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e072      	b.n	8001f12 <HAL_RCC_ClockConfig+0x32e>
 8001e2c:	08006e00 	.word	0x08006e00
 8001e30:	40023c00 	.word	0x40023c00
 8001e34:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d025      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d018      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x29a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e54:	d013      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x29a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001e5e:	d00e      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x29a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001e68:	d009      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x29a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001e72:	d004      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x29a>
 8001e74:	f240 21c5 	movw	r1, #709	; 0x2c5
 8001e78:	4828      	ldr	r0, [pc, #160]	; (8001f1c <HAL_RCC_ClockConfig+0x338>)
 8001e7a:	f7fe fd4f 	bl	800091c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_RCC_ClockConfig+0x33c>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	4925      	ldr	r1, [pc, #148]	; (8001f20 <HAL_RCC_ClockConfig+0x33c>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d026      	beq.n	8001eea <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d018      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x2f2>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eac:	d013      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x2f2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001eb6:	d00e      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x2f2>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001ec0:	d009      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x2f2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001eca:	d004      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x2f2>
 8001ecc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8001ed0:	4812      	ldr	r0, [pc, #72]	; (8001f1c <HAL_RCC_ClockConfig+0x338>)
 8001ed2:	f7fe fd23 	bl	800091c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_RCC_ClockConfig+0x33c>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	490e      	ldr	r1, [pc, #56]	; (8001f20 <HAL_RCC_ClockConfig+0x33c>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eea:	f000 f887 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_ClockConfig+0x33c>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	490a      	ldr	r1, [pc, #40]	; (8001f24 <HAL_RCC_ClockConfig+0x340>)
 8001efc:	5ccb      	ldrb	r3, [r1, r3]
 8001efe:	fa22 f303 	lsr.w	r3, r2, r3
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <HAL_RCC_ClockConfig+0x344>)
 8001f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_RCC_ClockConfig+0x348>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f88c 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	08006e00 	.word	0x08006e00
 8001f20:	40023800 	.word	0x40023800
 8001f24:	08006f00 	.word	0x08006f00
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000

08001f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f4c:	f7ff fff0 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	0a9b      	lsrs	r3, r3, #10
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4903      	ldr	r1, [pc, #12]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	08006f10 	.word	0x08006f10

08001f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f74:	f7ff ffdc 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0b5b      	lsrs	r3, r3, #13
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4903      	ldr	r1, [pc, #12]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	08006f10 	.word	0x08006f10

08001f98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0203 	and.w	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	08db      	lsrs	r3, r3, #3
 8001fd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <HAL_RCC_GetClockConfig+0x60>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 020f 	and.w	r2, r3, #15
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40023c00 	.word	0x40023c00

08001ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002000:	b088      	sub	sp, #32
 8002002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002018:	4bce      	ldr	r3, [pc, #824]	; (8002354 <HAL_RCC_GetSysClockFreq+0x358>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b0c      	cmp	r3, #12
 8002022:	f200 818d 	bhi.w	8002340 <HAL_RCC_GetSysClockFreq+0x344>
 8002026:	a201      	add	r2, pc, #4	; (adr r2, 800202c <HAL_RCC_GetSysClockFreq+0x30>)
 8002028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202c:	08002061 	.word	0x08002061
 8002030:	08002341 	.word	0x08002341
 8002034:	08002341 	.word	0x08002341
 8002038:	08002341 	.word	0x08002341
 800203c:	08002067 	.word	0x08002067
 8002040:	08002341 	.word	0x08002341
 8002044:	08002341 	.word	0x08002341
 8002048:	08002341 	.word	0x08002341
 800204c:	0800206d 	.word	0x0800206d
 8002050:	08002341 	.word	0x08002341
 8002054:	08002341 	.word	0x08002341
 8002058:	08002341 	.word	0x08002341
 800205c:	080021e1 	.word	0x080021e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002060:	4bbd      	ldr	r3, [pc, #756]	; (8002358 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002062:	61bb      	str	r3, [r7, #24]
       break;
 8002064:	e16f      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002066:	4bbd      	ldr	r3, [pc, #756]	; (800235c <HAL_RCC_GetSysClockFreq+0x360>)
 8002068:	61bb      	str	r3, [r7, #24]
      break;
 800206a:	e16c      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800206c:	4bb9      	ldr	r3, [pc, #740]	; (8002354 <HAL_RCC_GetSysClockFreq+0x358>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002074:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002076:	4bb7      	ldr	r3, [pc, #732]	; (8002354 <HAL_RCC_GetSysClockFreq+0x358>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d053      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002082:	4bb4      	ldr	r3, [pc, #720]	; (8002354 <HAL_RCC_GetSysClockFreq+0x358>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	099b      	lsrs	r3, r3, #6
 8002088:	461a      	mov	r2, r3
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002092:	f04f 0100 	mov.w	r1, #0
 8002096:	ea02 0400 	and.w	r4, r2, r0
 800209a:	603c      	str	r4, [r7, #0]
 800209c:	400b      	ands	r3, r1
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020a4:	4620      	mov	r0, r4
 80020a6:	4629      	mov	r1, r5
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	014b      	lsls	r3, r1, #5
 80020b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020b6:	0142      	lsls	r2, r0, #5
 80020b8:	4610      	mov	r0, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	4623      	mov	r3, r4
 80020be:	1ac0      	subs	r0, r0, r3
 80020c0:	462b      	mov	r3, r5
 80020c2:	eb61 0103 	sbc.w	r1, r1, r3
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	018b      	lsls	r3, r1, #6
 80020d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020d4:	0182      	lsls	r2, r0, #6
 80020d6:	1a12      	subs	r2, r2, r0
 80020d8:	eb63 0301 	sbc.w	r3, r3, r1
 80020dc:	f04f 0000 	mov.w	r0, #0
 80020e0:	f04f 0100 	mov.w	r1, #0
 80020e4:	00d9      	lsls	r1, r3, #3
 80020e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020ea:	00d0      	lsls	r0, r2, #3
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4621      	mov	r1, r4
 80020f2:	1852      	adds	r2, r2, r1
 80020f4:	4629      	mov	r1, r5
 80020f6:	eb43 0101 	adc.w	r1, r3, r1
 80020fa:	460b      	mov	r3, r1
 80020fc:	f04f 0000 	mov.w	r0, #0
 8002100:	f04f 0100 	mov.w	r1, #0
 8002104:	0259      	lsls	r1, r3, #9
 8002106:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800210a:	0250      	lsls	r0, r2, #9
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	461a      	mov	r2, r3
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	f7fe f8e0 	bl	80002e0 <__aeabi_uldivmod>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4613      	mov	r3, r2
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	e04c      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800212a:	4b8a      	ldr	r3, [pc, #552]	; (8002354 <HAL_RCC_GetSysClockFreq+0x358>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	099b      	lsrs	r3, r3, #6
 8002130:	461a      	mov	r2, r3
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	f240 10ff 	movw	r0, #511	; 0x1ff
 800213a:	f04f 0100 	mov.w	r1, #0
 800213e:	ea02 0a00 	and.w	sl, r2, r0
 8002142:	ea03 0b01 	and.w	fp, r3, r1
 8002146:	4650      	mov	r0, sl
 8002148:	4659      	mov	r1, fp
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	014b      	lsls	r3, r1, #5
 8002154:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002158:	0142      	lsls	r2, r0, #5
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	ebb0 000a 	subs.w	r0, r0, sl
 8002162:	eb61 010b 	sbc.w	r1, r1, fp
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	018b      	lsls	r3, r1, #6
 8002170:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002174:	0182      	lsls	r2, r0, #6
 8002176:	1a12      	subs	r2, r2, r0
 8002178:	eb63 0301 	sbc.w	r3, r3, r1
 800217c:	f04f 0000 	mov.w	r0, #0
 8002180:	f04f 0100 	mov.w	r1, #0
 8002184:	00d9      	lsls	r1, r3, #3
 8002186:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800218a:	00d0      	lsls	r0, r2, #3
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	eb12 020a 	adds.w	r2, r2, sl
 8002194:	eb43 030b 	adc.w	r3, r3, fp
 8002198:	f04f 0000 	mov.w	r0, #0
 800219c:	f04f 0100 	mov.w	r1, #0
 80021a0:	0299      	lsls	r1, r3, #10
 80021a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021a6:	0290      	lsls	r0, r2, #10
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	461a      	mov	r2, r3
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	f7fe f892 	bl	80002e0 <__aeabi_uldivmod>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4613      	mov	r3, r2
 80021c2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021c4:	4b63      	ldr	r3, [pc, #396]	; (8002354 <HAL_RCC_GetSysClockFreq+0x358>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	0c1b      	lsrs	r3, r3, #16
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	3301      	adds	r3, #1
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	61bb      	str	r3, [r7, #24]
      break;
 80021de:	e0b2      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e0:	4b5c      	ldr	r3, [pc, #368]	; (8002354 <HAL_RCC_GetSysClockFreq+0x358>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ea:	4b5a      	ldr	r3, [pc, #360]	; (8002354 <HAL_RCC_GetSysClockFreq+0x358>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d04d      	beq.n	8002292 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f6:	4b57      	ldr	r3, [pc, #348]	; (8002354 <HAL_RCC_GetSysClockFreq+0x358>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	099b      	lsrs	r3, r3, #6
 80021fc:	461a      	mov	r2, r3
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002206:	f04f 0100 	mov.w	r1, #0
 800220a:	ea02 0800 	and.w	r8, r2, r0
 800220e:	ea03 0901 	and.w	r9, r3, r1
 8002212:	4640      	mov	r0, r8
 8002214:	4649      	mov	r1, r9
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	014b      	lsls	r3, r1, #5
 8002220:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002224:	0142      	lsls	r2, r0, #5
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	ebb0 0008 	subs.w	r0, r0, r8
 800222e:	eb61 0109 	sbc.w	r1, r1, r9
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	018b      	lsls	r3, r1, #6
 800223c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002240:	0182      	lsls	r2, r0, #6
 8002242:	1a12      	subs	r2, r2, r0
 8002244:	eb63 0301 	sbc.w	r3, r3, r1
 8002248:	f04f 0000 	mov.w	r0, #0
 800224c:	f04f 0100 	mov.w	r1, #0
 8002250:	00d9      	lsls	r1, r3, #3
 8002252:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002256:	00d0      	lsls	r0, r2, #3
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	eb12 0208 	adds.w	r2, r2, r8
 8002260:	eb43 0309 	adc.w	r3, r3, r9
 8002264:	f04f 0000 	mov.w	r0, #0
 8002268:	f04f 0100 	mov.w	r1, #0
 800226c:	0259      	lsls	r1, r3, #9
 800226e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002272:	0250      	lsls	r0, r2, #9
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	461a      	mov	r2, r3
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	f7fe f82c 	bl	80002e0 <__aeabi_uldivmod>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4613      	mov	r3, r2
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	e04a      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_RCC_GetSysClockFreq+0x358>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	461a      	mov	r2, r3
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022a2:	f04f 0100 	mov.w	r1, #0
 80022a6:	ea02 0400 	and.w	r4, r2, r0
 80022aa:	ea03 0501 	and.w	r5, r3, r1
 80022ae:	4620      	mov	r0, r4
 80022b0:	4629      	mov	r1, r5
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	014b      	lsls	r3, r1, #5
 80022bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022c0:	0142      	lsls	r2, r0, #5
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	1b00      	subs	r0, r0, r4
 80022c8:	eb61 0105 	sbc.w	r1, r1, r5
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	018b      	lsls	r3, r1, #6
 80022d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022da:	0182      	lsls	r2, r0, #6
 80022dc:	1a12      	subs	r2, r2, r0
 80022de:	eb63 0301 	sbc.w	r3, r3, r1
 80022e2:	f04f 0000 	mov.w	r0, #0
 80022e6:	f04f 0100 	mov.w	r1, #0
 80022ea:	00d9      	lsls	r1, r3, #3
 80022ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022f0:	00d0      	lsls	r0, r2, #3
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	1912      	adds	r2, r2, r4
 80022f8:	eb45 0303 	adc.w	r3, r5, r3
 80022fc:	f04f 0000 	mov.w	r0, #0
 8002300:	f04f 0100 	mov.w	r1, #0
 8002304:	0299      	lsls	r1, r3, #10
 8002306:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800230a:	0290      	lsls	r0, r2, #10
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	461a      	mov	r2, r3
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	f7fd ffe0 	bl	80002e0 <__aeabi_uldivmod>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4613      	mov	r3, r2
 8002326:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_RCC_GetSysClockFreq+0x358>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	0f1b      	lsrs	r3, r3, #28
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	61bb      	str	r3, [r7, #24]
      break;
 800233e:	e002      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002342:	61bb      	str	r3, [r7, #24]
      break;
 8002344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002346:	69bb      	ldr	r3, [r7, #24]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3720      	adds	r7, #32
 800234c:	46bd      	mov	sp, r7
 800234e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800
 8002358:	00f42400 	.word	0x00f42400
 800235c:	007a1200 	.word	0x007a1200

08002360 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e34b      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b0f      	cmp	r3, #15
 8002378:	d904      	bls.n	8002384 <HAL_RCC_OscConfig+0x24>
 800237a:	f640 5112 	movw	r1, #3346	; 0xd12
 800237e:	48a5      	ldr	r0, [pc, #660]	; (8002614 <HAL_RCC_OscConfig+0x2b4>)
 8002380:	f7fe facc 	bl	800091c <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8096 	beq.w	80024be <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00e      	beq.n	80023b8 <HAL_RCC_OscConfig+0x58>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a2:	d009      	beq.n	80023b8 <HAL_RCC_OscConfig+0x58>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ac:	d004      	beq.n	80023b8 <HAL_RCC_OscConfig+0x58>
 80023ae:	f640 5117 	movw	r1, #3351	; 0xd17
 80023b2:	4898      	ldr	r0, [pc, #608]	; (8002614 <HAL_RCC_OscConfig+0x2b4>)
 80023b4:	f7fe fab2 	bl	800091c <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023b8:	4b97      	ldr	r3, [pc, #604]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d019      	beq.n	80023f8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023c4:	4b94      	ldr	r3, [pc, #592]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023d0:	4b91      	ldr	r3, [pc, #580]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023dc:	d00c      	beq.n	80023f8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023de:	4b8e      	ldr	r3, [pc, #568]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d112      	bne.n	8002410 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ea:	4b8b      	ldr	r3, [pc, #556]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023f6:	d10b      	bne.n	8002410 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f8:	4b87      	ldr	r3, [pc, #540]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d05b      	beq.n	80024bc <HAL_RCC_OscConfig+0x15c>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d157      	bne.n	80024bc <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e2fc      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002418:	d106      	bne.n	8002428 <HAL_RCC_OscConfig+0xc8>
 800241a:	4b7f      	ldr	r3, [pc, #508]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7e      	ldr	r2, [pc, #504]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e01d      	b.n	8002464 <HAL_RCC_OscConfig+0x104>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0xec>
 8002432:	4b79      	ldr	r3, [pc, #484]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a78      	ldr	r2, [pc, #480]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 8002438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	4b76      	ldr	r3, [pc, #472]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a75      	ldr	r2, [pc, #468]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e00b      	b.n	8002464 <HAL_RCC_OscConfig+0x104>
 800244c:	4b72      	ldr	r3, [pc, #456]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a71      	ldr	r2, [pc, #452]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 8002452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a6e      	ldr	r2, [pc, #440]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 800245e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d013      	beq.n	8002494 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7fe ff06 	bl	800127c <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002474:	f7fe ff02 	bl	800127c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e2c1      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	4b64      	ldr	r3, [pc, #400]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x114>
 8002492:	e014      	b.n	80024be <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fef2 	bl	800127c <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800249c:	f7fe feee 	bl	800127c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e2ad      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	4b5a      	ldr	r3, [pc, #360]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x13c>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8086 	beq.w	80025d8 <HAL_RCC_OscConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCC_OscConfig+0x186>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d004      	beq.n	80024e6 <HAL_RCC_OscConfig+0x186>
 80024dc:	f640 514f 	movw	r1, #3407	; 0xd4f
 80024e0:	484c      	ldr	r0, [pc, #304]	; (8002614 <HAL_RCC_OscConfig+0x2b4>)
 80024e2:	f7fe fa1b 	bl	800091c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b1f      	cmp	r3, #31
 80024ec:	d904      	bls.n	80024f8 <HAL_RCC_OscConfig+0x198>
 80024ee:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 80024f2:	4848      	ldr	r0, [pc, #288]	; (8002614 <HAL_RCC_OscConfig+0x2b4>)
 80024f4:	f7fe fa12 	bl	800091c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024f8:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 030c 	and.w	r3, r3, #12
 8002500:	2b00      	cmp	r3, #0
 8002502:	d017      	beq.n	8002534 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002504:	4b44      	ldr	r3, [pc, #272]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800250c:	2b08      	cmp	r3, #8
 800250e:	d105      	bne.n	800251c <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002510:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251c:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002524:	2b0c      	cmp	r3, #12
 8002526:	d11c      	bne.n	8002562 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002528:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d116      	bne.n	8002562 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002534:	4b38      	ldr	r3, [pc, #224]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_OscConfig+0x1ec>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d001      	beq.n	800254c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e25e      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254c:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	492f      	ldr	r1, [pc, #188]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002560:	e03a      	b.n	80025d8 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d020      	beq.n	80025ac <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800256a:	4b2c      	ldr	r3, [pc, #176]	; (800261c <HAL_RCC_OscConfig+0x2bc>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe fe84 	bl	800127c <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002578:	f7fe fe80 	bl	800127c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e23f      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	491c      	ldr	r1, [pc, #112]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
 80025aa:	e015      	b.n	80025d8 <HAL_RCC_OscConfig+0x278>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <HAL_RCC_OscConfig+0x2bc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe fe63 	bl	800127c <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ba:	f7fe fe5f 	bl	800127c <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e21e      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_RCC_OscConfig+0x2b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d045      	beq.n	8002670 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_RCC_OscConfig+0x29e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d004      	beq.n	80025fe <HAL_RCC_OscConfig+0x29e>
 80025f4:	f640 5196 	movw	r1, #3478	; 0xd96
 80025f8:	4806      	ldr	r0, [pc, #24]	; (8002614 <HAL_RCC_OscConfig+0x2b4>)
 80025fa:	f7fe f98f 	bl	800091c <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d01e      	beq.n	8002644 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_RCC_OscConfig+0x2c0>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe fe36 	bl	800127c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	e010      	b.n	8002636 <HAL_RCC_OscConfig+0x2d6>
 8002614:	08006e38 	.word	0x08006e38
 8002618:	40023800 	.word	0x40023800
 800261c:	42470000 	.word	0x42470000
 8002620:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe fe2a 	bl	800127c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e1e9      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	4ba4      	ldr	r3, [pc, #656]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 8002638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x2c4>
 8002642:	e015      	b.n	8002670 <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002644:	4ba1      	ldr	r3, [pc, #644]	; (80028cc <HAL_RCC_OscConfig+0x56c>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264a:	f7fe fe17 	bl	800127c <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002652:	f7fe fe13 	bl	800127c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e1d2      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	4b98      	ldr	r3, [pc, #608]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 8002666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80a8 	beq.w	80027ce <HAL_RCC_OscConfig+0x46e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00c      	beq.n	80026a4 <HAL_RCC_OscConfig+0x344>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d008      	beq.n	80026a4 <HAL_RCC_OscConfig+0x344>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b05      	cmp	r3, #5
 8002698:	d004      	beq.n	80026a4 <HAL_RCC_OscConfig+0x344>
 800269a:	f640 51c2 	movw	r1, #3522	; 0xdc2
 800269e:	488c      	ldr	r0, [pc, #560]	; (80028d0 <HAL_RCC_OscConfig+0x570>)
 80026a0:	f7fe f93c 	bl	800091c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a4:	4b88      	ldr	r3, [pc, #544]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10f      	bne.n	80026d0 <HAL_RCC_OscConfig+0x370>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	4b84      	ldr	r3, [pc, #528]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	4a83      	ldr	r2, [pc, #524]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 80026ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026be:	6413      	str	r3, [r2, #64]	; 0x40
 80026c0:	4b81      	ldr	r3, [pc, #516]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026cc:	2301      	movs	r3, #1
 80026ce:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	4b80      	ldr	r3, [pc, #512]	; (80028d4 <HAL_RCC_OscConfig+0x574>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d118      	bne.n	800270e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026dc:	4b7d      	ldr	r3, [pc, #500]	; (80028d4 <HAL_RCC_OscConfig+0x574>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a7c      	ldr	r2, [pc, #496]	; (80028d4 <HAL_RCC_OscConfig+0x574>)
 80026e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e8:	f7fe fdc8 	bl	800127c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x3a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7fe fdc4 	bl	800127c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x3a2>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e183      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002702:	4b74      	ldr	r3, [pc, #464]	; (80028d4 <HAL_RCC_OscConfig+0x574>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d106      	bne.n	8002724 <HAL_RCC_OscConfig+0x3c4>
 8002716:	4b6c      	ldr	r3, [pc, #432]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	4a6b      	ldr	r2, [pc, #428]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6713      	str	r3, [r2, #112]	; 0x70
 8002722:	e01c      	b.n	800275e <HAL_RCC_OscConfig+0x3fe>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b05      	cmp	r3, #5
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_OscConfig+0x3e6>
 800272c:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4a65      	ldr	r2, [pc, #404]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6713      	str	r3, [r2, #112]	; 0x70
 8002738:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a62      	ldr	r2, [pc, #392]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0x3fe>
 8002746:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a5f      	ldr	r2, [pc, #380]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
 8002752:	4b5d      	ldr	r3, [pc, #372]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a5c      	ldr	r2, [pc, #368]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d015      	beq.n	8002792 <HAL_RCC_OscConfig+0x432>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7fe fd89 	bl	800127c <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fd85 	bl	800127c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e142      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ee      	beq.n	800276e <HAL_RCC_OscConfig+0x40e>
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002792:	f7fe fd73 	bl	800127c <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x450>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7fe fd6f 	bl	800127c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e12c      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	4b45      	ldr	r3, [pc, #276]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_OscConfig+0x43a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d105      	bne.n	80027ce <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c2:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a40      	ldr	r2, [pc, #256]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 80027c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00c      	beq.n	80027f0 <HAL_RCC_OscConfig+0x490>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d008      	beq.n	80027f0 <HAL_RCC_OscConfig+0x490>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d004      	beq.n	80027f0 <HAL_RCC_OscConfig+0x490>
 80027e6:	f640 6105 	movw	r1, #3589	; 0xe05
 80027ea:	4839      	ldr	r0, [pc, #228]	; (80028d0 <HAL_RCC_OscConfig+0x570>)
 80027ec:	f7fe f896 	bl	800091c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 8107 	beq.w	8002a08 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027fa:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <HAL_RCC_OscConfig+0x568>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b08      	cmp	r3, #8
 8002804:	f000 80c0 	beq.w	8002988 <HAL_RCC_OscConfig+0x628>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b02      	cmp	r3, #2
 800280e:	f040 80a4 	bne.w	800295a <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <HAL_RCC_OscConfig+0x4ce>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002822:	d004      	beq.n	800282e <HAL_RCC_OscConfig+0x4ce>
 8002824:	f640 610e 	movw	r1, #3598	; 0xe0e
 8002828:	4829      	ldr	r0, [pc, #164]	; (80028d0 <HAL_RCC_OscConfig+0x570>)
 800282a:	f7fe f877 	bl	800091c <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	2b3f      	cmp	r3, #63	; 0x3f
 8002834:	d904      	bls.n	8002840 <HAL_RCC_OscConfig+0x4e0>
 8002836:	f640 610f 	movw	r1, #3599	; 0xe0f
 800283a:	4825      	ldr	r0, [pc, #148]	; (80028d0 <HAL_RCC_OscConfig+0x570>)
 800283c:	f7fe f86e 	bl	800091c <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	2b31      	cmp	r3, #49	; 0x31
 8002846:	d904      	bls.n	8002852 <HAL_RCC_OscConfig+0x4f2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002850:	d904      	bls.n	800285c <HAL_RCC_OscConfig+0x4fc>
 8002852:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002856:	481e      	ldr	r0, [pc, #120]	; (80028d0 <HAL_RCC_OscConfig+0x570>)
 8002858:	f7fe f860 	bl	800091c <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	2b02      	cmp	r3, #2
 8002862:	d010      	beq.n	8002886 <HAL_RCC_OscConfig+0x526>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	2b04      	cmp	r3, #4
 800286a:	d00c      	beq.n	8002886 <HAL_RCC_OscConfig+0x526>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	2b06      	cmp	r3, #6
 8002872:	d008      	beq.n	8002886 <HAL_RCC_OscConfig+0x526>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002878:	2b08      	cmp	r3, #8
 800287a:	d004      	beq.n	8002886 <HAL_RCC_OscConfig+0x526>
 800287c:	f640 6111 	movw	r1, #3601	; 0xe11
 8002880:	4813      	ldr	r0, [pc, #76]	; (80028d0 <HAL_RCC_OscConfig+0x570>)
 8002882:	f7fe f84b 	bl	800091c <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	2b01      	cmp	r3, #1
 800288c:	d903      	bls.n	8002896 <HAL_RCC_OscConfig+0x536>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	2b0f      	cmp	r3, #15
 8002894:	d904      	bls.n	80028a0 <HAL_RCC_OscConfig+0x540>
 8002896:	f640 6112 	movw	r1, #3602	; 0xe12
 800289a:	480d      	ldr	r0, [pc, #52]	; (80028d0 <HAL_RCC_OscConfig+0x570>)
 800289c:	f7fe f83e 	bl	800091c <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d903      	bls.n	80028b0 <HAL_RCC_OscConfig+0x550>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	2b07      	cmp	r3, #7
 80028ae:	d904      	bls.n	80028ba <HAL_RCC_OscConfig+0x55a>
 80028b0:	f640 6113 	movw	r1, #3603	; 0xe13
 80028b4:	4806      	ldr	r0, [pc, #24]	; (80028d0 <HAL_RCC_OscConfig+0x570>)
 80028b6:	f7fe f831 	bl	800091c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <HAL_RCC_OscConfig+0x578>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe fcdc 	bl	800127c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	e012      	b.n	80028ee <HAL_RCC_OscConfig+0x58e>
 80028c8:	40023800 	.word	0x40023800
 80028cc:	42470e80 	.word	0x42470e80
 80028d0:	08006e38 	.word	0x08006e38
 80028d4:	40007000 	.word	0x40007000
 80028d8:	42470060 	.word	0x42470060
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe fcce 	bl	800127c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e08d      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	4b49      	ldr	r3, [pc, #292]	; (8002a14 <HAL_RCC_OscConfig+0x6b4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69da      	ldr	r2, [r3, #28]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	019b      	lsls	r3, r3, #6
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	3b01      	subs	r3, #1
 8002914:	041b      	lsls	r3, r3, #16
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	071b      	lsls	r3, r3, #28
 8002926:	493b      	ldr	r1, [pc, #236]	; (8002a14 <HAL_RCC_OscConfig+0x6b4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800292c:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <HAL_RCC_OscConfig+0x6b8>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002932:	f7fe fca3 	bl	800127c <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293a:	f7fe fc9f 	bl	800127c <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e05e      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294c:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <HAL_RCC_OscConfig+0x6b4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x5da>
 8002958:	e056      	b.n	8002a08 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295a:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <HAL_RCC_OscConfig+0x6b8>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fc8c 	bl	800127c <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe fc88 	bl	800127c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e047      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297a:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <HAL_RCC_OscConfig+0x6b4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x608>
 8002986:	e03f      	b.n	8002a08 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e03a      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002994:	4b1f      	ldr	r3, [pc, #124]	; (8002a14 <HAL_RCC_OscConfig+0x6b4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d030      	beq.n	8002a04 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d129      	bne.n	8002a04 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d122      	bne.n	8002a04 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029c4:	4013      	ands	r3, r2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d119      	bne.n	8002a04 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029da:	085b      	lsrs	r3, r3, #1
 80029dc:	3b01      	subs	r3, #1
 80029de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d10f      	bne.n	8002a04 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	42470060 	.word	0x42470060

08002a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e0c5      	b.n	8002bba <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a64      	ldr	r2, [pc, #400]	; (8002bc4 <HAL_TIM_Base_Init+0x1a8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d045      	beq.n	8002ac4 <HAL_TIM_Base_Init+0xa8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a40:	d040      	beq.n	8002ac4 <HAL_TIM_Base_Init+0xa8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a60      	ldr	r2, [pc, #384]	; (8002bc8 <HAL_TIM_Base_Init+0x1ac>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d03b      	beq.n	8002ac4 <HAL_TIM_Base_Init+0xa8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a5e      	ldr	r2, [pc, #376]	; (8002bcc <HAL_TIM_Base_Init+0x1b0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d036      	beq.n	8002ac4 <HAL_TIM_Base_Init+0xa8>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a5d      	ldr	r2, [pc, #372]	; (8002bd0 <HAL_TIM_Base_Init+0x1b4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d031      	beq.n	8002ac4 <HAL_TIM_Base_Init+0xa8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a5b      	ldr	r2, [pc, #364]	; (8002bd4 <HAL_TIM_Base_Init+0x1b8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d02c      	beq.n	8002ac4 <HAL_TIM_Base_Init+0xa8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a5a      	ldr	r2, [pc, #360]	; (8002bd8 <HAL_TIM_Base_Init+0x1bc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d027      	beq.n	8002ac4 <HAL_TIM_Base_Init+0xa8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a58      	ldr	r2, [pc, #352]	; (8002bdc <HAL_TIM_Base_Init+0x1c0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d022      	beq.n	8002ac4 <HAL_TIM_Base_Init+0xa8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a57      	ldr	r2, [pc, #348]	; (8002be0 <HAL_TIM_Base_Init+0x1c4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d01d      	beq.n	8002ac4 <HAL_TIM_Base_Init+0xa8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a55      	ldr	r2, [pc, #340]	; (8002be4 <HAL_TIM_Base_Init+0x1c8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d018      	beq.n	8002ac4 <HAL_TIM_Base_Init+0xa8>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a54      	ldr	r2, [pc, #336]	; (8002be8 <HAL_TIM_Base_Init+0x1cc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <HAL_TIM_Base_Init+0xa8>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a52      	ldr	r2, [pc, #328]	; (8002bec <HAL_TIM_Base_Init+0x1d0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00e      	beq.n	8002ac4 <HAL_TIM_Base_Init+0xa8>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a51      	ldr	r2, [pc, #324]	; (8002bf0 <HAL_TIM_Base_Init+0x1d4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <HAL_TIM_Base_Init+0xa8>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a4f      	ldr	r2, [pc, #316]	; (8002bf4 <HAL_TIM_Base_Init+0x1d8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d004      	beq.n	8002ac4 <HAL_TIM_Base_Init+0xa8>
 8002aba:	f240 1113 	movw	r1, #275	; 0x113
 8002abe:	484e      	ldr	r0, [pc, #312]	; (8002bf8 <HAL_TIM_Base_Init+0x1dc>)
 8002ac0:	f7fd ff2c 	bl	800091c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d014      	beq.n	8002af6 <HAL_TIM_Base_Init+0xda>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d010      	beq.n	8002af6 <HAL_TIM_Base_Init+0xda>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d00c      	beq.n	8002af6 <HAL_TIM_Base_Init+0xda>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b40      	cmp	r3, #64	; 0x40
 8002ae2:	d008      	beq.n	8002af6 <HAL_TIM_Base_Init+0xda>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b60      	cmp	r3, #96	; 0x60
 8002aea:	d004      	beq.n	8002af6 <HAL_TIM_Base_Init+0xda>
 8002aec:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002af0:	4841      	ldr	r0, [pc, #260]	; (8002bf8 <HAL_TIM_Base_Init+0x1dc>)
 8002af2:	f7fd ff13 	bl	800091c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00e      	beq.n	8002b1c <HAL_TIM_Base_Init+0x100>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b06:	d009      	beq.n	8002b1c <HAL_TIM_Base_Init+0x100>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b10:	d004      	beq.n	8002b1c <HAL_TIM_Base_Init+0x100>
 8002b12:	f240 1115 	movw	r1, #277	; 0x115
 8002b16:	4838      	ldr	r0, [pc, #224]	; (8002bf8 <HAL_TIM_Base_Init+0x1dc>)
 8002b18:	f7fd ff00 	bl	800091c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_TIM_Base_Init+0x11a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d004      	beq.n	8002b36 <HAL_TIM_Base_Init+0x11a>
 8002b2c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8002b30:	4831      	ldr	r0, [pc, #196]	; (8002bf8 <HAL_TIM_Base_Init+0x1dc>)
 8002b32:	f7fd fef3 	bl	800091c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f856 	bl	8002bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f000 fa4a 	bl	8002ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40000800 	.word	0x40000800
 8002bd0:	40000c00 	.word	0x40000c00
 8002bd4:	40001000 	.word	0x40001000
 8002bd8:	40001400 	.word	0x40001400
 8002bdc:	40010400 	.word	0x40010400
 8002be0:	40014000 	.word	0x40014000
 8002be4:	40014400 	.word	0x40014400
 8002be8:	40014800 	.word	0x40014800
 8002bec:	40001800 	.word	0x40001800
 8002bf0:	40001c00 	.word	0x40001c00
 8002bf4:	40002000 	.word	0x40002000
 8002bf8:	08006e74 	.word	0x08006e74

08002bfc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a51      	ldr	r2, [pc, #324]	; (8002d64 <HAL_TIM_Base_Start_IT+0x154>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d045      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x9e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2a:	d040      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x9e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a4d      	ldr	r2, [pc, #308]	; (8002d68 <HAL_TIM_Base_Start_IT+0x158>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d03b      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x9e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a4c      	ldr	r2, [pc, #304]	; (8002d6c <HAL_TIM_Base_Start_IT+0x15c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d036      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x9e>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a4a      	ldr	r2, [pc, #296]	; (8002d70 <HAL_TIM_Base_Start_IT+0x160>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d031      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x9e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a49      	ldr	r2, [pc, #292]	; (8002d74 <HAL_TIM_Base_Start_IT+0x164>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d02c      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x9e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a47      	ldr	r2, [pc, #284]	; (8002d78 <HAL_TIM_Base_Start_IT+0x168>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d027      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x9e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a46      	ldr	r2, [pc, #280]	; (8002d7c <HAL_TIM_Base_Start_IT+0x16c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d022      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x9e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a44      	ldr	r2, [pc, #272]	; (8002d80 <HAL_TIM_Base_Start_IT+0x170>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01d      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x9e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a43      	ldr	r2, [pc, #268]	; (8002d84 <HAL_TIM_Base_Start_IT+0x174>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d018      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x9e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a41      	ldr	r2, [pc, #260]	; (8002d88 <HAL_TIM_Base_Start_IT+0x178>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x9e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a40      	ldr	r2, [pc, #256]	; (8002d8c <HAL_TIM_Base_Start_IT+0x17c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00e      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x9e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a3e      	ldr	r2, [pc, #248]	; (8002d90 <HAL_TIM_Base_Start_IT+0x180>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d009      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x9e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a3d      	ldr	r2, [pc, #244]	; (8002d94 <HAL_TIM_Base_Start_IT+0x184>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d004      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x9e>
 8002ca4:	f240 11cf 	movw	r1, #463	; 0x1cf
 8002ca8:	483b      	ldr	r0, [pc, #236]	; (8002d98 <HAL_TIM_Base_Start_IT+0x188>)
 8002caa:	f7fd fe37 	bl	800091c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d001      	beq.n	8002cbe <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e04e      	b.n	8002d5c <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <HAL_TIM_Base_Start_IT+0x154>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d022      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x116>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce8:	d01d      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x116>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <HAL_TIM_Base_Start_IT+0x158>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d018      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x116>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <HAL_TIM_Base_Start_IT+0x15c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x116>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <HAL_TIM_Base_Start_IT+0x160>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x116>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1b      	ldr	r2, [pc, #108]	; (8002d7c <HAL_TIM_Base_Start_IT+0x16c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x116>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <HAL_TIM_Base_Start_IT+0x170>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x116>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1a      	ldr	r2, [pc, #104]	; (8002d8c <HAL_TIM_Base_Start_IT+0x17c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d111      	bne.n	8002d4a <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d010      	beq.n	8002d5a <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d48:	e007      	b.n	8002d5a <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40010000 	.word	0x40010000
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	40000800 	.word	0x40000800
 8002d70:	40000c00 	.word	0x40000c00
 8002d74:	40001000 	.word	0x40001000
 8002d78:	40001400 	.word	0x40001400
 8002d7c:	40010400 	.word	0x40010400
 8002d80:	40014000 	.word	0x40014000
 8002d84:	40014400 	.word	0x40014400
 8002d88:	40014800 	.word	0x40014800
 8002d8c:	40001800 	.word	0x40001800
 8002d90:	40001c00 	.word	0x40001c00
 8002d94:	40002000 	.word	0x40002000
 8002d98:	08006e74 	.word	0x08006e74

08002d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d122      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d11b      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0202 	mvn.w	r2, #2
 8002dc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f8ee 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002de4:	e005      	b.n	8002df2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f8e0 	bl	8002fac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f8f1 	bl	8002fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d122      	bne.n	8002e4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d11b      	bne.n	8002e4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0204 	mvn.w	r2, #4
 8002e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2202      	movs	r2, #2
 8002e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f8c4 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002e38:	e005      	b.n	8002e46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f8b6 	bl	8002fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f8c7 	bl	8002fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d122      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d11b      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0208 	mvn.w	r2, #8
 8002e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2204      	movs	r2, #4
 8002e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f89a 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002e8c:	e005      	b.n	8002e9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f88c 	bl	8002fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f89d 	bl	8002fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d122      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d11b      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0210 	mvn.w	r2, #16
 8002ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f870 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f862 	bl	8002fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f873 	bl	8002fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d10e      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d107      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0201 	mvn.w	r2, #1
 8002f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd fce6 	bl	80008ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	2b80      	cmp	r3, #128	; 0x80
 8002f2c:	d10e      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f38:	2b80      	cmp	r3, #128	; 0x80
 8002f3a:	d107      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f902 	bl	8003150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f56:	2b40      	cmp	r3, #64	; 0x40
 8002f58:	d10e      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d107      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f838 	bl	8002fe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d10e      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d107      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0220 	mvn.w	r2, #32
 8002f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f8cc 	bl	800313c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a40      	ldr	r2, [pc, #256]	; (8003110 <TIM_Base_SetConfig+0x114>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d013      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301a:	d00f      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a3d      	ldr	r2, [pc, #244]	; (8003114 <TIM_Base_SetConfig+0x118>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00b      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a3c      	ldr	r2, [pc, #240]	; (8003118 <TIM_Base_SetConfig+0x11c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d007      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a3b      	ldr	r2, [pc, #236]	; (800311c <TIM_Base_SetConfig+0x120>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a3a      	ldr	r2, [pc, #232]	; (8003120 <TIM_Base_SetConfig+0x124>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d108      	bne.n	800304e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a2f      	ldr	r2, [pc, #188]	; (8003110 <TIM_Base_SetConfig+0x114>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d02b      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d027      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2c      	ldr	r2, [pc, #176]	; (8003114 <TIM_Base_SetConfig+0x118>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d023      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a2b      	ldr	r2, [pc, #172]	; (8003118 <TIM_Base_SetConfig+0x11c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d01f      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a2a      	ldr	r2, [pc, #168]	; (800311c <TIM_Base_SetConfig+0x120>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01b      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a29      	ldr	r2, [pc, #164]	; (8003120 <TIM_Base_SetConfig+0x124>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d017      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a28      	ldr	r2, [pc, #160]	; (8003124 <TIM_Base_SetConfig+0x128>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d013      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a27      	ldr	r2, [pc, #156]	; (8003128 <TIM_Base_SetConfig+0x12c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00f      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a26      	ldr	r2, [pc, #152]	; (800312c <TIM_Base_SetConfig+0x130>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00b      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a25      	ldr	r2, [pc, #148]	; (8003130 <TIM_Base_SetConfig+0x134>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d007      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a24      	ldr	r2, [pc, #144]	; (8003134 <TIM_Base_SetConfig+0x138>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d003      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a23      	ldr	r2, [pc, #140]	; (8003138 <TIM_Base_SetConfig+0x13c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d108      	bne.n	80030c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <TIM_Base_SetConfig+0x114>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_Base_SetConfig+0xf8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <TIM_Base_SetConfig+0x124>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d103      	bne.n	80030fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	615a      	str	r2, [r3, #20]
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40010000 	.word	0x40010000
 8003114:	40000400 	.word	0x40000400
 8003118:	40000800 	.word	0x40000800
 800311c:	40000c00 	.word	0x40000c00
 8003120:	40010400 	.word	0x40010400
 8003124:	40014000 	.word	0x40014000
 8003128:	40014400 	.word	0x40014400
 800312c:	40014800 	.word	0x40014800
 8003130:	40001800 	.word	0x40001800
 8003134:	40001c00 	.word	0x40001c00
 8003138:	40002000 	.word	0x40002000

0800313c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e0be      	b.n	80032f4 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d03b      	beq.n	80031f6 <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a5e      	ldr	r2, [pc, #376]	; (80032fc <HAL_UART_Init+0x198>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d01d      	beq.n	80031c4 <HAL_UART_Init+0x60>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a5c      	ldr	r2, [pc, #368]	; (8003300 <HAL_UART_Init+0x19c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d018      	beq.n	80031c4 <HAL_UART_Init+0x60>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a5b      	ldr	r2, [pc, #364]	; (8003304 <HAL_UART_Init+0x1a0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d013      	beq.n	80031c4 <HAL_UART_Init+0x60>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a59      	ldr	r2, [pc, #356]	; (8003308 <HAL_UART_Init+0x1a4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00e      	beq.n	80031c4 <HAL_UART_Init+0x60>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a58      	ldr	r2, [pc, #352]	; (800330c <HAL_UART_Init+0x1a8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_UART_Init+0x60>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a56      	ldr	r2, [pc, #344]	; (8003310 <HAL_UART_Init+0x1ac>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_UART_Init+0x60>
 80031ba:	f44f 71b9 	mov.w	r1, #370	; 0x172
 80031be:	4855      	ldr	r0, [pc, #340]	; (8003314 <HAL_UART_Init+0x1b0>)
 80031c0:	f7fd fbac 	bl	800091c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d037      	beq.n	800323c <HAL_UART_Init+0xd8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d4:	d032      	beq.n	800323c <HAL_UART_Init+0xd8>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031de:	d02d      	beq.n	800323c <HAL_UART_Init+0xd8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031e8:	d028      	beq.n	800323c <HAL_UART_Init+0xd8>
 80031ea:	f240 1173 	movw	r1, #371	; 0x173
 80031ee:	4849      	ldr	r0, [pc, #292]	; (8003314 <HAL_UART_Init+0x1b0>)
 80031f0:	f7fd fb94 	bl	800091c <assert_failed>
 80031f4:	e022      	b.n	800323c <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a40      	ldr	r2, [pc, #256]	; (80032fc <HAL_UART_Init+0x198>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d01d      	beq.n	800323c <HAL_UART_Init+0xd8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a3e      	ldr	r2, [pc, #248]	; (8003300 <HAL_UART_Init+0x19c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d018      	beq.n	800323c <HAL_UART_Init+0xd8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a3d      	ldr	r2, [pc, #244]	; (8003304 <HAL_UART_Init+0x1a0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d013      	beq.n	800323c <HAL_UART_Init+0xd8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a3b      	ldr	r2, [pc, #236]	; (8003308 <HAL_UART_Init+0x1a4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00e      	beq.n	800323c <HAL_UART_Init+0xd8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a3a      	ldr	r2, [pc, #232]	; (800330c <HAL_UART_Init+0x1a8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d009      	beq.n	800323c <HAL_UART_Init+0xd8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a38      	ldr	r2, [pc, #224]	; (8003310 <HAL_UART_Init+0x1ac>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d004      	beq.n	800323c <HAL_UART_Init+0xd8>
 8003232:	f240 1177 	movw	r1, #375	; 0x177
 8003236:	4837      	ldr	r0, [pc, #220]	; (8003314 <HAL_UART_Init+0x1b0>)
 8003238:	f7fd fb70 	bl	800091c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d009      	beq.n	8003258 <HAL_UART_Init+0xf4>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324c:	d004      	beq.n	8003258 <HAL_UART_Init+0xf4>
 800324e:	f240 1179 	movw	r1, #377	; 0x179
 8003252:	4830      	ldr	r0, [pc, #192]	; (8003314 <HAL_UART_Init+0x1b0>)
 8003254:	f7fd fb62 	bl	800091c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d009      	beq.n	8003274 <HAL_UART_Init+0x110>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003268:	d004      	beq.n	8003274 <HAL_UART_Init+0x110>
 800326a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800326e:	4829      	ldr	r0, [pc, #164]	; (8003314 <HAL_UART_Init+0x1b0>)
 8003270:	f7fd fb54 	bl	800091c <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7fd fe85 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2224      	movs	r2, #36	; 0x24
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f936 	bl	8003518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40011000 	.word	0x40011000
 8003300:	40004400 	.word	0x40004400
 8003304:	40004800 	.word	0x40004800
 8003308:	40004c00 	.word	0x40004c00
 800330c:	40005000 	.word	0x40005000
 8003310:	40011400 	.word	0x40011400
 8003314:	08006eac 	.word	0x08006eac

08003318 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b20      	cmp	r3, #32
 8003336:	d17c      	bne.n	8003432 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_UART_Transmit+0x2c>
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e075      	b.n	8003434 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_UART_Transmit+0x3e>
 8003352:	2302      	movs	r3, #2
 8003354:	e06e      	b.n	8003434 <HAL_UART_Transmit+0x11c>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2221      	movs	r2, #33	; 0x21
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800336c:	f7fd ff86 	bl	800127c <HAL_GetTick>
 8003370:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	88fa      	ldrh	r2, [r7, #6]
 8003376:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	88fa      	ldrh	r2, [r7, #6]
 800337c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003386:	d108      	bne.n	800339a <HAL_UART_Transmit+0x82>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d104      	bne.n	800339a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	e003      	b.n	80033a2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033aa:	e02a      	b.n	8003402 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2200      	movs	r2, #0
 80033b4:	2180      	movs	r1, #128	; 0x80
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f840 	bl	800343c <UART_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e036      	b.n	8003434 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10b      	bne.n	80033e4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033da:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	3302      	adds	r3, #2
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	e007      	b.n	80033f4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3301      	adds	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1cf      	bne.n	80033ac <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2200      	movs	r2, #0
 8003414:	2140      	movs	r1, #64	; 0x40
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f810 	bl	800343c <UART_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e006      	b.n	8003434 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	e000      	b.n	8003434 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003432:	2302      	movs	r3, #2
  }
}
 8003434:	4618      	mov	r0, r3
 8003436:	3720      	adds	r7, #32
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b090      	sub	sp, #64	; 0x40
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800344c:	e050      	b.n	80034f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d04c      	beq.n	80034f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <UART_WaitOnFlagUntilTimeout+0x30>
 800345c:	f7fd ff0e 	bl	800127c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003468:	429a      	cmp	r2, r3
 800346a:	d241      	bcs.n	80034f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800348c:	637a      	str	r2, [r7, #52]	; 0x34
 800348e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e5      	bne.n	800346c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3314      	adds	r3, #20
 80034a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	613b      	str	r3, [r7, #16]
   return(result);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3314      	adds	r3, #20
 80034be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034c0:	623a      	str	r2, [r7, #32]
 80034c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	69f9      	ldr	r1, [r7, #28]
 80034c6:	6a3a      	ldr	r2, [r7, #32]
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e5      	bne.n	80034a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e00f      	b.n	8003510 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4013      	ands	r3, r2
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	429a      	cmp	r2, r3
 800350c:	d09f      	beq.n	800344e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3740      	adds	r7, #64	; 0x40
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800351c:	b09f      	sub	sp, #124	; 0x7c
 800351e:	af00      	add	r7, sp, #0
 8003520:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	4b9b      	ldr	r3, [pc, #620]	; (8003794 <UART_SetConfig+0x27c>)
 8003528:	429a      	cmp	r2, r3
 800352a:	d904      	bls.n	8003536 <UART_SetConfig+0x1e>
 800352c:	f640 6156 	movw	r1, #3670	; 0xe56
 8003530:	4899      	ldr	r0, [pc, #612]	; (8003798 <UART_SetConfig+0x280>)
 8003532:	f7fd f9f3 	bl	800091c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <UART_SetConfig+0x3a>
 800353e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003546:	d004      	beq.n	8003552 <UART_SetConfig+0x3a>
 8003548:	f640 6157 	movw	r1, #3671	; 0xe57
 800354c:	4892      	ldr	r0, [pc, #584]	; (8003798 <UART_SetConfig+0x280>)
 800354e:	f7fd f9e5 	bl	800091c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00e      	beq.n	8003578 <UART_SetConfig+0x60>
 800355a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003562:	d009      	beq.n	8003578 <UART_SetConfig+0x60>
 8003564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800356c:	d004      	beq.n	8003578 <UART_SetConfig+0x60>
 800356e:	f640 6158 	movw	r1, #3672	; 0xe58
 8003572:	4889      	ldr	r0, [pc, #548]	; (8003798 <UART_SetConfig+0x280>)
 8003574:	f7fd f9d2 	bl	800091c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003580:	4013      	ands	r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <UART_SetConfig+0x76>
 8003586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d104      	bne.n	8003598 <UART_SetConfig+0x80>
 800358e:	f640 6159 	movw	r1, #3673	; 0xe59
 8003592:	4881      	ldr	r0, [pc, #516]	; (8003798 <UART_SetConfig+0x280>)
 8003594:	f7fd f9c2 	bl	800091c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a4:	68d9      	ldr	r1, [r3, #12]
 80035a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	ea40 0301 	orr.w	r3, r0, r1
 80035ae:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	431a      	orrs	r2, r3
 80035c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80035c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035d2:	f021 010c 	bic.w	r1, r1, #12
 80035d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035dc:	430b      	orrs	r3, r1
 80035de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ec:	6999      	ldr	r1, [r3, #24]
 80035ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	ea40 0301 	orr.w	r3, r0, r1
 80035f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4b67      	ldr	r3, [pc, #412]	; (800379c <UART_SetConfig+0x284>)
 80035fe:	429a      	cmp	r2, r3
 8003600:	d004      	beq.n	800360c <UART_SetConfig+0xf4>
 8003602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4b66      	ldr	r3, [pc, #408]	; (80037a0 <UART_SetConfig+0x288>)
 8003608:	429a      	cmp	r2, r3
 800360a:	d103      	bne.n	8003614 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800360c:	f7fe fcb0 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8003610:	6778      	str	r0, [r7, #116]	; 0x74
 8003612:	e002      	b.n	800361a <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003614:	f7fe fc98 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8003618:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800361a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003622:	f040 80c1 	bne.w	80037a8 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003628:	461c      	mov	r4, r3
 800362a:	f04f 0500 	mov.w	r5, #0
 800362e:	4622      	mov	r2, r4
 8003630:	462b      	mov	r3, r5
 8003632:	1891      	adds	r1, r2, r2
 8003634:	6439      	str	r1, [r7, #64]	; 0x40
 8003636:	415b      	adcs	r3, r3
 8003638:	647b      	str	r3, [r7, #68]	; 0x44
 800363a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800363e:	1912      	adds	r2, r2, r4
 8003640:	eb45 0303 	adc.w	r3, r5, r3
 8003644:	f04f 0000 	mov.w	r0, #0
 8003648:	f04f 0100 	mov.w	r1, #0
 800364c:	00d9      	lsls	r1, r3, #3
 800364e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003652:	00d0      	lsls	r0, r2, #3
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	1911      	adds	r1, r2, r4
 800365a:	6639      	str	r1, [r7, #96]	; 0x60
 800365c:	416b      	adcs	r3, r5
 800365e:	667b      	str	r3, [r7, #100]	; 0x64
 8003660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	461a      	mov	r2, r3
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	1891      	adds	r1, r2, r2
 800366c:	63b9      	str	r1, [r7, #56]	; 0x38
 800366e:	415b      	adcs	r3, r3
 8003670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003672:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003676:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800367a:	f7fc fe31 	bl	80002e0 <__aeabi_uldivmod>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4b48      	ldr	r3, [pc, #288]	; (80037a4 <UART_SetConfig+0x28c>)
 8003684:	fba3 2302 	umull	r2, r3, r3, r2
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	011e      	lsls	r6, r3, #4
 800368c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368e:	461c      	mov	r4, r3
 8003690:	f04f 0500 	mov.w	r5, #0
 8003694:	4622      	mov	r2, r4
 8003696:	462b      	mov	r3, r5
 8003698:	1891      	adds	r1, r2, r2
 800369a:	6339      	str	r1, [r7, #48]	; 0x30
 800369c:	415b      	adcs	r3, r3
 800369e:	637b      	str	r3, [r7, #52]	; 0x34
 80036a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036a4:	1912      	adds	r2, r2, r4
 80036a6:	eb45 0303 	adc.w	r3, r5, r3
 80036aa:	f04f 0000 	mov.w	r0, #0
 80036ae:	f04f 0100 	mov.w	r1, #0
 80036b2:	00d9      	lsls	r1, r3, #3
 80036b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036b8:	00d0      	lsls	r0, r2, #3
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	1911      	adds	r1, r2, r4
 80036c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80036c2:	416b      	adcs	r3, r5
 80036c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	1891      	adds	r1, r2, r2
 80036d2:	62b9      	str	r1, [r7, #40]	; 0x28
 80036d4:	415b      	adcs	r3, r3
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036dc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80036e0:	f7fc fdfe 	bl	80002e0 <__aeabi_uldivmod>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4b2e      	ldr	r3, [pc, #184]	; (80037a4 <UART_SetConfig+0x28c>)
 80036ea:	fba3 1302 	umull	r1, r3, r3, r2
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	2164      	movs	r1, #100	; 0x64
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	3332      	adds	r3, #50	; 0x32
 80036fc:	4a29      	ldr	r2, [pc, #164]	; (80037a4 <UART_SetConfig+0x28c>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800370a:	441e      	add	r6, r3
 800370c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800370e:	4618      	mov	r0, r3
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	1894      	adds	r4, r2, r2
 800371a:	623c      	str	r4, [r7, #32]
 800371c:	415b      	adcs	r3, r3
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
 8003720:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003724:	1812      	adds	r2, r2, r0
 8003726:	eb41 0303 	adc.w	r3, r1, r3
 800372a:	f04f 0400 	mov.w	r4, #0
 800372e:	f04f 0500 	mov.w	r5, #0
 8003732:	00dd      	lsls	r5, r3, #3
 8003734:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003738:	00d4      	lsls	r4, r2, #3
 800373a:	4622      	mov	r2, r4
 800373c:	462b      	mov	r3, r5
 800373e:	1814      	adds	r4, r2, r0
 8003740:	653c      	str	r4, [r7, #80]	; 0x50
 8003742:	414b      	adcs	r3, r1
 8003744:	657b      	str	r3, [r7, #84]	; 0x54
 8003746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	461a      	mov	r2, r3
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	1891      	adds	r1, r2, r2
 8003752:	61b9      	str	r1, [r7, #24]
 8003754:	415b      	adcs	r3, r3
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003760:	f7fc fdbe 	bl	80002e0 <__aeabi_uldivmod>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <UART_SetConfig+0x28c>)
 800376a:	fba3 1302 	umull	r1, r3, r3, r2
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2164      	movs	r1, #100	; 0x64
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	3332      	adds	r3, #50	; 0x32
 800377c:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <UART_SetConfig+0x28c>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	f003 0207 	and.w	r2, r3, #7
 8003788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4432      	add	r2, r6
 800378e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003790:	e0c4      	b.n	800391c <UART_SetConfig+0x404>
 8003792:	bf00      	nop
 8003794:	00a037a0 	.word	0x00a037a0
 8003798:	08006eac 	.word	0x08006eac
 800379c:	40011000 	.word	0x40011000
 80037a0:	40011400 	.word	0x40011400
 80037a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037aa:	461c      	mov	r4, r3
 80037ac:	f04f 0500 	mov.w	r5, #0
 80037b0:	4622      	mov	r2, r4
 80037b2:	462b      	mov	r3, r5
 80037b4:	1891      	adds	r1, r2, r2
 80037b6:	6139      	str	r1, [r7, #16]
 80037b8:	415b      	adcs	r3, r3
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037c0:	1912      	adds	r2, r2, r4
 80037c2:	eb45 0303 	adc.w	r3, r5, r3
 80037c6:	f04f 0000 	mov.w	r0, #0
 80037ca:	f04f 0100 	mov.w	r1, #0
 80037ce:	00d9      	lsls	r1, r3, #3
 80037d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037d4:	00d0      	lsls	r0, r2, #3
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	eb12 0804 	adds.w	r8, r2, r4
 80037de:	eb43 0905 	adc.w	r9, r3, r5
 80037e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f04f 0100 	mov.w	r1, #0
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	008b      	lsls	r3, r1, #2
 80037f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037fa:	0082      	lsls	r2, r0, #2
 80037fc:	4640      	mov	r0, r8
 80037fe:	4649      	mov	r1, r9
 8003800:	f7fc fd6e 	bl	80002e0 <__aeabi_uldivmod>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4b47      	ldr	r3, [pc, #284]	; (8003928 <UART_SetConfig+0x410>)
 800380a:	fba3 2302 	umull	r2, r3, r3, r2
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	011e      	lsls	r6, r3, #4
 8003812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003814:	4618      	mov	r0, r3
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	1894      	adds	r4, r2, r2
 8003820:	60bc      	str	r4, [r7, #8]
 8003822:	415b      	adcs	r3, r3
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800382a:	1812      	adds	r2, r2, r0
 800382c:	eb41 0303 	adc.w	r3, r1, r3
 8003830:	f04f 0400 	mov.w	r4, #0
 8003834:	f04f 0500 	mov.w	r5, #0
 8003838:	00dd      	lsls	r5, r3, #3
 800383a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800383e:	00d4      	lsls	r4, r2, #3
 8003840:	4622      	mov	r2, r4
 8003842:	462b      	mov	r3, r5
 8003844:	1814      	adds	r4, r2, r0
 8003846:	64bc      	str	r4, [r7, #72]	; 0x48
 8003848:	414b      	adcs	r3, r1
 800384a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800384c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4618      	mov	r0, r3
 8003852:	f04f 0100 	mov.w	r1, #0
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	008b      	lsls	r3, r1, #2
 8003860:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003864:	0082      	lsls	r2, r0, #2
 8003866:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800386a:	f7fc fd39 	bl	80002e0 <__aeabi_uldivmod>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <UART_SetConfig+0x410>)
 8003874:	fba3 1302 	umull	r1, r3, r3, r2
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	2164      	movs	r1, #100	; 0x64
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	3332      	adds	r3, #50	; 0x32
 8003886:	4a28      	ldr	r2, [pc, #160]	; (8003928 <UART_SetConfig+0x410>)
 8003888:	fba2 2303 	umull	r2, r3, r2, r3
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003892:	441e      	add	r6, r3
 8003894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003896:	4618      	mov	r0, r3
 8003898:	f04f 0100 	mov.w	r1, #0
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	1894      	adds	r4, r2, r2
 80038a2:	603c      	str	r4, [r7, #0]
 80038a4:	415b      	adcs	r3, r3
 80038a6:	607b      	str	r3, [r7, #4]
 80038a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ac:	1812      	adds	r2, r2, r0
 80038ae:	eb41 0303 	adc.w	r3, r1, r3
 80038b2:	f04f 0400 	mov.w	r4, #0
 80038b6:	f04f 0500 	mov.w	r5, #0
 80038ba:	00dd      	lsls	r5, r3, #3
 80038bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038c0:	00d4      	lsls	r4, r2, #3
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	eb12 0a00 	adds.w	sl, r2, r0
 80038ca:	eb43 0b01 	adc.w	fp, r3, r1
 80038ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f04f 0100 	mov.w	r1, #0
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	008b      	lsls	r3, r1, #2
 80038e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038e6:	0082      	lsls	r2, r0, #2
 80038e8:	4650      	mov	r0, sl
 80038ea:	4659      	mov	r1, fp
 80038ec:	f7fc fcf8 	bl	80002e0 <__aeabi_uldivmod>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <UART_SetConfig+0x410>)
 80038f6:	fba3 1302 	umull	r1, r3, r3, r2
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	2164      	movs	r1, #100	; 0x64
 80038fe:	fb01 f303 	mul.w	r3, r1, r3
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	3332      	adds	r3, #50	; 0x32
 8003908:	4a07      	ldr	r2, [pc, #28]	; (8003928 <UART_SetConfig+0x410>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	f003 020f 	and.w	r2, r3, #15
 8003914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4432      	add	r2, r6
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	377c      	adds	r7, #124	; 0x7c
 8003920:	46bd      	mov	sp, r7
 8003922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003926:	bf00      	nop
 8003928:	51eb851f 	.word	0x51eb851f

0800392c <__NVIC_SetPriority>:
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	6039      	str	r1, [r7, #0]
 8003936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393c:	2b00      	cmp	r3, #0
 800393e:	db0a      	blt.n	8003956 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	490c      	ldr	r1, [pc, #48]	; (8003978 <__NVIC_SetPriority+0x4c>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	0112      	lsls	r2, r2, #4
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	440b      	add	r3, r1
 8003950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003954:	e00a      	b.n	800396c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4908      	ldr	r1, [pc, #32]	; (800397c <__NVIC_SetPriority+0x50>)
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	3b04      	subs	r3, #4
 8003964:	0112      	lsls	r2, r2, #4
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	440b      	add	r3, r1
 800396a:	761a      	strb	r2, [r3, #24]
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000e100 	.word	0xe000e100
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <SysTick_Handler+0x1c>)
 8003986:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003988:	f001 fcd6 	bl	8005338 <xTaskGetSchedulerState>
 800398c:	4603      	mov	r3, r0
 800398e:	2b01      	cmp	r3, #1
 8003990:	d001      	beq.n	8003996 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003992:	f002 fa99 	bl	8005ec8 <xPortSysTickHandler>
  }
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	e000e010 	.word	0xe000e010

080039a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80039a4:	2100      	movs	r1, #0
 80039a6:	f06f 0004 	mvn.w	r0, #4
 80039aa:	f7ff ffbf 	bl	800392c <__NVIC_SetPriority>
#endif
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039ba:	f3ef 8305 	mrs	r3, IPSR
 80039be:	603b      	str	r3, [r7, #0]
  return(result);
 80039c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80039c6:	f06f 0305 	mvn.w	r3, #5
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	e00c      	b.n	80039e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80039ce:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <osKernelInitialize+0x44>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d105      	bne.n	80039e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <osKernelInitialize+0x44>)
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039dc:	2300      	movs	r3, #0
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	e002      	b.n	80039e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039e8:	687b      	ldr	r3, [r7, #4]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	200000b8 	.word	0x200000b8

080039fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a02:	f3ef 8305 	mrs	r3, IPSR
 8003a06:	603b      	str	r3, [r7, #0]
  return(result);
 8003a08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a0e:	f06f 0305 	mvn.w	r3, #5
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	e010      	b.n	8003a38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <osKernelStart+0x48>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d109      	bne.n	8003a32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a1e:	f7ff ffbf 	bl	80039a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a22:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <osKernelStart+0x48>)
 8003a24:	2202      	movs	r2, #2
 8003a26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a28:	f000 fffc 	bl	8004a24 <vTaskStartScheduler>
      stat = osOK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	e002      	b.n	8003a38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a32:	f04f 33ff 	mov.w	r3, #4294967295
 8003a36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a38:	687b      	ldr	r3, [r7, #4]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	200000b8 	.word	0x200000b8

08003a48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f103 0208 	add.w	r2, r3, #8
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f103 0208 	add.w	r2, r3, #8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f103 0208 	add.w	r2, r3, #8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aea:	b480      	push	{r7}
 8003aec:	b085      	sub	sp, #20
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d103      	bne.n	8003b0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e00c      	b.n	8003b24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e002      	b.n	8003b18 <vListInsert+0x2e>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d2f6      	bcs.n	8003b12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	601a      	str	r2, [r3, #0]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6852      	ldr	r2, [r2, #4]
 8003b7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d103      	bne.n	8003b90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	1e5a      	subs	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003bda:	f002 f8e3 	bl	8005da4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	68f9      	ldr	r1, [r7, #12]
 8003be8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	441a      	add	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	68f9      	ldr	r1, [r7, #12]
 8003c0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	441a      	add	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	22ff      	movs	r2, #255	; 0xff
 8003c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	22ff      	movs	r2, #255	; 0xff
 8003c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d114      	bne.n	8003c5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01a      	beq.n	8003c6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3310      	adds	r3, #16
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 f9f3 	bl	8005028 <xTaskRemoveFromEventList>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d012      	beq.n	8003c6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <xQueueGenericReset+0xcc>)
 8003c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	e009      	b.n	8003c6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3310      	adds	r3, #16
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fef2 	bl	8003a48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3324      	adds	r3, #36	; 0x24
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff feed 	bl	8003a48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c6e:	f002 f8c9 	bl	8005e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c72:	2301      	movs	r3, #1
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <xQueueGenericCreate+0x2a>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	613b      	str	r3, [r7, #16]
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	3350      	adds	r3, #80	; 0x50
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f002 f995 	bl	8005fe8 <pvPortMalloc>
 8003cbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00d      	beq.n	8003ce2 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	3350      	adds	r3, #80	; 0x50
 8003cce:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003cd0:	79fa      	ldrb	r2, [r7, #7]
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f805 	bl	8003cec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ce2:	69bb      	ldr	r3, [r7, #24]
	}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3720      	adds	r7, #32
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e002      	b.n	8003d0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	69b8      	ldr	r0, [r7, #24]
 8003d1e:	f7ff ff47 	bl	8003bb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08e      	sub	sp, #56	; 0x38
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d42:	2300      	movs	r3, #0
 8003d44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <xQueueGenericSend+0x32>
	__asm volatile
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d62:	bf00      	nop
 8003d64:	e7fe      	b.n	8003d64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d103      	bne.n	8003d74 <xQueueGenericSend+0x40>
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <xQueueGenericSend+0x44>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <xQueueGenericSend+0x46>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <xQueueGenericSend+0x60>
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d90:	bf00      	nop
 8003d92:	e7fe      	b.n	8003d92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d103      	bne.n	8003da2 <xQueueGenericSend+0x6e>
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <xQueueGenericSend+0x72>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <xQueueGenericSend+0x74>
 8003da6:	2300      	movs	r3, #0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	623b      	str	r3, [r7, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dc2:	f001 fab9 	bl	8005338 <xTaskGetSchedulerState>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d102      	bne.n	8003dd2 <xQueueGenericSend+0x9e>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <xQueueGenericSend+0xa2>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <xQueueGenericSend+0xa4>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <xQueueGenericSend+0xbe>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	61fb      	str	r3, [r7, #28]
}
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003df2:	f001 ffd7 	bl	8005da4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d302      	bcc.n	8003e08 <xQueueGenericSend+0xd4>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d129      	bne.n	8003e5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e0e:	f000 fa0b 	bl	8004228 <prvCopyDataToQueue>
 8003e12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d010      	beq.n	8003e3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	3324      	adds	r3, #36	; 0x24
 8003e20:	4618      	mov	r0, r3
 8003e22:	f001 f901 	bl	8005028 <xTaskRemoveFromEventList>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d013      	beq.n	8003e54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e2c:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <xQueueGenericSend+0x1f8>)
 8003e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	e00a      	b.n	8003e54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e44:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <xQueueGenericSend+0x1f8>)
 8003e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e54:	f001 ffd6 	bl	8005e04 <vPortExitCritical>
				return pdPASS;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e063      	b.n	8003f24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d103      	bne.n	8003e6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e62:	f001 ffcf 	bl	8005e04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e05c      	b.n	8003f24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d106      	bne.n	8003e7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e70:	f107 0314 	add.w	r3, r7, #20
 8003e74:	4618      	mov	r0, r3
 8003e76:	f001 f933 	bl	80050e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e7e:	f001 ffc1 	bl	8005e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e82:	f000 fe23 	bl	8004acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e86:	f001 ff8d 	bl	8005da4 <vPortEnterCritical>
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e90:	b25b      	sxtb	r3, r3
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d103      	bne.n	8003ea0 <xQueueGenericSend+0x16c>
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ea6:	b25b      	sxtb	r3, r3
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d103      	bne.n	8003eb6 <xQueueGenericSend+0x182>
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eb6:	f001 ffa5 	bl	8005e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eba:	1d3a      	adds	r2, r7, #4
 8003ebc:	f107 0314 	add.w	r3, r7, #20
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f001 f922 	bl	800510c <xTaskCheckForTimeOut>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d124      	bne.n	8003f18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ed0:	f000 faa2 	bl	8004418 <prvIsQueueFull>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d018      	beq.n	8003f0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	3310      	adds	r3, #16
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f001 f850 	bl	8004f88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eea:	f000 fa2d 	bl	8004348 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003eee:	f000 fdfb 	bl	8004ae8 <xTaskResumeAll>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f47f af7c 	bne.w	8003df2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003efa:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <xQueueGenericSend+0x1f8>)
 8003efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	e772      	b.n	8003df2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f0e:	f000 fa1b 	bl	8004348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f12:	f000 fde9 	bl	8004ae8 <xTaskResumeAll>
 8003f16:	e76c      	b.n	8003df2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f1a:	f000 fa15 	bl	8004348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f1e:	f000 fde3 	bl	8004ae8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3738      	adds	r7, #56	; 0x38
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	e000ed04 	.word	0xe000ed04

08003f30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b090      	sub	sp, #64	; 0x40
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f5a:	bf00      	nop
 8003f5c:	e7fe      	b.n	8003f5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d103      	bne.n	8003f6c <xQueueGenericSendFromISR+0x3c>
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <xQueueGenericSendFromISR+0x40>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <xQueueGenericSendFromISR+0x42>
 8003f70:	2300      	movs	r3, #0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d103      	bne.n	8003f9a <xQueueGenericSendFromISR+0x6a>
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <xQueueGenericSendFromISR+0x6e>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <xQueueGenericSendFromISR+0x70>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	623b      	str	r3, [r7, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fba:	f001 ffd5 	bl	8005f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003fbe:	f3ef 8211 	mrs	r2, BASEPRI
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	61fa      	str	r2, [r7, #28]
 8003fd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <xQueueGenericSendFromISR+0xbc>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d12f      	bne.n	800404c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004002:	f000 f911 	bl	8004228 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004006:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d112      	bne.n	8004036 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	2b00      	cmp	r3, #0
 8004016:	d016      	beq.n	8004046 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401a:	3324      	adds	r3, #36	; 0x24
 800401c:	4618      	mov	r0, r3
 800401e:	f001 f803 	bl	8005028 <xTaskRemoveFromEventList>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00e      	beq.n	8004046 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	e007      	b.n	8004046 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004036:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800403a:	3301      	adds	r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	b25a      	sxtb	r2, r3
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004046:	2301      	movs	r3, #1
 8004048:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800404a:	e001      	b.n	8004050 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800404c:	2300      	movs	r3, #0
 800404e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004052:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800405a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800405e:	4618      	mov	r0, r3
 8004060:	3740      	adds	r7, #64	; 0x40
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08c      	sub	sp, #48	; 0x30
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004074:	2300      	movs	r3, #0
 8004076:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <xQueueReceive+0x30>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	623b      	str	r3, [r7, #32]
}
 8004094:	bf00      	nop
 8004096:	e7fe      	b.n	8004096 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <xQueueReceive+0x3e>
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <xQueueReceive+0x42>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <xQueueReceive+0x44>
 80040aa:	2300      	movs	r3, #0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <xQueueReceive+0x5e>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	61fb      	str	r3, [r7, #28]
}
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040c6:	f001 f937 	bl	8005338 <xTaskGetSchedulerState>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <xQueueReceive+0x6e>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <xQueueReceive+0x72>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <xQueueReceive+0x74>
 80040da:	2300      	movs	r3, #0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10a      	bne.n	80040f6 <xQueueReceive+0x8e>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	61bb      	str	r3, [r7, #24]
}
 80040f2:	bf00      	nop
 80040f4:	e7fe      	b.n	80040f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040f6:	f001 fe55 	bl	8005da4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01f      	beq.n	8004146 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800410a:	f000 f8f7 	bl	80042fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	1e5a      	subs	r2, r3, #1
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00f      	beq.n	800413e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	3310      	adds	r3, #16
 8004122:	4618      	mov	r0, r3
 8004124:	f000 ff80 	bl	8005028 <xTaskRemoveFromEventList>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800412e:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <xQueueReceive+0x1bc>)
 8004130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800413e:	f001 fe61 	bl	8005e04 <vPortExitCritical>
				return pdPASS;
 8004142:	2301      	movs	r3, #1
 8004144:	e069      	b.n	800421a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d103      	bne.n	8004154 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800414c:	f001 fe5a 	bl	8005e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004150:	2300      	movs	r3, #0
 8004152:	e062      	b.n	800421a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800415a:	f107 0310 	add.w	r3, r7, #16
 800415e:	4618      	mov	r0, r3
 8004160:	f000 ffbe 	bl	80050e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004164:	2301      	movs	r3, #1
 8004166:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004168:	f001 fe4c 	bl	8005e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800416c:	f000 fcae 	bl	8004acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004170:	f001 fe18 	bl	8005da4 <vPortEnterCritical>
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800417a:	b25b      	sxtb	r3, r3
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d103      	bne.n	800418a <xQueueReceive+0x122>
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004190:	b25b      	sxtb	r3, r3
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d103      	bne.n	80041a0 <xQueueReceive+0x138>
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041a0:	f001 fe30 	bl	8005e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041a4:	1d3a      	adds	r2, r7, #4
 80041a6:	f107 0310 	add.w	r3, r7, #16
 80041aa:	4611      	mov	r1, r2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 ffad 	bl	800510c <xTaskCheckForTimeOut>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d123      	bne.n	8004200 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ba:	f000 f917 	bl	80043ec <prvIsQueueEmpty>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d017      	beq.n	80041f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	3324      	adds	r3, #36	; 0x24
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4611      	mov	r1, r2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fedb 	bl	8004f88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041d4:	f000 f8b8 	bl	8004348 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041d8:	f000 fc86 	bl	8004ae8 <xTaskResumeAll>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d189      	bne.n	80040f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80041e2:	4b10      	ldr	r3, [pc, #64]	; (8004224 <xQueueReceive+0x1bc>)
 80041e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	e780      	b.n	80040f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80041f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041f6:	f000 f8a7 	bl	8004348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041fa:	f000 fc75 	bl	8004ae8 <xTaskResumeAll>
 80041fe:	e77a      	b.n	80040f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004202:	f000 f8a1 	bl	8004348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004206:	f000 fc6f 	bl	8004ae8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800420a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800420c:	f000 f8ee 	bl	80043ec <prvIsQueueEmpty>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	f43f af6f 	beq.w	80040f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004218:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800421a:	4618      	mov	r0, r3
 800421c:	3730      	adds	r7, #48	; 0x30
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	e000ed04 	.word	0xe000ed04

08004228 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10d      	bne.n	8004262 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d14d      	bne.n	80042ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	4618      	mov	r0, r3
 8004254:	f001 f88e 	bl	8005374 <xTaskPriorityDisinherit>
 8004258:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	e043      	b.n	80042ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d119      	bne.n	800429c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6858      	ldr	r0, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	461a      	mov	r2, r3
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	f002 f8cc 	bl	8006410 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	441a      	add	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	d32b      	bcc.n	80042ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	e026      	b.n	80042ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68d8      	ldr	r0, [r3, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	461a      	mov	r2, r3
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	f002 f8b2 	bl	8006410 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	425b      	negs	r3, r3
 80042b6:	441a      	add	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d207      	bcs.n	80042d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	425b      	negs	r3, r3
 80042d2:	441a      	add	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d105      	bne.n	80042ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80042f2:	697b      	ldr	r3, [r7, #20]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d018      	beq.n	8004340 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	441a      	add	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	429a      	cmp	r2, r3
 8004326:	d303      	bcc.n	8004330 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68d9      	ldr	r1, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	461a      	mov	r2, r3
 800433a:	6838      	ldr	r0, [r7, #0]
 800433c:	f002 f868 	bl	8006410 <memcpy>
	}
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004350:	f001 fd28 	bl	8005da4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800435a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800435c:	e011      	b.n	8004382 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	2b00      	cmp	r3, #0
 8004364:	d012      	beq.n	800438c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3324      	adds	r3, #36	; 0x24
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fe5c 	bl	8005028 <xTaskRemoveFromEventList>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004376:	f000 ff2f 	bl	80051d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	3b01      	subs	r3, #1
 800437e:	b2db      	uxtb	r3, r3
 8004380:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004386:	2b00      	cmp	r3, #0
 8004388:	dce9      	bgt.n	800435e <prvUnlockQueue+0x16>
 800438a:	e000      	b.n	800438e <prvUnlockQueue+0x46>
					break;
 800438c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	22ff      	movs	r2, #255	; 0xff
 8004392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004396:	f001 fd35 	bl	8005e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800439a:	f001 fd03 	bl	8005da4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043a6:	e011      	b.n	80043cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d012      	beq.n	80043d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3310      	adds	r3, #16
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fe37 	bl	8005028 <xTaskRemoveFromEventList>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80043c0:	f000 ff0a 	bl	80051d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80043c4:	7bbb      	ldrb	r3, [r7, #14]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	dce9      	bgt.n	80043a8 <prvUnlockQueue+0x60>
 80043d4:	e000      	b.n	80043d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80043d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	22ff      	movs	r2, #255	; 0xff
 80043dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80043e0:	f001 fd10 	bl	8005e04 <vPortExitCritical>
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043f4:	f001 fcd6 	bl	8005da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004400:	2301      	movs	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	e001      	b.n	800440a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800440a:	f001 fcfb 	bl	8005e04 <vPortExitCritical>

	return xReturn;
 800440e:	68fb      	ldr	r3, [r7, #12]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004420:	f001 fcc0 	bl	8005da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442c:	429a      	cmp	r2, r3
 800442e:	d102      	bne.n	8004436 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004430:	2301      	movs	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	e001      	b.n	800443a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800443a:	f001 fce3 	bl	8005e04 <vPortExitCritical>

	return xReturn;
 800443e:	68fb      	ldr	r3, [r7, #12]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e014      	b.n	8004482 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004458:	4a0f      	ldr	r2, [pc, #60]	; (8004498 <vQueueAddToRegistry+0x50>)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10b      	bne.n	800447c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004464:	490c      	ldr	r1, [pc, #48]	; (8004498 <vQueueAddToRegistry+0x50>)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800446e:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <vQueueAddToRegistry+0x50>)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800447a:	e006      	b.n	800448a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3301      	adds	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b07      	cmp	r3, #7
 8004486:	d9e7      	bls.n	8004458 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	200042e8 	.word	0x200042e8

0800449c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80044ac:	f001 fc7a 	bl	8005da4 <vPortEnterCritical>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044b6:	b25b      	sxtb	r3, r3
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044bc:	d103      	bne.n	80044c6 <vQueueWaitForMessageRestricted+0x2a>
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044cc:	b25b      	sxtb	r3, r3
 80044ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d2:	d103      	bne.n	80044dc <vQueueWaitForMessageRestricted+0x40>
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044dc:	f001 fc92 	bl	8005e04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d106      	bne.n	80044f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	3324      	adds	r3, #36	; 0x24
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	68b9      	ldr	r1, [r7, #8]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fd6d 	bl	8004fd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80044f6:	6978      	ldr	r0, [r7, #20]
 80044f8:	f7ff ff26 	bl	8004348 <prvUnlockQueue>
	}
 80044fc:	bf00      	nop
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004504:	b580      	push	{r7, lr}
 8004506:	b08e      	sub	sp, #56	; 0x38
 8004508:	af06      	add	r7, sp, #24
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	4613      	mov	r3, r2
 8004512:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4618      	mov	r0, r3
 800451a:	f001 fd65 	bl	8005fe8 <pvPortMalloc>
 800451e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00e      	beq.n	8004544 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004526:	2060      	movs	r0, #96	; 0x60
 8004528:	f001 fd5e 	bl	8005fe8 <pvPortMalloc>
 800452c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
 800453a:	e005      	b.n	8004548 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800453c:	6978      	ldr	r0, [r7, #20]
 800453e:	f001 fe1f 	bl	8006180 <vPortFree>
 8004542:	e001      	b.n	8004548 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d015      	beq.n	800457a <xTaskCreate+0x76>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL, NULL );
 800454e:	88fa      	ldrh	r2, [r7, #6]
 8004550:	2300      	movs	r3, #0
 8004552:	9304      	str	r3, [sp, #16]
 8004554:	2300      	movs	r3, #0
 8004556:	9303      	str	r3, [sp, #12]
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	9302      	str	r3, [sp, #8]
 800455c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f851 	bl	8004610 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800456e:	69f8      	ldr	r0, [r7, #28]
 8004570:	f000 f8f0 	bl	8004754 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004574:	2301      	movs	r3, #1
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	e002      	b.n	8004580 <xTaskCreate+0x7c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004580:	69bb      	ldr	r3, [r7, #24]
    }
 8004582:	4618      	mov	r0, r3
 8004584:	3720      	adds	r7, #32
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <xTaskPeriodicCreate>:
                                const configSTACK_DEPTH_TYPE usStackDepth,
                                void * const pvParameters,
                                UBaseType_t uxPriority,
                                TaskHandle_t * const pxCreatedTask,
                                TickType_t xPeriod)
    {
 800458a:	b580      	push	{r7, lr}
 800458c:	b08e      	sub	sp, #56	; 0x38
 800458e:	af06      	add	r7, sp, #24
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	4613      	mov	r3, r2
 8004598:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 fd22 	bl	8005fe8 <pvPortMalloc>
 80045a4:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00e      	beq.n	80045ca <xTaskPeriodicCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045ac:	2060      	movs	r0, #96	; 0x60
 80045ae:	f001 fd1b 	bl	8005fe8 <pvPortMalloc>
 80045b2:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <xTaskPeriodicCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
 80045c0:	e005      	b.n	80045ce <xTaskPeriodicCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80045c2:	6978      	ldr	r0, [r7, #20]
 80045c4:	f001 fddc 	bl	8006180 <vPortFree>
 80045c8:	e001      	b.n	80045ce <xTaskPeriodicCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d015      	beq.n	8004600 <xTaskPeriodicCreate+0x76>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL, xPeriod);
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	9304      	str	r3, [sp, #16]
 80045da:	2300      	movs	r3, #0
 80045dc:	9303      	str	r3, [sp, #12]
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	9302      	str	r3, [sp, #8]
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f80e 	bl	8004610 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80045f4:	69f8      	ldr	r0, [r7, #28]
 80045f6:	f000 f8ad 	bl	8004754 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80045fa:	2301      	movs	r3, #1
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	e002      	b.n	8004606 <xTaskPeriodicCreate+0x7c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004600:	f04f 33ff 	mov.w	r3, #4294967295
 8004604:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004606:	69bb      	ldr	r3, [r7, #24]
    }
 8004608:	4618      	mov	r0, r3
 800460a:	3720      	adds	r7, #32
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <prvInitialiseNewTask>:
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions,
                                  TickType_t xPeriod
                                  )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	461a      	mov	r2, r3
 8004628:	21a5      	movs	r1, #165	; 0xa5
 800462a:	f001 feff 	bl	800642c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004638:	3b01      	subs	r3, #1
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	f023 0307 	bic.w	r3, r3, #7
 8004646:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	613b      	str	r3, [r7, #16]
}
 8004664:	bf00      	nop
 8004666:	e7fe      	b.n	8004666 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01f      	beq.n	80046ae <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	e012      	b.n	800469a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	7819      	ldrb	r1, [r3, #0]
 800467c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	3334      	adds	r3, #52	; 0x34
 8004684:	460a      	mov	r2, r1
 8004686:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	4413      	add	r3, r2
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d006      	beq.n	80046a2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	3301      	adds	r3, #1
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	2b0f      	cmp	r3, #15
 800469e:	d9e9      	bls.n	8004674 <prvInitialiseNewTask+0x64>
 80046a0:	e000      	b.n	80046a4 <prvInitialiseNewTask+0x94>
            {
                break;
 80046a2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046ac:	e003      	b.n	80046b6 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	2b37      	cmp	r3, #55	; 0x37
 80046ba:	d901      	bls.n	80046c0 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046bc:	2337      	movs	r3, #55	; 0x37
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046c4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ca:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	2200      	movs	r2, #0
 80046d0:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	3304      	adds	r3, #4
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff f9d6 	bl	8003a88 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	3318      	adds	r3, #24
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff f9d1 	bl	8003a88 <vListInitialiseItem>

    /* Set the StateListItem value to be the period of the task + the current tick count
     * to calculate the absolute deadline of the task
     */
    #if ( configUSE_EDF_SCHEDULER  == 1)
        TickType_t xCurrentTick = xTaskGetTickCount();
 80046e6:	f000 fa95 	bl	8004c14 <xTaskGetTickCount>
 80046ea:	6178      	str	r0, [r7, #20]
        pxNewTCB->xTaskPeriod = xPeriod;
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046f0:	65da      	str	r2, [r3, #92]	; 0x5c
        listSET_LIST_ITEM_VALUE(&( ( pxNewTCB )->xStateListItem), ( pxNewTCB )->xTaskPeriod+xCurrentTick);
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	441a      	add	r2, r3
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	605a      	str	r2, [r3, #4]
    #endif
    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004702:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004712:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	3354      	adds	r3, #84	; 0x54
 8004718:	2204      	movs	r2, #4
 800471a:	2100      	movs	r1, #0
 800471c:	4618      	mov	r0, r3
 800471e:	f001 fe85 	bl	800642c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	3358      	adds	r3, #88	; 0x58
 8004726:	2201      	movs	r2, #1
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f001 fe7e 	bl	800642c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	69b8      	ldr	r0, [r7, #24]
 8004736:	f001 fa05 	bl	8005b44 <pxPortInitialiseStack>
 800473a:	4602      	mov	r2, r0
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <prvInitialiseNewTask+0x13c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800474a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800474c:	bf00      	nop
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800475c:	f001 fb22 	bl	8005da4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004760:	4b29      	ldr	r3, [pc, #164]	; (8004808 <prvAddNewTaskToReadyList+0xb4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	4a28      	ldr	r2, [pc, #160]	; (8004808 <prvAddNewTaskToReadyList+0xb4>)
 8004768:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800476a:	4b28      	ldr	r3, [pc, #160]	; (800480c <prvAddNewTaskToReadyList+0xb8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d109      	bne.n	8004786 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004772:	4a26      	ldr	r2, [pc, #152]	; (800480c <prvAddNewTaskToReadyList+0xb8>)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004778:	4b23      	ldr	r3, [pc, #140]	; (8004808 <prvAddNewTaskToReadyList+0xb4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d110      	bne.n	80047a2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004780:	f000 fd4e 	bl	8005220 <prvInitialiseTaskLists>
 8004784:	e00d      	b.n	80047a2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004786:	4b22      	ldr	r3, [pc, #136]	; (8004810 <prvAddNewTaskToReadyList+0xbc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800478e:	4b1f      	ldr	r3, [pc, #124]	; (800480c <prvAddNewTaskToReadyList+0xb8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	429a      	cmp	r2, r3
 800479a:	d802      	bhi.n	80047a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800479c:	4a1b      	ldr	r2, [pc, #108]	; (800480c <prvAddNewTaskToReadyList+0xb8>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80047a2:	4b1c      	ldr	r3, [pc, #112]	; (8004814 <prvAddNewTaskToReadyList+0xc0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3301      	adds	r3, #1
 80047a8:	4a1a      	ldr	r2, [pc, #104]	; (8004814 <prvAddNewTaskToReadyList+0xc0>)
 80047aa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80047ac:	4b19      	ldr	r3, [pc, #100]	; (8004814 <prvAddNewTaskToReadyList+0xc0>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b8:	4b17      	ldr	r3, [pc, #92]	; (8004818 <prvAddNewTaskToReadyList+0xc4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d903      	bls.n	80047c8 <prvAddNewTaskToReadyList+0x74>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	4a14      	ldr	r2, [pc, #80]	; (8004818 <prvAddNewTaskToReadyList+0xc4>)
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4619      	mov	r1, r3
 80047ce:	4813      	ldr	r0, [pc, #76]	; (800481c <prvAddNewTaskToReadyList+0xc8>)
 80047d0:	f7ff f98b 	bl	8003aea <vListInsert>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80047d4:	f001 fb16 	bl	8005e04 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80047d8:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <prvAddNewTaskToReadyList+0xbc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00e      	beq.n	80047fe <prvAddNewTaskToReadyList+0xaa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047e0:	4b0a      	ldr	r3, [pc, #40]	; (800480c <prvAddNewTaskToReadyList+0xb8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d207      	bcs.n	80047fe <prvAddNewTaskToReadyList+0xaa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80047ee:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <prvAddNewTaskToReadyList+0xcc>)
 80047f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	200005b8 	.word	0x200005b8
 800480c:	200000bc 	.word	0x200000bc
 8004810:	200005c4 	.word	0x200005c4
 8004814:	200005d4 	.word	0x200005d4
 8004818:	200005c0 	.word	0x200005c0
 800481c:	200000c0 	.word	0x200000c0
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <vTaskDelayUntil>:

#if ( INCLUDE_vTaskDelayUntil == 1 )

    void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                          const TickType_t xTimeIncrement )
    {
 8004824:	b580      	push	{r7, lr}
 8004826:	b08a      	sub	sp, #40	; 0x28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800482e:	2300      	movs	r3, #0
 8004830:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <vTaskDelayUntil+0x2a>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	617b      	str	r3, [r7, #20]
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <vTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <vTaskDelayUntil+0x46>
	__asm volatile
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	613b      	str	r3, [r7, #16]
}
 8004866:	bf00      	nop
 8004868:	e7fe      	b.n	8004868 <vTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800486a:	4b2a      	ldr	r3, [pc, #168]	; (8004914 <vTaskDelayUntil+0xf0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <vTaskDelayUntil+0x64>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	60fb      	str	r3, [r7, #12]
}
 8004884:	bf00      	nop
 8004886:	e7fe      	b.n	8004886 <vTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8004888:	f000 f920 	bl	8004acc <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800488c:	4b22      	ldr	r3, [pc, #136]	; (8004918 <vTaskDelayUntil+0xf4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	4413      	add	r3, r2
 800489a:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6a3a      	ldr	r2, [r7, #32]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d20b      	bcs.n	80048be <vTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d211      	bcs.n	80048d4 <vTaskDelayUntil+0xb0>
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d90d      	bls.n	80048d4 <vTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80048b8:	2301      	movs	r3, #1
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
 80048bc:	e00a      	b.n	80048d4 <vTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d303      	bcc.n	80048d0 <vTaskDelayUntil+0xac>
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d901      	bls.n	80048d4 <vTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d006      	beq.n	80048ee <vTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fda9 	bl	8005440 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80048ee:	f000 f8fb 	bl	8004ae8 <xTaskResumeAll>
 80048f2:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d107      	bne.n	800490a <vTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 80048fa:	4b08      	ldr	r3, [pc, #32]	; (800491c <vTaskDelayUntil+0xf8>)
 80048fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800490a:	bf00      	nop
 800490c:	3728      	adds	r7, #40	; 0x28
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	200005e0 	.word	0x200005e0
 8004918:	200005bc 	.word	0x200005bc
 800491c:	e000ed04 	.word	0xe000ed04

08004920 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8004928:	f001 fa3c 	bl	8005da4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d102      	bne.n	8004938 <vTaskSuspend+0x18>
 8004932:	4b36      	ldr	r3, [pc, #216]	; (8004a0c <vTaskSuspend+0xec>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	e000      	b.n	800493a <vTaskSuspend+0x1a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	3304      	adds	r3, #4
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff f90b 	bl	8003b5c <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	2b00      	cmp	r3, #0
 800494c:	d004      	beq.n	8004958 <vTaskSuspend+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	3318      	adds	r3, #24
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff f902 	bl	8003b5c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	3304      	adds	r3, #4
 800495c:	4619      	mov	r1, r3
 800495e:	482c      	ldr	r0, [pc, #176]	; (8004a10 <vTaskSuspend+0xf0>)
 8004960:	f7ff f89f 	bl	8003aa2 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	e010      	b.n	800498c <vTaskSuspend+0x6c>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	4413      	add	r3, r2
 8004970:	3358      	adds	r3, #88	; 0x58
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	d105      	bne.n	8004986 <vTaskSuspend+0x66>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	4413      	add	r3, r2
 8004980:	3358      	adds	r3, #88	; 0x58
 8004982:	2200      	movs	r2, #0
 8004984:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	3301      	adds	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b00      	cmp	r3, #0
 8004990:	ddeb      	ble.n	800496a <vTaskSuspend+0x4a>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8004992:	f001 fa37 	bl	8005e04 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8004996:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <vTaskSuspend+0xf4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <vTaskSuspend+0x8a>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 800499e:	f001 fa01 	bl	8005da4 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 80049a2:	f000 fcad 	bl	8005300 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 80049a6:	f001 fa2d 	bl	8005e04 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 80049aa:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <vTaskSuspend+0xec>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d127      	bne.n	8004a04 <vTaskSuspend+0xe4>
        {
            if( xSchedulerRunning != pdFALSE )
 80049b4:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <vTaskSuspend+0xf4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d017      	beq.n	80049ec <vTaskSuspend+0xcc>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 80049bc:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <vTaskSuspend+0xf8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <vTaskSuspend+0xba>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	60fb      	str	r3, [r7, #12]
}
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <vTaskSuspend+0xb8>
                portYIELD_WITHIN_API();
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <vTaskSuspend+0xfc>)
 80049dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80049ea:	e00b      	b.n	8004a04 <vTaskSuspend+0xe4>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80049ec:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <vTaskSuspend+0xf0>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <vTaskSuspend+0x100>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d103      	bne.n	8004a00 <vTaskSuspend+0xe0>
                    pxCurrentTCB = NULL;
 80049f8:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <vTaskSuspend+0xec>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
    }
 80049fe:	e001      	b.n	8004a04 <vTaskSuspend+0xe4>
                    vTaskSwitchContext();
 8004a00:	f000 faa2 	bl	8004f48 <vTaskSwitchContext>
    }
 8004a04:	bf00      	nop
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	200000bc 	.word	0x200000bc
 8004a10:	200005a4 	.word	0x200005a4
 8004a14:	200005c4 	.word	0x200005c4
 8004a18:	200005e0 	.word	0x200005e0
 8004a1c:	e000ed04 	.word	0xe000ed04
 8004a20:	200005b8 	.word	0x200005b8

08004a24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af04      	add	r7, sp, #16
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            #if (configUSE_EDF_SCHEDULER == 1)
            {
                TickType_t xInitIdlePeriod = pdMS_TO_TICKS(100000);
 8004a2a:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <vTaskStartScheduler+0x8c>)
 8004a2c:	60bb      	str	r3, [r7, #8]
                xReturn = xTaskPeriodicCreate( prvIdleTask,
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	9302      	str	r3, [sp, #8]
 8004a32:	4b20      	ldr	r3, [pc, #128]	; (8004ab4 <vTaskStartScheduler+0x90>)
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	2300      	movs	r3, #0
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2280      	movs	r2, #128	; 0x80
 8004a3e:	491e      	ldr	r1, [pc, #120]	; (8004ab8 <vTaskStartScheduler+0x94>)
 8004a40:	481e      	ldr	r0, [pc, #120]	; (8004abc <vTaskStartScheduler+0x98>)
 8004a42:	f7ff fda2 	bl	800458a <xTaskPeriodicCreate>
 8004a46:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d102      	bne.n	8004a54 <vTaskStartScheduler+0x30>
            {
                xReturn = xTimerCreateTimerTask();
 8004a4e:	f000 fd4b 	bl	80054e8 <xTimerCreateTimerTask>
 8004a52:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d116      	bne.n	8004a88 <vTaskStartScheduler+0x64>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	607b      	str	r3, [r7, #4]
}
 8004a6c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004a6e:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <vTaskStartScheduler+0x9c>)
 8004a70:	f04f 32ff 	mov.w	r2, #4294967295
 8004a74:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004a76:	4b13      	ldr	r3, [pc, #76]	; (8004ac4 <vTaskStartScheduler+0xa0>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a7c:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <vTaskStartScheduler+0xa4>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004a82:	f001 f8ed 	bl	8005c60 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 8004a86:	e00e      	b.n	8004aa6 <vTaskStartScheduler+0x82>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8e:	d10a      	bne.n	8004aa6 <vTaskStartScheduler+0x82>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	603b      	str	r3, [r7, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <vTaskStartScheduler+0x80>
}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	000186a0 	.word	0x000186a0
 8004ab4:	200005dc 	.word	0x200005dc
 8004ab8:	08006ee8 	.word	0x08006ee8
 8004abc:	080051f1 	.word	0x080051f1
 8004ac0:	200005d8 	.word	0x200005d8
 8004ac4:	200005c4 	.word	0x200005c4
 8004ac8:	200005bc 	.word	0x200005bc

08004acc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004ad0:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <vTaskSuspendAll+0x18>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	4a03      	ldr	r2, [pc, #12]	; (8004ae4 <vTaskSuspendAll+0x18>)
 8004ad8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004ada:	bf00      	nop
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	200005e0 	.word	0x200005e0

08004ae8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004af6:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <xTaskResumeAll+0x108>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10a      	bne.n	8004b14 <xTaskResumeAll+0x2c>
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	603b      	str	r3, [r7, #0]
}
 8004b10:	bf00      	nop
 8004b12:	e7fe      	b.n	8004b12 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004b14:	f001 f946 	bl	8005da4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004b18:	4b35      	ldr	r3, [pc, #212]	; (8004bf0 <xTaskResumeAll+0x108>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	4a34      	ldr	r2, [pc, #208]	; (8004bf0 <xTaskResumeAll+0x108>)
 8004b20:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b22:	4b33      	ldr	r3, [pc, #204]	; (8004bf0 <xTaskResumeAll+0x108>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d15a      	bne.n	8004be0 <xTaskResumeAll+0xf8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b2a:	4b32      	ldr	r3, [pc, #200]	; (8004bf4 <xTaskResumeAll+0x10c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d056      	beq.n	8004be0 <xTaskResumeAll+0xf8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b32:	e027      	b.n	8004b84 <xTaskResumeAll+0x9c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b34:	4b30      	ldr	r3, [pc, #192]	; (8004bf8 <xTaskResumeAll+0x110>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3318      	adds	r3, #24
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff f80b 	bl	8003b5c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff f806 	bl	8003b5c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b54:	4b29      	ldr	r3, [pc, #164]	; (8004bfc <xTaskResumeAll+0x114>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d903      	bls.n	8004b64 <xTaskResumeAll+0x7c>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	4a26      	ldr	r2, [pc, #152]	; (8004bfc <xTaskResumeAll+0x114>)
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4825      	ldr	r0, [pc, #148]	; (8004c00 <xTaskResumeAll+0x118>)
 8004b6c:	f7fe ffbd 	bl	8003aea <vListInsert>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b74:	4b23      	ldr	r3, [pc, #140]	; (8004c04 <xTaskResumeAll+0x11c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <xTaskResumeAll+0x9c>
                    {
                        xYieldPending = pdTRUE;
 8004b7e:	4b22      	ldr	r3, [pc, #136]	; (8004c08 <xTaskResumeAll+0x120>)
 8004b80:	2201      	movs	r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b84:	4b1c      	ldr	r3, [pc, #112]	; (8004bf8 <xTaskResumeAll+0x110>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1d3      	bne.n	8004b34 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <xTaskResumeAll+0xae>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004b92:	f000 fbb5 	bl	8005300 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b96:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <xTaskResumeAll+0x124>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d010      	beq.n	8004bc4 <xTaskResumeAll+0xdc>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004ba2:	f000 f91b 	bl	8004ddc <xTaskIncrementTick>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <xTaskResumeAll+0xca>
                            {
                                xYieldPending = pdTRUE;
 8004bac:	4b16      	ldr	r3, [pc, #88]	; (8004c08 <xTaskResumeAll+0x120>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f1      	bne.n	8004ba2 <xTaskResumeAll+0xba>

                        xPendedTicks = 0;
 8004bbe:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <xTaskResumeAll+0x124>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004bc4:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <xTaskResumeAll+0x120>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <xTaskResumeAll+0xf8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004bd0:	4b0f      	ldr	r3, [pc, #60]	; (8004c10 <xTaskResumeAll+0x128>)
 8004bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004be0:	f001 f910 	bl	8005e04 <vPortExitCritical>

    return xAlreadyYielded;
 8004be4:	68bb      	ldr	r3, [r7, #8]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	200005e0 	.word	0x200005e0
 8004bf4:	200005b8 	.word	0x200005b8
 8004bf8:	20000578 	.word	0x20000578
 8004bfc:	200005c0 	.word	0x200005c0
 8004c00:	200000c0 	.word	0x200000c0
 8004c04:	200000bc 	.word	0x200000bc
 8004c08:	200005cc 	.word	0x200005cc
 8004c0c:	200005c8 	.word	0x200005c8
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <xTaskGetTickCount+0x1c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004c20:	687b      	ldr	r3, [r7, #4]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	200005bc 	.word	0x200005bc

08004c34 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8004c34:	b480      	push	{r7}
 8004c36:	b08b      	sub	sp, #44	; 0x2c
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d05b      	beq.n	8004d02 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	605a      	str	r2, [r3, #4]
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d104      	bne.n	8004c6e <prvSearchForNameWithinSingleList+0x3a>
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	605a      	str	r2, [r3, #4]
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	605a      	str	r2, [r3, #4]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d104      	bne.n	8004c9a <prvSearchForNameWithinSingleList+0x66>
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	623b      	str	r3, [r7, #32]
 8004caa:	e01c      	b.n	8004ce6 <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3334      	adds	r3, #52	; 0x34
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	7afa      	ldrb	r2, [r7, #11]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d002      	beq.n	8004ccc <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	e006      	b.n	8004cda <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8004ccc:	7afb      	ldrb	r3, [r7, #11]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d103      	bne.n	8004cda <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d106      	bne.n	8004cee <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	623b      	str	r3, [r7, #32]
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	2b0f      	cmp	r3, #15
 8004cea:	d9df      	bls.n	8004cac <prvSearchForNameWithinSingleList+0x78>
 8004cec:	e000      	b.n	8004cf0 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8004cee:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d104      	bne.n	8004d00 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d1bb      	bne.n	8004c76 <prvSearchForNameWithinSingleList+0x42>
 8004cfe:	e000      	b.n	8004d02 <prvSearchForNameWithinSingleList+0xce>
                    break;
 8004d00:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004d04:	4618      	mov	r0, r3
 8004d06:	372c      	adds	r7, #44	; 0x2c
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8004d18:	2338      	movs	r3, #56	; 0x38
 8004d1a:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7fb fa81 	bl	8000224 <strlen>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b0f      	cmp	r3, #15
 8004d26:	d90a      	bls.n	8004d3e <xTaskGetHandle+0x2e>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	60fb      	str	r3, [r7, #12]
}
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 8004d3e:	f7ff fec5 	bl	8004acc <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4a1d      	ldr	r2, [pc, #116]	; (8004dc8 <xTaskGetHandle+0xb8>)
 8004d54:	4413      	add	r3, r2
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff ff6b 	bl	8004c34 <prvSearchForNameWithinSingleList>
 8004d5e:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1ea      	bne.n	8004d42 <xTaskGetHandle+0x32>
 8004d6c:	e000      	b.n	8004d70 <xTaskGetHandle+0x60>
                    break;
 8004d6e:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8004d76:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <xTaskGetHandle+0xbc>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff ff59 	bl	8004c34 <prvSearchForNameWithinSingleList>
 8004d82:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8004d8a:	4b11      	ldr	r3, [pc, #68]	; (8004dd0 <xTaskGetHandle+0xc0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff ff4f 	bl	8004c34 <prvSearchForNameWithinSingleList>
 8004d96:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d104      	bne.n	8004da8 <xTaskGetHandle+0x98>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	480c      	ldr	r0, [pc, #48]	; (8004dd4 <xTaskGetHandle+0xc4>)
 8004da2:	f7ff ff47 	bl	8004c34 <prvSearchForNameWithinSingleList>
 8004da6:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d104      	bne.n	8004db8 <xTaskGetHandle+0xa8>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	4809      	ldr	r0, [pc, #36]	; (8004dd8 <xTaskGetHandle+0xc8>)
 8004db2:	f7ff ff3f 	bl	8004c34 <prvSearchForNameWithinSingleList>
 8004db6:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 8004db8:	f7ff fe96 	bl	8004ae8 <xTaskResumeAll>

        return pxTCB;
 8004dbc:	693b      	ldr	r3, [r7, #16]
    }
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	200000d4 	.word	0x200000d4
 8004dcc:	20000570 	.word	0x20000570
 8004dd0:	20000574 	.word	0x20000574
 8004dd4:	200005a4 	.word	0x200005a4
 8004dd8:	2000058c 	.word	0x2000058c

08004ddc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ddc:	b590      	push	{r4, r7, lr}
 8004dde:	b089      	sub	sp, #36	; 0x24
 8004de0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	61fb      	str	r3, [r7, #28]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 8004de6:	4b4d      	ldr	r3, [pc, #308]	; (8004f1c <xTaskIncrementTick+0x140>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3334      	adds	r3, #52	; 0x34
 8004dec:	61bb      	str	r3, [r7, #24]
 8004dee:	4b4c      	ldr	r3, [pc, #304]	; (8004f20 <xTaskIncrementTick+0x144>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4619      	mov	r1, r3
 8004df4:	69b8      	ldr	r0, [r7, #24]
 8004df6:	f7fc f841 	bl	8000e7c <update_task_tick_counts>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dfa:	4b4a      	ldr	r3, [pc, #296]	; (8004f24 <xTaskIncrementTick+0x148>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f040 8081 	bne.w	8004f06 <xTaskIncrementTick+0x12a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e04:	4b46      	ldr	r3, [pc, #280]	; (8004f20 <xTaskIncrementTick+0x144>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	617b      	str	r3, [r7, #20]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004e0c:	4a44      	ldr	r2, [pc, #272]	; (8004f20 <xTaskIncrementTick+0x144>)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d120      	bne.n	8004e5a <xTaskIncrementTick+0x7e>
        {
            taskSWITCH_DELAYED_LISTS();
 8004e18:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <xTaskIncrementTick+0x14c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <xTaskIncrementTick+0x5c>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	607b      	str	r3, [r7, #4]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <xTaskIncrementTick+0x5a>
 8004e38:	4b3b      	ldr	r3, [pc, #236]	; (8004f28 <xTaskIncrementTick+0x14c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	4b3b      	ldr	r3, [pc, #236]	; (8004f2c <xTaskIncrementTick+0x150>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a39      	ldr	r2, [pc, #228]	; (8004f28 <xTaskIncrementTick+0x14c>)
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	4a39      	ldr	r2, [pc, #228]	; (8004f2c <xTaskIncrementTick+0x150>)
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	4b38      	ldr	r3, [pc, #224]	; (8004f30 <xTaskIncrementTick+0x154>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3301      	adds	r3, #1
 8004e52:	4a37      	ldr	r2, [pc, #220]	; (8004f30 <xTaskIncrementTick+0x154>)
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	f000 fa53 	bl	8005300 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004e5a:	4b36      	ldr	r3, [pc, #216]	; (8004f34 <xTaskIncrementTick+0x158>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d349      	bcc.n	8004ef8 <xTaskIncrementTick+0x11c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e64:	4b30      	ldr	r3, [pc, #192]	; (8004f28 <xTaskIncrementTick+0x14c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d104      	bne.n	8004e78 <xTaskIncrementTick+0x9c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <xTaskIncrementTick+0x158>)
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	601a      	str	r2, [r3, #0]
                    break;
 8004e76:	e03f      	b.n	8004ef8 <xTaskIncrementTick+0x11c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e78:	4b2b      	ldr	r3, [pc, #172]	; (8004f28 <xTaskIncrementTick+0x14c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	60fb      	str	r3, [r7, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	60bb      	str	r3, [r7, #8]

                    if( xConstTickCount < xItemValue )
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d203      	bcs.n	8004e98 <xTaskIncrementTick+0xbc>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004e90:	4a28      	ldr	r2, [pc, #160]	; (8004f34 <xTaskIncrementTick+0x158>)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e96:	e02f      	b.n	8004ef8 <xTaskIncrementTick+0x11c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe fe5d 	bl	8003b5c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d004      	beq.n	8004eb4 <xTaskIncrementTick+0xd8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3318      	adds	r3, #24
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe fe54 	bl	8003b5c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Set the new absolute deadline of the task if EDF is being used. */
                    #if ( configUSE_EDF_SCHEDULER == 1 )
                        listSET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ), ( pxTCB->xTaskPeriod + xTaskGetTickCount() ) );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8004eb8:	f7ff feac 	bl	8004c14 <xTaskGetTickCount>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	18e2      	adds	r2, r4, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	605a      	str	r2, [r3, #4]
                    #endif

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec8:	4b1b      	ldr	r3, [pc, #108]	; (8004f38 <xTaskIncrementTick+0x15c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d903      	bls.n	8004ed8 <xTaskIncrementTick+0xfc>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	4a18      	ldr	r2, [pc, #96]	; (8004f38 <xTaskIncrementTick+0x15c>)
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4817      	ldr	r0, [pc, #92]	; (8004f3c <xTaskIncrementTick+0x160>)
 8004ee0:	f7fe fe03 	bl	8003aea <vListInsert>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <xTaskIncrementTick+0x140>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d3b8      	bcc.n	8004e64 <xTaskIncrementTick+0x88>
                            {
                                xSwitchRequired = pdTRUE;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef6:	e7b5      	b.n	8004e64 <xTaskIncrementTick+0x88>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004ef8:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <xTaskIncrementTick+0x164>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <xTaskIncrementTick+0x134>
                {
                    xSwitchRequired = pdTRUE;
 8004f00:	2301      	movs	r3, #1
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	e004      	b.n	8004f10 <xTaskIncrementTick+0x134>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004f06:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <xTaskIncrementTick+0x168>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	4a0d      	ldr	r2, [pc, #52]	; (8004f44 <xTaskIncrementTick+0x168>)
 8004f0e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004f10:	69fb      	ldr	r3, [r7, #28]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3724      	adds	r7, #36	; 0x24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd90      	pop	{r4, r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	200000bc 	.word	0x200000bc
 8004f20:	200005bc 	.word	0x200005bc
 8004f24:	200005e0 	.word	0x200005e0
 8004f28:	20000570 	.word	0x20000570
 8004f2c:	20000574 	.word	0x20000574
 8004f30:	200005d0 	.word	0x200005d0
 8004f34:	200005d8 	.word	0x200005d8
 8004f38:	200005c0 	.word	0x200005c0
 8004f3c:	200000c0 	.word	0x200000c0
 8004f40:	200005cc 	.word	0x200005cc
 8004f44:	200005c8 	.word	0x200005c8

08004f48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <vTaskSwitchContext+0x30>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <vTaskSwitchContext+0x14>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004f54:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <vTaskSwitchContext+0x34>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004f5a:	e007      	b.n	8004f6c <vTaskSwitchContext+0x24>
        xYieldPending = pdFALSE;
 8004f5c:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <vTaskSwitchContext+0x34>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
                pxCurrentTCB = listGET_OWNER_OF_HEAD_ENTRY( & ( pxReadyTasksListsEDF ));
 8004f62:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <vTaskSwitchContext+0x38>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4a06      	ldr	r2, [pc, #24]	; (8004f84 <vTaskSwitchContext+0x3c>)
 8004f6a:	6013      	str	r3, [r2, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	200005e0 	.word	0x200005e0
 8004f7c:	200005cc 	.word	0x200005cc
 8004f80:	200000c0 	.word	0x200000c0
 8004f84:	200000bc 	.word	0x200000bc

08004f88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	60fb      	str	r3, [r7, #12]
}
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fae:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <vTaskPlaceOnEventList+0x44>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3318      	adds	r3, #24
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fe fd97 	bl	8003aea <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	6838      	ldr	r0, [r7, #0]
 8004fc0:	f000 fa3e 	bl	8005440 <prvAddCurrentTaskToDelayedList>
}
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	200000bc 	.word	0x200000bc

08004fd0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	617b      	str	r3, [r7, #20]
}
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ff8:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <vTaskPlaceOnEventListRestricted+0x54>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3318      	adds	r3, #24
 8004ffe:	4619      	mov	r1, r3
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7fe fd4e 	bl	8003aa2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800500c:	f04f 33ff 	mov.w	r3, #4294967295
 8005010:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	68b8      	ldr	r0, [r7, #8]
 8005016:	f000 fa13 	bl	8005440 <prvAddCurrentTaskToDelayedList>
    }
 800501a:	bf00      	nop
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	200000bc 	.word	0x200000bc

08005028 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	60fb      	str	r3, [r7, #12]
}
 8005050:	bf00      	nop
 8005052:	e7fe      	b.n	8005052 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	3318      	adds	r3, #24
 8005058:	4618      	mov	r0, r3
 800505a:	f7fe fd7f 	bl	8003b5c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800505e:	4b1a      	ldr	r3, [pc, #104]	; (80050c8 <xTaskRemoveFromEventList+0xa0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d115      	bne.n	8005092 <xTaskRemoveFromEventList+0x6a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	3304      	adds	r3, #4
 800506a:	4618      	mov	r0, r3
 800506c:	f7fe fd76 	bl	8003b5c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005074:	4b15      	ldr	r3, [pc, #84]	; (80050cc <xTaskRemoveFromEventList+0xa4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d903      	bls.n	8005084 <xTaskRemoveFromEventList+0x5c>
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	4a12      	ldr	r2, [pc, #72]	; (80050cc <xTaskRemoveFromEventList+0xa4>)
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4811      	ldr	r0, [pc, #68]	; (80050d0 <xTaskRemoveFromEventList+0xa8>)
 800508c:	f7fe fd2d 	bl	8003aea <vListInsert>
 8005090:	e005      	b.n	800509e <xTaskRemoveFromEventList+0x76>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3318      	adds	r3, #24
 8005096:	4619      	mov	r1, r3
 8005098:	480e      	ldr	r0, [pc, #56]	; (80050d4 <xTaskRemoveFromEventList+0xac>)
 800509a:	f7fe fd02 	bl	8003aa2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a2:	4b0d      	ldr	r3, [pc, #52]	; (80050d8 <xTaskRemoveFromEventList+0xb0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d905      	bls.n	80050b8 <xTaskRemoveFromEventList+0x90>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80050ac:	2301      	movs	r3, #1
 80050ae:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80050b0:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <xTaskRemoveFromEventList+0xb4>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e001      	b.n	80050bc <xTaskRemoveFromEventList+0x94>
    }
    else
    {
        xReturn = pdFALSE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80050bc:	697b      	ldr	r3, [r7, #20]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200005e0 	.word	0x200005e0
 80050cc:	200005c0 	.word	0x200005c0
 80050d0:	200000c0 	.word	0x200000c0
 80050d4:	20000578 	.word	0x20000578
 80050d8:	200000bc 	.word	0x200000bc
 80050dc:	200005cc 	.word	0x200005cc

080050e0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050e8:	4b06      	ldr	r3, [pc, #24]	; (8005104 <vTaskInternalSetTimeOutState+0x24>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80050f0:	4b05      	ldr	r3, [pc, #20]	; (8005108 <vTaskInternalSetTimeOutState+0x28>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	605a      	str	r2, [r3, #4]
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	200005d0 	.word	0x200005d0
 8005108:	200005bc 	.word	0x200005bc

0800510c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	613b      	str	r3, [r7, #16]
}
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	60fb      	str	r3, [r7, #12]
}
 800514a:	bf00      	nop
 800514c:	e7fe      	b.n	800514c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800514e:	f000 fe29 	bl	8005da4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005152:	4b1f      	ldr	r3, [pc, #124]	; (80051d0 <xTaskCheckForTimeOut+0xc4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	d102      	bne.n	8005172 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800516c:	2300      	movs	r3, #0
 800516e:	61fb      	str	r3, [r7, #28]
 8005170:	e026      	b.n	80051c0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <xTaskCheckForTimeOut+0xc8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d00a      	beq.n	8005194 <xTaskCheckForTimeOut+0x88>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	429a      	cmp	r2, r3
 8005186:	d305      	bcc.n	8005194 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005188:	2301      	movs	r3, #1
 800518a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	e015      	b.n	80051c0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	429a      	cmp	r2, r3
 800519c:	d20b      	bcs.n	80051b6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	1ad2      	subs	r2, r2, r3
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff ff98 	bl	80050e0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	e004      	b.n	80051c0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80051bc:	2301      	movs	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80051c0:	f000 fe20 	bl	8005e04 <vPortExitCritical>

    return xReturn;
 80051c4:	69fb      	ldr	r3, [r7, #28]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3720      	adds	r7, #32
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	200005bc 	.word	0x200005bc
 80051d4:	200005d0 	.word	0x200005d0

080051d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80051dc:	4b03      	ldr	r3, [pc, #12]	; (80051ec <vTaskMissedYield+0x14>)
 80051de:	2201      	movs	r2, #1
 80051e0:	601a      	str	r2, [r3, #0]
}
 80051e2:	bf00      	nop
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	200005cc 	.word	0x200005cc

080051f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80051f8:	f000 f844 	bl	8005284 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051fc:	4b06      	ldr	r3, [pc, #24]	; (8005218 <prvIdleTask+0x28>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d9f9      	bls.n	80051f8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <prvIdleTask+0x2c>)
 8005206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005214:	e7f0      	b.n	80051f8 <prvIdleTask+0x8>
 8005216:	bf00      	nop
 8005218:	200000d4 	.word	0x200000d4
 800521c:	e000ed04 	.word	0xe000ed04

08005220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
    #if ( configUSE_EDF_SCHEDULER == 1)
        vListInitialise( &( pxReadyTasksListsEDF));
 8005224:	480e      	ldr	r0, [pc, #56]	; (8005260 <prvInitialiseTaskLists+0x40>)
 8005226:	f7fe fc0f 	bl	8003a48 <vListInitialise>
            vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
        }
    #endif

    #if ( configSUPPORT_SPORADIC_TASKS == 1 )
        vListInitialise( &xIndefiniteBlockedList );
 800522a:	480e      	ldr	r0, [pc, #56]	; (8005264 <prvInitialiseTaskLists+0x44>)
 800522c:	f7fe fc0c 	bl	8003a48 <vListInitialise>
    #endif

    vListInitialise( &xDelayedTaskList1 );
 8005230:	480d      	ldr	r0, [pc, #52]	; (8005268 <prvInitialiseTaskLists+0x48>)
 8005232:	f7fe fc09 	bl	8003a48 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005236:	480d      	ldr	r0, [pc, #52]	; (800526c <prvInitialiseTaskLists+0x4c>)
 8005238:	f7fe fc06 	bl	8003a48 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800523c:	480c      	ldr	r0, [pc, #48]	; (8005270 <prvInitialiseTaskLists+0x50>)
 800523e:	f7fe fc03 	bl	8003a48 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005242:	480c      	ldr	r0, [pc, #48]	; (8005274 <prvInitialiseTaskLists+0x54>)
 8005244:	f7fe fc00 	bl	8003a48 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005248:	480b      	ldr	r0, [pc, #44]	; (8005278 <prvInitialiseTaskLists+0x58>)
 800524a:	f7fe fbfd 	bl	8003a48 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <prvInitialiseTaskLists+0x5c>)
 8005250:	4a05      	ldr	r2, [pc, #20]	; (8005268 <prvInitialiseTaskLists+0x48>)
 8005252:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005254:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <prvInitialiseTaskLists+0x60>)
 8005256:	4a05      	ldr	r2, [pc, #20]	; (800526c <prvInitialiseTaskLists+0x4c>)
 8005258:	601a      	str	r2, [r3, #0]
}
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	200000c0 	.word	0x200000c0
 8005264:	2000055c 	.word	0x2000055c
 8005268:	20000534 	.word	0x20000534
 800526c:	20000548 	.word	0x20000548
 8005270:	20000578 	.word	0x20000578
 8005274:	2000058c 	.word	0x2000058c
 8005278:	200005a4 	.word	0x200005a4
 800527c:	20000570 	.word	0x20000570
 8005280:	20000574 	.word	0x20000574

08005284 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800528a:	e019      	b.n	80052c0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800528c:	f000 fd8a 	bl	8005da4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005290:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <prvCheckTasksWaitingTermination+0x50>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	4618      	mov	r0, r3
 800529e:	f7fe fc5d 	bl	8003b5c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80052a2:	4b0d      	ldr	r3, [pc, #52]	; (80052d8 <prvCheckTasksWaitingTermination+0x54>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	4a0b      	ldr	r2, [pc, #44]	; (80052d8 <prvCheckTasksWaitingTermination+0x54>)
 80052aa:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <prvCheckTasksWaitingTermination+0x58>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <prvCheckTasksWaitingTermination+0x58>)
 80052b4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80052b6:	f000 fda5 	bl	8005e04 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f810 	bl	80052e0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <prvCheckTasksWaitingTermination+0x58>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e1      	bne.n	800528c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	2000058c 	.word	0x2000058c
 80052d8:	200005b8 	.word	0x200005b8
 80052dc:	200005a0 	.word	0x200005a0

080052e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 ff47 	bl	8006180 <vPortFree>
                vPortFree( pxTCB );
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 ff44 	bl	8006180 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005304:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <prvResetNextTaskUnblockTime+0x30>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d104      	bne.n	8005318 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800530e:	4b09      	ldr	r3, [pc, #36]	; (8005334 <prvResetNextTaskUnblockTime+0x34>)
 8005310:	f04f 32ff 	mov.w	r2, #4294967295
 8005314:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005316:	e005      	b.n	8005324 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <prvResetNextTaskUnblockTime+0x30>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a04      	ldr	r2, [pc, #16]	; (8005334 <prvResetNextTaskUnblockTime+0x34>)
 8005322:	6013      	str	r3, [r2, #0]
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20000570 	.word	0x20000570
 8005334:	200005d8 	.word	0x200005d8

08005338 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <xTaskGetSchedulerState+0x34>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005346:	2301      	movs	r3, #1
 8005348:	607b      	str	r3, [r7, #4]
 800534a:	e008      	b.n	800535e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800534c:	4b08      	ldr	r3, [pc, #32]	; (8005370 <xTaskGetSchedulerState+0x38>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d102      	bne.n	800535a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005354:	2302      	movs	r3, #2
 8005356:	607b      	str	r3, [r7, #4]
 8005358:	e001      	b.n	800535e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800535a:	2300      	movs	r3, #0
 800535c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800535e:	687b      	ldr	r3, [r7, #4]
    }
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	200005c4 	.word	0x200005c4
 8005370:	200005e0 	.word	0x200005e0

08005374 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d04e      	beq.n	8005428 <xTaskPriorityDisinherit+0xb4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800538a:	4b2a      	ldr	r3, [pc, #168]	; (8005434 <xTaskPriorityDisinherit+0xc0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	429a      	cmp	r2, r3
 8005392:	d00a      	beq.n	80053aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	60fb      	str	r3, [r7, #12]
}
 80053a6:	bf00      	nop
 80053a8:	e7fe      	b.n	80053a8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10a      	bne.n	80053c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80053b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	60bb      	str	r3, [r7, #8]
}
 80053c4:	bf00      	nop
 80053c6:	e7fe      	b.n	80053c6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053cc:	1e5a      	subs	r2, r3, #1
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053da:	429a      	cmp	r2, r3
 80053dc:	d024      	beq.n	8005428 <xTaskPriorityDisinherit+0xb4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d120      	bne.n	8005428 <xTaskPriorityDisinherit+0xb4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe fbb6 	bl	8003b5c <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <xTaskPriorityDisinherit+0xc4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d903      	bls.n	8005418 <xTaskPriorityDisinherit+0xa4>
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	4a08      	ldr	r2, [pc, #32]	; (8005438 <xTaskPriorityDisinherit+0xc4>)
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	3304      	adds	r3, #4
 800541c:	4619      	mov	r1, r3
 800541e:	4807      	ldr	r0, [pc, #28]	; (800543c <xTaskPriorityDisinherit+0xc8>)
 8005420:	f7fe fb63 	bl	8003aea <vListInsert>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005424:	2301      	movs	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005428:	697b      	ldr	r3, [r7, #20]
    }
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	200000bc 	.word	0x200000bc
 8005438:	200005c0 	.word	0x200005c0
 800543c:	200000c0 	.word	0x200000c0

08005440 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800544a:	4b21      	ldr	r3, [pc, #132]	; (80054d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005450:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3304      	adds	r3, #4
 8005456:	4618      	mov	r0, r3
 8005458:	f7fe fb80 	bl	8003b5c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005462:	d10a      	bne.n	800547a <prvAddCurrentTaskToDelayedList+0x3a>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800546a:	4b1a      	ldr	r3, [pc, #104]	; (80054d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3304      	adds	r3, #4
 8005470:	4619      	mov	r1, r3
 8005472:	4819      	ldr	r0, [pc, #100]	; (80054d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005474:	f7fe fb15 	bl	8003aa2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005478:	e026      	b.n	80054c8 <prvAddCurrentTaskToDelayedList+0x88>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4413      	add	r3, r2
 8005480:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005482:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	429a      	cmp	r2, r3
 8005490:	d209      	bcs.n	80054a6 <prvAddCurrentTaskToDelayedList+0x66>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005492:	4b12      	ldr	r3, [pc, #72]	; (80054dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3304      	adds	r3, #4
 800549c:	4619      	mov	r1, r3
 800549e:	4610      	mov	r0, r2
 80054a0:	f7fe fb23 	bl	8003aea <vListInsert>
}
 80054a4:	e010      	b.n	80054c8 <prvAddCurrentTaskToDelayedList+0x88>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054a6:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4619      	mov	r1, r3
 80054b2:	4610      	mov	r0, r2
 80054b4:	f7fe fb19 	bl	8003aea <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80054b8:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d202      	bcs.n	80054c8 <prvAddCurrentTaskToDelayedList+0x88>
                        xNextTaskUnblockTime = xTimeToWake;
 80054c2:	4a08      	ldr	r2, [pc, #32]	; (80054e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	6013      	str	r3, [r2, #0]
}
 80054c8:	bf00      	nop
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	200005bc 	.word	0x200005bc
 80054d4:	200000bc 	.word	0x200000bc
 80054d8:	200005a4 	.word	0x200005a4
 80054dc:	20000574 	.word	0x20000574
 80054e0:	20000570 	.word	0x20000570
 80054e4:	200005d8 	.word	0x200005d8

080054e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054f2:	f000 faf1 	bl	8005ad8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054f6:	4b11      	ldr	r3, [pc, #68]	; (800553c <xTimerCreateTimerTask+0x54>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00b      	beq.n	8005516 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80054fe:	4b10      	ldr	r3, [pc, #64]	; (8005540 <xTimerCreateTimerTask+0x58>)
 8005500:	9301      	str	r3, [sp, #4]
 8005502:	2302      	movs	r3, #2
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	2300      	movs	r3, #0
 8005508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800550c:	490d      	ldr	r1, [pc, #52]	; (8005544 <xTimerCreateTimerTask+0x5c>)
 800550e:	480e      	ldr	r0, [pc, #56]	; (8005548 <xTimerCreateTimerTask+0x60>)
 8005510:	f7fe fff8 	bl	8004504 <xTaskCreate>
 8005514:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	603b      	str	r3, [r7, #0]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8005532:	687b      	ldr	r3, [r7, #4]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20000614 	.word	0x20000614
 8005540:	20000618 	.word	0x20000618
 8005544:	08006ef0 	.word	0x08006ef0
 8005548:	08005681 	.word	0x08005681

0800554c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800555a:	2300      	movs	r3, #0
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	623b      	str	r3, [r7, #32]
}
 8005576:	bf00      	nop
 8005578:	e7fe      	b.n	8005578 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800557a:	4b1a      	ldr	r3, [pc, #104]	; (80055e4 <xTimerGenericCommand+0x98>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d02a      	beq.n	80055d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b05      	cmp	r3, #5
 8005592:	dc18      	bgt.n	80055c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005594:	f7ff fed0 	bl	8005338 <xTaskGetSchedulerState>
 8005598:	4603      	mov	r3, r0
 800559a:	2b02      	cmp	r3, #2
 800559c:	d109      	bne.n	80055b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800559e:	4b11      	ldr	r3, [pc, #68]	; (80055e4 <xTimerGenericCommand+0x98>)
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	f107 0110 	add.w	r1, r7, #16
 80055a6:	2300      	movs	r3, #0
 80055a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055aa:	f7fe fbc3 	bl	8003d34 <xQueueGenericSend>
 80055ae:	6278      	str	r0, [r7, #36]	; 0x24
 80055b0:	e012      	b.n	80055d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055b2:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <xTimerGenericCommand+0x98>)
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	f107 0110 	add.w	r1, r7, #16
 80055ba:	2300      	movs	r3, #0
 80055bc:	2200      	movs	r2, #0
 80055be:	f7fe fbb9 	bl	8003d34 <xQueueGenericSend>
 80055c2:	6278      	str	r0, [r7, #36]	; 0x24
 80055c4:	e008      	b.n	80055d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055c6:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <xTimerGenericCommand+0x98>)
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	f107 0110 	add.w	r1, r7, #16
 80055ce:	2300      	movs	r3, #0
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	f7fe fcad 	bl	8003f30 <xQueueGenericSendFromISR>
 80055d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3728      	adds	r7, #40	; 0x28
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000614 	.word	0x20000614

080055e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f2:	4b22      	ldr	r3, [pc, #136]	; (800567c <prvProcessExpiredTimer+0x94>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	3304      	adds	r3, #4
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe faab 	bl	8003b5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d022      	beq.n	800565a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	18d1      	adds	r1, r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	6978      	ldr	r0, [r7, #20]
 8005622:	f000 f8d1 	bl	80057c8 <prvInsertTimerInActiveList>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01f      	beq.n	800566c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800562c:	2300      	movs	r3, #0
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	2300      	movs	r3, #0
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	2100      	movs	r1, #0
 8005636:	6978      	ldr	r0, [r7, #20]
 8005638:	f7ff ff88 	bl	800554c <xTimerGenericCommand>
 800563c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d113      	bne.n	800566c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	60fb      	str	r3, [r7, #12]
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	b2da      	uxtb	r2, r3
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	6978      	ldr	r0, [r7, #20]
 8005672:	4798      	blx	r3
}
 8005674:	bf00      	nop
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	2000060c 	.word	0x2000060c

08005680 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005688:	f107 0308 	add.w	r3, r7, #8
 800568c:	4618      	mov	r0, r3
 800568e:	f000 f857 	bl	8005740 <prvGetNextExpireTime>
 8005692:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4619      	mov	r1, r3
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f803 	bl	80056a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800569e:	f000 f8d5 	bl	800584c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056a2:	e7f1      	b.n	8005688 <prvTimerTask+0x8>

080056a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80056ae:	f7ff fa0d 	bl	8004acc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056b2:	f107 0308 	add.w	r3, r7, #8
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 f866 	bl	8005788 <prvSampleTimeNow>
 80056bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d130      	bne.n	8005726 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <prvProcessTimerOrBlockTask+0x3c>
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d806      	bhi.n	80056e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056d2:	f7ff fa09 	bl	8004ae8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff ff85 	bl	80055e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056de:	e024      	b.n	800572a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056e6:	4b13      	ldr	r3, [pc, #76]	; (8005734 <prvProcessTimerOrBlockTask+0x90>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <prvProcessTimerOrBlockTask+0x50>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <prvProcessTimerOrBlockTask+0x52>
 80056f4:	2300      	movs	r3, #0
 80056f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056f8:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <prvProcessTimerOrBlockTask+0x94>)
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	4619      	mov	r1, r3
 8005706:	f7fe fec9 	bl	800449c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800570a:	f7ff f9ed 	bl	8004ae8 <xTaskResumeAll>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <prvProcessTimerOrBlockTask+0x98>)
 8005716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	f3bf 8f6f 	isb	sy
}
 8005724:	e001      	b.n	800572a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005726:	f7ff f9df 	bl	8004ae8 <xTaskResumeAll>
}
 800572a:	bf00      	nop
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000610 	.word	0x20000610
 8005738:	20000614 	.word	0x20000614
 800573c:	e000ed04 	.word	0xe000ed04

08005740 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005748:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <prvGetNextExpireTime+0x44>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <prvGetNextExpireTime+0x16>
 8005752:	2201      	movs	r2, #1
 8005754:	e000      	b.n	8005758 <prvGetNextExpireTime+0x18>
 8005756:	2200      	movs	r2, #0
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d105      	bne.n	8005770 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005764:	4b07      	ldr	r3, [pc, #28]	; (8005784 <prvGetNextExpireTime+0x44>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	e001      	b.n	8005774 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005774:	68fb      	ldr	r3, [r7, #12]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	2000060c 	.word	0x2000060c

08005788 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005790:	f7ff fa40 	bl	8004c14 <xTaskGetTickCount>
 8005794:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005796:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <prvSampleTimeNow+0x3c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	429a      	cmp	r2, r3
 800579e:	d205      	bcs.n	80057ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80057a0:	f000 f936 	bl	8005a10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	e002      	b.n	80057b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80057b2:	4a04      	ldr	r2, [pc, #16]	; (80057c4 <prvSampleTimeNow+0x3c>)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057b8:	68fb      	ldr	r3, [r7, #12]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	2000061c 	.word	0x2000061c

080057c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d812      	bhi.n	8005814 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	1ad2      	subs	r2, r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d302      	bcc.n	8005802 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057fc:	2301      	movs	r3, #1
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e01b      	b.n	800583a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005802:	4b10      	ldr	r3, [pc, #64]	; (8005844 <prvInsertTimerInActiveList+0x7c>)
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3304      	adds	r3, #4
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f7fe f96c 	bl	8003aea <vListInsert>
 8005812:	e012      	b.n	800583a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d206      	bcs.n	800582a <prvInsertTimerInActiveList+0x62>
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d302      	bcc.n	800582a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005824:	2301      	movs	r3, #1
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	e007      	b.n	800583a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800582a:	4b07      	ldr	r3, [pc, #28]	; (8005848 <prvInsertTimerInActiveList+0x80>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3304      	adds	r3, #4
 8005832:	4619      	mov	r1, r3
 8005834:	4610      	mov	r0, r2
 8005836:	f7fe f958 	bl	8003aea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800583a:	697b      	ldr	r3, [r7, #20]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000610 	.word	0x20000610
 8005848:	2000060c 	.word	0x2000060c

0800584c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08e      	sub	sp, #56	; 0x38
 8005850:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005852:	e0ca      	b.n	80059ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	da18      	bge.n	800588c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800585a:	1d3b      	adds	r3, r7, #4
 800585c:	3304      	adds	r3, #4
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	61fb      	str	r3, [r7, #28]
}
 8005878:	bf00      	nop
 800587a:	e7fe      	b.n	800587a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005882:	6850      	ldr	r0, [r2, #4]
 8005884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005886:	6892      	ldr	r2, [r2, #8]
 8005888:	4611      	mov	r1, r2
 800588a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f2c0 80aa 	blt.w	80059e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d004      	beq.n	80058aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	3304      	adds	r3, #4
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fe f959 	bl	8003b5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058aa:	463b      	mov	r3, r7
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff ff6b 	bl	8005788 <prvSampleTimeNow>
 80058b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b09      	cmp	r3, #9
 80058b8:	f200 8097 	bhi.w	80059ea <prvProcessReceivedCommands+0x19e>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <prvProcessReceivedCommands+0x78>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058ed 	.word	0x080058ed
 80058c8:	080058ed 	.word	0x080058ed
 80058cc:	080058ed 	.word	0x080058ed
 80058d0:	08005961 	.word	0x08005961
 80058d4:	08005975 	.word	0x08005975
 80058d8:	080059bf 	.word	0x080059bf
 80058dc:	080058ed 	.word	0x080058ed
 80058e0:	080058ed 	.word	0x080058ed
 80058e4:	08005961 	.word	0x08005961
 80058e8:	08005975 	.word	0x08005975
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f2:	f043 0301 	orr.w	r3, r3, #1
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	18d1      	adds	r1, r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800590c:	f7ff ff5c 	bl	80057c8 <prvInsertTimerInActiveList>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d069      	beq.n	80059ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800591c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d05e      	beq.n	80059ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	441a      	add	r2, r3
 8005934:	2300      	movs	r3, #0
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	2300      	movs	r3, #0
 800593a:	2100      	movs	r1, #0
 800593c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800593e:	f7ff fe05 	bl	800554c <xTimerGenericCommand>
 8005942:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d14f      	bne.n	80059ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	61bb      	str	r3, [r7, #24]
}
 800595c:	bf00      	nop
 800595e:	e7fe      	b.n	800595e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005966:	f023 0301 	bic.w	r3, r3, #1
 800596a:	b2da      	uxtb	r2, r3
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005972:	e03a      	b.n	80059ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800597a:	f043 0301 	orr.w	r3, r3, #1
 800597e:	b2da      	uxtb	r2, r3
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	617b      	str	r3, [r7, #20]
}
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	18d1      	adds	r1, r2, r3
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059b8:	f7ff ff06 	bl	80057c8 <prvInsertTimerInActiveList>
					break;
 80059bc:	e015      	b.n	80059ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d103      	bne.n	80059d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80059cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ce:	f000 fbd7 	bl	8006180 <vPortFree>
 80059d2:	e00a      	b.n	80059ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059da:	f023 0301 	bic.w	r3, r3, #1
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059e6:	e000      	b.n	80059ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80059e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059ea:	4b08      	ldr	r3, [pc, #32]	; (8005a0c <prvProcessReceivedCommands+0x1c0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	1d39      	adds	r1, r7, #4
 80059f0:	2200      	movs	r2, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe fb38 	bl	8004068 <xQueueReceive>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f47f af2a 	bne.w	8005854 <prvProcessReceivedCommands+0x8>
	}
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	3730      	adds	r7, #48	; 0x30
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000614 	.word	0x20000614

08005a10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a16:	e048      	b.n	8005aaa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a18:	4b2d      	ldr	r3, [pc, #180]	; (8005ad0 <prvSwitchTimerLists+0xc0>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a22:	4b2b      	ldr	r3, [pc, #172]	; (8005ad0 <prvSwitchTimerLists+0xc0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fe f893 	bl	8003b5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d02e      	beq.n	8005aaa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4413      	add	r3, r2
 8005a54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d90e      	bls.n	8005a7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a6a:	4b19      	ldr	r3, [pc, #100]	; (8005ad0 <prvSwitchTimerLists+0xc0>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3304      	adds	r3, #4
 8005a72:	4619      	mov	r1, r3
 8005a74:	4610      	mov	r0, r2
 8005a76:	f7fe f838 	bl	8003aea <vListInsert>
 8005a7a:	e016      	b.n	8005aaa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	2300      	movs	r3, #0
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	2100      	movs	r1, #0
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f7ff fd60 	bl	800554c <xTimerGenericCommand>
 8005a8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	603b      	str	r3, [r7, #0]
}
 8005aa6:	bf00      	nop
 8005aa8:	e7fe      	b.n	8005aa8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005aaa:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <prvSwitchTimerLists+0xc0>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1b1      	bne.n	8005a18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ab4:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <prvSwitchTimerLists+0xc0>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <prvSwitchTimerLists+0xc4>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a04      	ldr	r2, [pc, #16]	; (8005ad0 <prvSwitchTimerLists+0xc0>)
 8005ac0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ac2:	4a04      	ldr	r2, [pc, #16]	; (8005ad4 <prvSwitchTimerLists+0xc4>)
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	6013      	str	r3, [r2, #0]
}
 8005ac8:	bf00      	nop
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	2000060c 	.word	0x2000060c
 8005ad4:	20000610 	.word	0x20000610

08005ad8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005adc:	f000 f962 	bl	8005da4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ae0:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <prvCheckForValidListAndQueue+0x54>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d11d      	bne.n	8005b24 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ae8:	4811      	ldr	r0, [pc, #68]	; (8005b30 <prvCheckForValidListAndQueue+0x58>)
 8005aea:	f7fd ffad 	bl	8003a48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005aee:	4811      	ldr	r0, [pc, #68]	; (8005b34 <prvCheckForValidListAndQueue+0x5c>)
 8005af0:	f7fd ffaa 	bl	8003a48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005af4:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <prvCheckForValidListAndQueue+0x60>)
 8005af6:	4a0e      	ldr	r2, [pc, #56]	; (8005b30 <prvCheckForValidListAndQueue+0x58>)
 8005af8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005afa:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <prvCheckForValidListAndQueue+0x64>)
 8005afc:	4a0d      	ldr	r2, [pc, #52]	; (8005b34 <prvCheckForValidListAndQueue+0x5c>)
 8005afe:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005b00:	2200      	movs	r2, #0
 8005b02:	2110      	movs	r1, #16
 8005b04:	200a      	movs	r0, #10
 8005b06:	f7fe f8bb 	bl	8003c80 <xQueueGenericCreate>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4a07      	ldr	r2, [pc, #28]	; (8005b2c <prvCheckForValidListAndQueue+0x54>)
 8005b0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b10:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <prvCheckForValidListAndQueue+0x54>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b18:	4b04      	ldr	r3, [pc, #16]	; (8005b2c <prvCheckForValidListAndQueue+0x54>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4908      	ldr	r1, [pc, #32]	; (8005b40 <prvCheckForValidListAndQueue+0x68>)
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe fc92 	bl	8004448 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b24:	f000 f96e 	bl	8005e04 <vPortExitCritical>
}
 8005b28:	bf00      	nop
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20000614 	.word	0x20000614
 8005b30:	200005e4 	.word	0x200005e4
 8005b34:	200005f8 	.word	0x200005f8
 8005b38:	2000060c 	.word	0x2000060c
 8005b3c:	20000610 	.word	0x20000610
 8005b40:	08006ef8 	.word	0x08006ef8

08005b44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3b04      	subs	r3, #4
 8005b54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3b04      	subs	r3, #4
 8005b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f023 0201 	bic.w	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3b04      	subs	r3, #4
 8005b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b74:	4a0c      	ldr	r2, [pc, #48]	; (8005ba8 <pxPortInitialiseStack+0x64>)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3b14      	subs	r3, #20
 8005b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3b04      	subs	r3, #4
 8005b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f06f 0202 	mvn.w	r2, #2
 8005b92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3b20      	subs	r3, #32
 8005b98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	08005bad 	.word	0x08005bad

08005bac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bb6:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <prvTaskExitError+0x54>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d00a      	beq.n	8005bd6 <prvTaskExitError+0x2a>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	60fb      	str	r3, [r7, #12]
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <prvTaskExitError+0x28>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	60bb      	str	r3, [r7, #8]
}
 8005be8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bea:	bf00      	nop
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0fc      	beq.n	8005bec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	2000000c 	.word	0x2000000c
	...

08005c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <pxCurrentTCBConst2>)
 8005c12:	6819      	ldr	r1, [r3, #0]
 8005c14:	6808      	ldr	r0, [r1, #0]
 8005c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1a:	f380 8809 	msr	PSP, r0
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f04f 0000 	mov.w	r0, #0
 8005c26:	f380 8811 	msr	BASEPRI, r0
 8005c2a:	4770      	bx	lr
 8005c2c:	f3af 8000 	nop.w

08005c30 <pxCurrentTCBConst2>:
 8005c30:	200000bc 	.word	0x200000bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop

08005c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c38:	4808      	ldr	r0, [pc, #32]	; (8005c5c <prvPortStartFirstTask+0x24>)
 8005c3a:	6800      	ldr	r0, [r0, #0]
 8005c3c:	6800      	ldr	r0, [r0, #0]
 8005c3e:	f380 8808 	msr	MSP, r0
 8005c42:	f04f 0000 	mov.w	r0, #0
 8005c46:	f380 8814 	msr	CONTROL, r0
 8005c4a:	b662      	cpsie	i
 8005c4c:	b661      	cpsie	f
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	df00      	svc	0
 8005c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c5a:	bf00      	nop
 8005c5c:	e000ed08 	.word	0xe000ed08

08005c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c66:	4b46      	ldr	r3, [pc, #280]	; (8005d80 <xPortStartScheduler+0x120>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a46      	ldr	r2, [pc, #280]	; (8005d84 <xPortStartScheduler+0x124>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d10a      	bne.n	8005c86 <xPortStartScheduler+0x26>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	613b      	str	r3, [r7, #16]
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c86:	4b3e      	ldr	r3, [pc, #248]	; (8005d80 <xPortStartScheduler+0x120>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a3f      	ldr	r2, [pc, #252]	; (8005d88 <xPortStartScheduler+0x128>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d10a      	bne.n	8005ca6 <xPortStartScheduler+0x46>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	60fb      	str	r3, [r7, #12]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ca6:	4b39      	ldr	r3, [pc, #228]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005ca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	22ff      	movs	r2, #255	; 0xff
 8005cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	4b31      	ldr	r3, [pc, #196]	; (8005d90 <xPortStartScheduler+0x130>)
 8005ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cce:	4b31      	ldr	r3, [pc, #196]	; (8005d94 <xPortStartScheduler+0x134>)
 8005cd0:	2207      	movs	r2, #7
 8005cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cd4:	e009      	b.n	8005cea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005cd6:	4b2f      	ldr	r3, [pc, #188]	; (8005d94 <xPortStartScheduler+0x134>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	4a2d      	ldr	r2, [pc, #180]	; (8005d94 <xPortStartScheduler+0x134>)
 8005cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf2:	2b80      	cmp	r3, #128	; 0x80
 8005cf4:	d0ef      	beq.n	8005cd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cf6:	4b27      	ldr	r3, [pc, #156]	; (8005d94 <xPortStartScheduler+0x134>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f1c3 0307 	rsb	r3, r3, #7
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d00a      	beq.n	8005d18 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	60bb      	str	r3, [r7, #8]
}
 8005d14:	bf00      	nop
 8005d16:	e7fe      	b.n	8005d16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d18:	4b1e      	ldr	r3, [pc, #120]	; (8005d94 <xPortStartScheduler+0x134>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	021b      	lsls	r3, r3, #8
 8005d1e:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <xPortStartScheduler+0x134>)
 8005d20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d22:	4b1c      	ldr	r3, [pc, #112]	; (8005d94 <xPortStartScheduler+0x134>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d2a:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <xPortStartScheduler+0x134>)
 8005d2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d36:	4b18      	ldr	r3, [pc, #96]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a17      	ldr	r2, [pc, #92]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d42:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a14      	ldr	r2, [pc, #80]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d4e:	f000 f8dd 	bl	8005f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d52:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <xPortStartScheduler+0x13c>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d58:	f000 f8fc 	bl	8005f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d5c:	4b10      	ldr	r3, [pc, #64]	; (8005da0 <xPortStartScheduler+0x140>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a0f      	ldr	r2, [pc, #60]	; (8005da0 <xPortStartScheduler+0x140>)
 8005d62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d68:	f7ff ff66 	bl	8005c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d6c:	f7ff f8ec 	bl	8004f48 <vTaskSwitchContext>
	prvTaskExitError();
 8005d70:	f7ff ff1c 	bl	8005bac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	e000ed00 	.word	0xe000ed00
 8005d84:	410fc271 	.word	0x410fc271
 8005d88:	410fc270 	.word	0x410fc270
 8005d8c:	e000e400 	.word	0xe000e400
 8005d90:	20000620 	.word	0x20000620
 8005d94:	20000624 	.word	0x20000624
 8005d98:	e000ed20 	.word	0xe000ed20
 8005d9c:	2000000c 	.word	0x2000000c
 8005da0:	e000ef34 	.word	0xe000ef34

08005da4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	607b      	str	r3, [r7, #4]
}
 8005dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005dbe:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <vPortEnterCritical+0x58>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	4a0d      	ldr	r2, [pc, #52]	; (8005dfc <vPortEnterCritical+0x58>)
 8005dc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <vPortEnterCritical+0x58>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d10f      	bne.n	8005df0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <vPortEnterCritical+0x5c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	603b      	str	r3, [r7, #0]
}
 8005dec:	bf00      	nop
 8005dee:	e7fe      	b.n	8005dee <vPortEnterCritical+0x4a>
	}
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	2000000c 	.word	0x2000000c
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e0a:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <vPortExitCritical+0x50>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <vPortExitCritical+0x24>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	607b      	str	r3, [r7, #4]
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e28:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <vPortExitCritical+0x50>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	4a09      	ldr	r2, [pc, #36]	; (8005e54 <vPortExitCritical+0x50>)
 8005e30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e32:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <vPortExitCritical+0x50>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d105      	bne.n	8005e46 <vPortExitCritical+0x42>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	f383 8811 	msr	BASEPRI, r3
}
 8005e44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	2000000c 	.word	0x2000000c
	...

08005e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e60:	f3ef 8009 	mrs	r0, PSP
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	4b15      	ldr	r3, [pc, #84]	; (8005ec0 <pxCurrentTCBConst>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	f01e 0f10 	tst.w	lr, #16
 8005e70:	bf08      	it	eq
 8005e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7a:	6010      	str	r0, [r2, #0]
 8005e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e84:	f380 8811 	msr	BASEPRI, r0
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f7ff f85a 	bl	8004f48 <vTaskSwitchContext>
 8005e94:	f04f 0000 	mov.w	r0, #0
 8005e98:	f380 8811 	msr	BASEPRI, r0
 8005e9c:	bc09      	pop	{r0, r3}
 8005e9e:	6819      	ldr	r1, [r3, #0]
 8005ea0:	6808      	ldr	r0, [r1, #0]
 8005ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea6:	f01e 0f10 	tst.w	lr, #16
 8005eaa:	bf08      	it	eq
 8005eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005eb0:	f380 8809 	msr	PSP, r0
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	f3af 8000 	nop.w

08005ec0 <pxCurrentTCBConst>:
 8005ec0:	200000bc 	.word	0x200000bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop

08005ec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	607b      	str	r3, [r7, #4]
}
 8005ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ee2:	f7fe ff7b 	bl	8004ddc <xTaskIncrementTick>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <xPortSysTickHandler+0x40>)
 8005eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	f383 8811 	msr	BASEPRI, r3
}
 8005efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	e000ed04 	.word	0xe000ed04

08005f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <vPortSetupTimerInterrupt+0x34>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f16:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <vPortSetupTimerInterrupt+0x38>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <vPortSetupTimerInterrupt+0x3c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <vPortSetupTimerInterrupt+0x40>)
 8005f22:	fba2 2303 	umull	r2, r3, r2, r3
 8005f26:	099b      	lsrs	r3, r3, #6
 8005f28:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <vPortSetupTimerInterrupt+0x44>)
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f2e:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <vPortSetupTimerInterrupt+0x34>)
 8005f30:	2207      	movs	r2, #7
 8005f32:	601a      	str	r2, [r3, #0]
}
 8005f34:	bf00      	nop
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	e000e010 	.word	0xe000e010
 8005f44:	e000e018 	.word	0xe000e018
 8005f48:	20000000 	.word	0x20000000
 8005f4c:	10624dd3 	.word	0x10624dd3
 8005f50:	e000e014 	.word	0xe000e014

08005f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f64 <vPortEnableVFP+0x10>
 8005f58:	6801      	ldr	r1, [r0, #0]
 8005f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f5e:	6001      	str	r1, [r0, #0]
 8005f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f62:	bf00      	nop
 8005f64:	e000ed88 	.word	0xe000ed88

08005f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f6e:	f3ef 8305 	mrs	r3, IPSR
 8005f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b0f      	cmp	r3, #15
 8005f78:	d914      	bls.n	8005fa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f7a:	4a17      	ldr	r2, [pc, #92]	; (8005fd8 <vPortValidateInterruptPriority+0x70>)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4413      	add	r3, r2
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <vPortValidateInterruptPriority+0x74>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	7afa      	ldrb	r2, [r7, #11]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d20a      	bcs.n	8005fa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	607b      	str	r3, [r7, #4]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <vPortValidateInterruptPriority+0x78>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fac:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <vPortValidateInterruptPriority+0x7c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d90a      	bls.n	8005fca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	603b      	str	r3, [r7, #0]
}
 8005fc6:	bf00      	nop
 8005fc8:	e7fe      	b.n	8005fc8 <vPortValidateInterruptPriority+0x60>
	}
 8005fca:	bf00      	nop
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	e000e3f0 	.word	0xe000e3f0
 8005fdc:	20000620 	.word	0x20000620
 8005fe0:	e000ed0c 	.word	0xe000ed0c
 8005fe4:	20000624 	.word	0x20000624

08005fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ff4:	f7fe fd6a 	bl	8004acc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ff8:	4b5b      	ldr	r3, [pc, #364]	; (8006168 <pvPortMalloc+0x180>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006000:	f000 f920 	bl	8006244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006004:	4b59      	ldr	r3, [pc, #356]	; (800616c <pvPortMalloc+0x184>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	f040 8093 	bne.w	8006138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01d      	beq.n	8006054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006018:	2208      	movs	r2, #8
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4413      	add	r3, r2
 800601e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	2b00      	cmp	r3, #0
 8006028:	d014      	beq.n	8006054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f023 0307 	bic.w	r3, r3, #7
 8006030:	3308      	adds	r3, #8
 8006032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <pvPortMalloc+0x6c>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	617b      	str	r3, [r7, #20]
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d06e      	beq.n	8006138 <pvPortMalloc+0x150>
 800605a:	4b45      	ldr	r3, [pc, #276]	; (8006170 <pvPortMalloc+0x188>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	429a      	cmp	r2, r3
 8006062:	d869      	bhi.n	8006138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006064:	4b43      	ldr	r3, [pc, #268]	; (8006174 <pvPortMalloc+0x18c>)
 8006066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006068:	4b42      	ldr	r3, [pc, #264]	; (8006174 <pvPortMalloc+0x18c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800606e:	e004      	b.n	800607a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d903      	bls.n	800608c <pvPortMalloc+0xa4>
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f1      	bne.n	8006070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800608c:	4b36      	ldr	r3, [pc, #216]	; (8006168 <pvPortMalloc+0x180>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006092:	429a      	cmp	r2, r3
 8006094:	d050      	beq.n	8006138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2208      	movs	r2, #8
 800609c:	4413      	add	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	1ad2      	subs	r2, r2, r3
 80060b0:	2308      	movs	r3, #8
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d91f      	bls.n	80060f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <pvPortMalloc+0xf8>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	613b      	str	r3, [r7, #16]
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	1ad2      	subs	r2, r2, r3
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060f2:	69b8      	ldr	r0, [r7, #24]
 80060f4:	f000 f908 	bl	8006308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060f8:	4b1d      	ldr	r3, [pc, #116]	; (8006170 <pvPortMalloc+0x188>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	4a1b      	ldr	r2, [pc, #108]	; (8006170 <pvPortMalloc+0x188>)
 8006104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006106:	4b1a      	ldr	r3, [pc, #104]	; (8006170 <pvPortMalloc+0x188>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <pvPortMalloc+0x190>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d203      	bcs.n	800611a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006112:	4b17      	ldr	r3, [pc, #92]	; (8006170 <pvPortMalloc+0x188>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a18      	ldr	r2, [pc, #96]	; (8006178 <pvPortMalloc+0x190>)
 8006118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	4b13      	ldr	r3, [pc, #76]	; (800616c <pvPortMalloc+0x184>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	431a      	orrs	r2, r3
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800612e:	4b13      	ldr	r3, [pc, #76]	; (800617c <pvPortMalloc+0x194>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3301      	adds	r3, #1
 8006134:	4a11      	ldr	r2, [pc, #68]	; (800617c <pvPortMalloc+0x194>)
 8006136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006138:	f7fe fcd6 	bl	8004ae8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <pvPortMalloc+0x174>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	60fb      	str	r3, [r7, #12]
}
 8006158:	bf00      	nop
 800615a:	e7fe      	b.n	800615a <pvPortMalloc+0x172>
	return pvReturn;
 800615c:	69fb      	ldr	r3, [r7, #28]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3728      	adds	r7, #40	; 0x28
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20004230 	.word	0x20004230
 800616c:	20004244 	.word	0x20004244
 8006170:	20004234 	.word	0x20004234
 8006174:	20004228 	.word	0x20004228
 8006178:	20004238 	.word	0x20004238
 800617c:	2000423c 	.word	0x2000423c

08006180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d04d      	beq.n	800622e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006192:	2308      	movs	r3, #8
 8006194:	425b      	negs	r3, r3
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	4b24      	ldr	r3, [pc, #144]	; (8006238 <vPortFree+0xb8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <vPortFree+0x44>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60fb      	str	r3, [r7, #12]
}
 80061c0:	bf00      	nop
 80061c2:	e7fe      	b.n	80061c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00a      	beq.n	80061e2 <vPortFree+0x62>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	60bb      	str	r3, [r7, #8]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	4b14      	ldr	r3, [pc, #80]	; (8006238 <vPortFree+0xb8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01e      	beq.n	800622e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d11a      	bne.n	800622e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	4b0e      	ldr	r3, [pc, #56]	; (8006238 <vPortFree+0xb8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	43db      	mvns	r3, r3
 8006202:	401a      	ands	r2, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006208:	f7fe fc60 	bl	8004acc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	4b0a      	ldr	r3, [pc, #40]	; (800623c <vPortFree+0xbc>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4413      	add	r3, r2
 8006216:	4a09      	ldr	r2, [pc, #36]	; (800623c <vPortFree+0xbc>)
 8006218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800621a:	6938      	ldr	r0, [r7, #16]
 800621c:	f000 f874 	bl	8006308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006220:	4b07      	ldr	r3, [pc, #28]	; (8006240 <vPortFree+0xc0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3301      	adds	r3, #1
 8006226:	4a06      	ldr	r2, [pc, #24]	; (8006240 <vPortFree+0xc0>)
 8006228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800622a:	f7fe fc5d 	bl	8004ae8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800622e:	bf00      	nop
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	20004244 	.word	0x20004244
 800623c:	20004234 	.word	0x20004234
 8006240:	20004240 	.word	0x20004240

08006244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800624a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800624e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006250:	4b27      	ldr	r3, [pc, #156]	; (80062f0 <prvHeapInit+0xac>)
 8006252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00c      	beq.n	8006278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3307      	adds	r3, #7
 8006262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0307 	bic.w	r3, r3, #7
 800626a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	4a1f      	ldr	r2, [pc, #124]	; (80062f0 <prvHeapInit+0xac>)
 8006274:	4413      	add	r3, r2
 8006276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800627c:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <prvHeapInit+0xb0>)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006282:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <prvHeapInit+0xb0>)
 8006284:	2200      	movs	r2, #0
 8006286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	4413      	add	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006290:	2208      	movs	r2, #8
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0307 	bic.w	r3, r3, #7
 800629e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <prvHeapInit+0xb4>)
 80062a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062a6:	4b14      	ldr	r3, [pc, #80]	; (80062f8 <prvHeapInit+0xb4>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2200      	movs	r2, #0
 80062ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062ae:	4b12      	ldr	r3, [pc, #72]	; (80062f8 <prvHeapInit+0xb4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	1ad2      	subs	r2, r2, r3
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062c4:	4b0c      	ldr	r3, [pc, #48]	; (80062f8 <prvHeapInit+0xb4>)
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <prvHeapInit+0xb8>)
 80062d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	4a09      	ldr	r2, [pc, #36]	; (8006300 <prvHeapInit+0xbc>)
 80062da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062dc:	4b09      	ldr	r3, [pc, #36]	; (8006304 <prvHeapInit+0xc0>)
 80062de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062e2:	601a      	str	r2, [r3, #0]
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	20000628 	.word	0x20000628
 80062f4:	20004228 	.word	0x20004228
 80062f8:	20004230 	.word	0x20004230
 80062fc:	20004238 	.word	0x20004238
 8006300:	20004234 	.word	0x20004234
 8006304:	20004244 	.word	0x20004244

08006308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006310:	4b28      	ldr	r3, [pc, #160]	; (80063b4 <prvInsertBlockIntoFreeList+0xac>)
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	e002      	b.n	800631c <prvInsertBlockIntoFreeList+0x14>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	429a      	cmp	r2, r3
 8006324:	d8f7      	bhi.n	8006316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	4413      	add	r3, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	429a      	cmp	r2, r3
 8006336:	d108      	bne.n	800634a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	441a      	add	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	441a      	add	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d118      	bne.n	8006390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	4b15      	ldr	r3, [pc, #84]	; (80063b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d00d      	beq.n	8006386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	441a      	add	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	e008      	b.n	8006398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006386:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	e003      	b.n	8006398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	429a      	cmp	r2, r3
 800639e:	d002      	beq.n	80063a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20004228 	.word	0x20004228
 80063b8:	20004230 	.word	0x20004230

080063bc <__errno>:
 80063bc:	4b01      	ldr	r3, [pc, #4]	; (80063c4 <__errno+0x8>)
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20000010 	.word	0x20000010

080063c8 <__libc_init_array>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	4d0d      	ldr	r5, [pc, #52]	; (8006400 <__libc_init_array+0x38>)
 80063cc:	4c0d      	ldr	r4, [pc, #52]	; (8006404 <__libc_init_array+0x3c>)
 80063ce:	1b64      	subs	r4, r4, r5
 80063d0:	10a4      	asrs	r4, r4, #2
 80063d2:	2600      	movs	r6, #0
 80063d4:	42a6      	cmp	r6, r4
 80063d6:	d109      	bne.n	80063ec <__libc_init_array+0x24>
 80063d8:	4d0b      	ldr	r5, [pc, #44]	; (8006408 <__libc_init_array+0x40>)
 80063da:	4c0c      	ldr	r4, [pc, #48]	; (800640c <__libc_init_array+0x44>)
 80063dc:	f000 fc4e 	bl	8006c7c <_init>
 80063e0:	1b64      	subs	r4, r4, r5
 80063e2:	10a4      	asrs	r4, r4, #2
 80063e4:	2600      	movs	r6, #0
 80063e6:	42a6      	cmp	r6, r4
 80063e8:	d105      	bne.n	80063f6 <__libc_init_array+0x2e>
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f0:	4798      	blx	r3
 80063f2:	3601      	adds	r6, #1
 80063f4:	e7ee      	b.n	80063d4 <__libc_init_array+0xc>
 80063f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063fa:	4798      	blx	r3
 80063fc:	3601      	adds	r6, #1
 80063fe:	e7f2      	b.n	80063e6 <__libc_init_array+0x1e>
 8006400:	08006f54 	.word	0x08006f54
 8006404:	08006f54 	.word	0x08006f54
 8006408:	08006f54 	.word	0x08006f54
 800640c:	08006f58 	.word	0x08006f58

08006410 <memcpy>:
 8006410:	440a      	add	r2, r1
 8006412:	4291      	cmp	r1, r2
 8006414:	f100 33ff 	add.w	r3, r0, #4294967295
 8006418:	d100      	bne.n	800641c <memcpy+0xc>
 800641a:	4770      	bx	lr
 800641c:	b510      	push	{r4, lr}
 800641e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006426:	4291      	cmp	r1, r2
 8006428:	d1f9      	bne.n	800641e <memcpy+0xe>
 800642a:	bd10      	pop	{r4, pc}

0800642c <memset>:
 800642c:	4402      	add	r2, r0
 800642e:	4603      	mov	r3, r0
 8006430:	4293      	cmp	r3, r2
 8006432:	d100      	bne.n	8006436 <memset+0xa>
 8006434:	4770      	bx	lr
 8006436:	f803 1b01 	strb.w	r1, [r3], #1
 800643a:	e7f9      	b.n	8006430 <memset+0x4>

0800643c <siprintf>:
 800643c:	b40e      	push	{r1, r2, r3}
 800643e:	b500      	push	{lr}
 8006440:	b09c      	sub	sp, #112	; 0x70
 8006442:	ab1d      	add	r3, sp, #116	; 0x74
 8006444:	9002      	str	r0, [sp, #8]
 8006446:	9006      	str	r0, [sp, #24]
 8006448:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800644c:	4809      	ldr	r0, [pc, #36]	; (8006474 <siprintf+0x38>)
 800644e:	9107      	str	r1, [sp, #28]
 8006450:	9104      	str	r1, [sp, #16]
 8006452:	4909      	ldr	r1, [pc, #36]	; (8006478 <siprintf+0x3c>)
 8006454:	f853 2b04 	ldr.w	r2, [r3], #4
 8006458:	9105      	str	r1, [sp, #20]
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	9301      	str	r3, [sp, #4]
 800645e:	a902      	add	r1, sp, #8
 8006460:	f000 f868 	bl	8006534 <_svfiprintf_r>
 8006464:	9b02      	ldr	r3, [sp, #8]
 8006466:	2200      	movs	r2, #0
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	b01c      	add	sp, #112	; 0x70
 800646c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006470:	b003      	add	sp, #12
 8006472:	4770      	bx	lr
 8006474:	20000010 	.word	0x20000010
 8006478:	ffff0208 	.word	0xffff0208

0800647c <__ssputs_r>:
 800647c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006480:	688e      	ldr	r6, [r1, #8]
 8006482:	429e      	cmp	r6, r3
 8006484:	4682      	mov	sl, r0
 8006486:	460c      	mov	r4, r1
 8006488:	4690      	mov	r8, r2
 800648a:	461f      	mov	r7, r3
 800648c:	d838      	bhi.n	8006500 <__ssputs_r+0x84>
 800648e:	898a      	ldrh	r2, [r1, #12]
 8006490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006494:	d032      	beq.n	80064fc <__ssputs_r+0x80>
 8006496:	6825      	ldr	r5, [r4, #0]
 8006498:	6909      	ldr	r1, [r1, #16]
 800649a:	eba5 0901 	sub.w	r9, r5, r1
 800649e:	6965      	ldr	r5, [r4, #20]
 80064a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064a8:	3301      	adds	r3, #1
 80064aa:	444b      	add	r3, r9
 80064ac:	106d      	asrs	r5, r5, #1
 80064ae:	429d      	cmp	r5, r3
 80064b0:	bf38      	it	cc
 80064b2:	461d      	movcc	r5, r3
 80064b4:	0553      	lsls	r3, r2, #21
 80064b6:	d531      	bpl.n	800651c <__ssputs_r+0xa0>
 80064b8:	4629      	mov	r1, r5
 80064ba:	f000 fb39 	bl	8006b30 <_malloc_r>
 80064be:	4606      	mov	r6, r0
 80064c0:	b950      	cbnz	r0, 80064d8 <__ssputs_r+0x5c>
 80064c2:	230c      	movs	r3, #12
 80064c4:	f8ca 3000 	str.w	r3, [sl]
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ce:	81a3      	strh	r3, [r4, #12]
 80064d0:	f04f 30ff 	mov.w	r0, #4294967295
 80064d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d8:	6921      	ldr	r1, [r4, #16]
 80064da:	464a      	mov	r2, r9
 80064dc:	f7ff ff98 	bl	8006410 <memcpy>
 80064e0:	89a3      	ldrh	r3, [r4, #12]
 80064e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ea:	81a3      	strh	r3, [r4, #12]
 80064ec:	6126      	str	r6, [r4, #16]
 80064ee:	6165      	str	r5, [r4, #20]
 80064f0:	444e      	add	r6, r9
 80064f2:	eba5 0509 	sub.w	r5, r5, r9
 80064f6:	6026      	str	r6, [r4, #0]
 80064f8:	60a5      	str	r5, [r4, #8]
 80064fa:	463e      	mov	r6, r7
 80064fc:	42be      	cmp	r6, r7
 80064fe:	d900      	bls.n	8006502 <__ssputs_r+0x86>
 8006500:	463e      	mov	r6, r7
 8006502:	4632      	mov	r2, r6
 8006504:	6820      	ldr	r0, [r4, #0]
 8006506:	4641      	mov	r1, r8
 8006508:	f000 faa8 	bl	8006a5c <memmove>
 800650c:	68a3      	ldr	r3, [r4, #8]
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	1b9b      	subs	r3, r3, r6
 8006512:	4432      	add	r2, r6
 8006514:	60a3      	str	r3, [r4, #8]
 8006516:	6022      	str	r2, [r4, #0]
 8006518:	2000      	movs	r0, #0
 800651a:	e7db      	b.n	80064d4 <__ssputs_r+0x58>
 800651c:	462a      	mov	r2, r5
 800651e:	f000 fb61 	bl	8006be4 <_realloc_r>
 8006522:	4606      	mov	r6, r0
 8006524:	2800      	cmp	r0, #0
 8006526:	d1e1      	bne.n	80064ec <__ssputs_r+0x70>
 8006528:	6921      	ldr	r1, [r4, #16]
 800652a:	4650      	mov	r0, sl
 800652c:	f000 fab0 	bl	8006a90 <_free_r>
 8006530:	e7c7      	b.n	80064c2 <__ssputs_r+0x46>
	...

08006534 <_svfiprintf_r>:
 8006534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006538:	4698      	mov	r8, r3
 800653a:	898b      	ldrh	r3, [r1, #12]
 800653c:	061b      	lsls	r3, r3, #24
 800653e:	b09d      	sub	sp, #116	; 0x74
 8006540:	4607      	mov	r7, r0
 8006542:	460d      	mov	r5, r1
 8006544:	4614      	mov	r4, r2
 8006546:	d50e      	bpl.n	8006566 <_svfiprintf_r+0x32>
 8006548:	690b      	ldr	r3, [r1, #16]
 800654a:	b963      	cbnz	r3, 8006566 <_svfiprintf_r+0x32>
 800654c:	2140      	movs	r1, #64	; 0x40
 800654e:	f000 faef 	bl	8006b30 <_malloc_r>
 8006552:	6028      	str	r0, [r5, #0]
 8006554:	6128      	str	r0, [r5, #16]
 8006556:	b920      	cbnz	r0, 8006562 <_svfiprintf_r+0x2e>
 8006558:	230c      	movs	r3, #12
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
 8006560:	e0d1      	b.n	8006706 <_svfiprintf_r+0x1d2>
 8006562:	2340      	movs	r3, #64	; 0x40
 8006564:	616b      	str	r3, [r5, #20]
 8006566:	2300      	movs	r3, #0
 8006568:	9309      	str	r3, [sp, #36]	; 0x24
 800656a:	2320      	movs	r3, #32
 800656c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006570:	f8cd 800c 	str.w	r8, [sp, #12]
 8006574:	2330      	movs	r3, #48	; 0x30
 8006576:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006720 <_svfiprintf_r+0x1ec>
 800657a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800657e:	f04f 0901 	mov.w	r9, #1
 8006582:	4623      	mov	r3, r4
 8006584:	469a      	mov	sl, r3
 8006586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800658a:	b10a      	cbz	r2, 8006590 <_svfiprintf_r+0x5c>
 800658c:	2a25      	cmp	r2, #37	; 0x25
 800658e:	d1f9      	bne.n	8006584 <_svfiprintf_r+0x50>
 8006590:	ebba 0b04 	subs.w	fp, sl, r4
 8006594:	d00b      	beq.n	80065ae <_svfiprintf_r+0x7a>
 8006596:	465b      	mov	r3, fp
 8006598:	4622      	mov	r2, r4
 800659a:	4629      	mov	r1, r5
 800659c:	4638      	mov	r0, r7
 800659e:	f7ff ff6d 	bl	800647c <__ssputs_r>
 80065a2:	3001      	adds	r0, #1
 80065a4:	f000 80aa 	beq.w	80066fc <_svfiprintf_r+0x1c8>
 80065a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065aa:	445a      	add	r2, fp
 80065ac:	9209      	str	r2, [sp, #36]	; 0x24
 80065ae:	f89a 3000 	ldrb.w	r3, [sl]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 80a2 	beq.w	80066fc <_svfiprintf_r+0x1c8>
 80065b8:	2300      	movs	r3, #0
 80065ba:	f04f 32ff 	mov.w	r2, #4294967295
 80065be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065c2:	f10a 0a01 	add.w	sl, sl, #1
 80065c6:	9304      	str	r3, [sp, #16]
 80065c8:	9307      	str	r3, [sp, #28]
 80065ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065ce:	931a      	str	r3, [sp, #104]	; 0x68
 80065d0:	4654      	mov	r4, sl
 80065d2:	2205      	movs	r2, #5
 80065d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d8:	4851      	ldr	r0, [pc, #324]	; (8006720 <_svfiprintf_r+0x1ec>)
 80065da:	f7f9 fe31 	bl	8000240 <memchr>
 80065de:	9a04      	ldr	r2, [sp, #16]
 80065e0:	b9d8      	cbnz	r0, 800661a <_svfiprintf_r+0xe6>
 80065e2:	06d0      	lsls	r0, r2, #27
 80065e4:	bf44      	itt	mi
 80065e6:	2320      	movmi	r3, #32
 80065e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065ec:	0711      	lsls	r1, r2, #28
 80065ee:	bf44      	itt	mi
 80065f0:	232b      	movmi	r3, #43	; 0x2b
 80065f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065f6:	f89a 3000 	ldrb.w	r3, [sl]
 80065fa:	2b2a      	cmp	r3, #42	; 0x2a
 80065fc:	d015      	beq.n	800662a <_svfiprintf_r+0xf6>
 80065fe:	9a07      	ldr	r2, [sp, #28]
 8006600:	4654      	mov	r4, sl
 8006602:	2000      	movs	r0, #0
 8006604:	f04f 0c0a 	mov.w	ip, #10
 8006608:	4621      	mov	r1, r4
 800660a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800660e:	3b30      	subs	r3, #48	; 0x30
 8006610:	2b09      	cmp	r3, #9
 8006612:	d94e      	bls.n	80066b2 <_svfiprintf_r+0x17e>
 8006614:	b1b0      	cbz	r0, 8006644 <_svfiprintf_r+0x110>
 8006616:	9207      	str	r2, [sp, #28]
 8006618:	e014      	b.n	8006644 <_svfiprintf_r+0x110>
 800661a:	eba0 0308 	sub.w	r3, r0, r8
 800661e:	fa09 f303 	lsl.w	r3, r9, r3
 8006622:	4313      	orrs	r3, r2
 8006624:	9304      	str	r3, [sp, #16]
 8006626:	46a2      	mov	sl, r4
 8006628:	e7d2      	b.n	80065d0 <_svfiprintf_r+0x9c>
 800662a:	9b03      	ldr	r3, [sp, #12]
 800662c:	1d19      	adds	r1, r3, #4
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	9103      	str	r1, [sp, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	bfbb      	ittet	lt
 8006636:	425b      	neglt	r3, r3
 8006638:	f042 0202 	orrlt.w	r2, r2, #2
 800663c:	9307      	strge	r3, [sp, #28]
 800663e:	9307      	strlt	r3, [sp, #28]
 8006640:	bfb8      	it	lt
 8006642:	9204      	strlt	r2, [sp, #16]
 8006644:	7823      	ldrb	r3, [r4, #0]
 8006646:	2b2e      	cmp	r3, #46	; 0x2e
 8006648:	d10c      	bne.n	8006664 <_svfiprintf_r+0x130>
 800664a:	7863      	ldrb	r3, [r4, #1]
 800664c:	2b2a      	cmp	r3, #42	; 0x2a
 800664e:	d135      	bne.n	80066bc <_svfiprintf_r+0x188>
 8006650:	9b03      	ldr	r3, [sp, #12]
 8006652:	1d1a      	adds	r2, r3, #4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	9203      	str	r2, [sp, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	bfb8      	it	lt
 800665c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006660:	3402      	adds	r4, #2
 8006662:	9305      	str	r3, [sp, #20]
 8006664:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006730 <_svfiprintf_r+0x1fc>
 8006668:	7821      	ldrb	r1, [r4, #0]
 800666a:	2203      	movs	r2, #3
 800666c:	4650      	mov	r0, sl
 800666e:	f7f9 fde7 	bl	8000240 <memchr>
 8006672:	b140      	cbz	r0, 8006686 <_svfiprintf_r+0x152>
 8006674:	2340      	movs	r3, #64	; 0x40
 8006676:	eba0 000a 	sub.w	r0, r0, sl
 800667a:	fa03 f000 	lsl.w	r0, r3, r0
 800667e:	9b04      	ldr	r3, [sp, #16]
 8006680:	4303      	orrs	r3, r0
 8006682:	3401      	adds	r4, #1
 8006684:	9304      	str	r3, [sp, #16]
 8006686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800668a:	4826      	ldr	r0, [pc, #152]	; (8006724 <_svfiprintf_r+0x1f0>)
 800668c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006690:	2206      	movs	r2, #6
 8006692:	f7f9 fdd5 	bl	8000240 <memchr>
 8006696:	2800      	cmp	r0, #0
 8006698:	d038      	beq.n	800670c <_svfiprintf_r+0x1d8>
 800669a:	4b23      	ldr	r3, [pc, #140]	; (8006728 <_svfiprintf_r+0x1f4>)
 800669c:	bb1b      	cbnz	r3, 80066e6 <_svfiprintf_r+0x1b2>
 800669e:	9b03      	ldr	r3, [sp, #12]
 80066a0:	3307      	adds	r3, #7
 80066a2:	f023 0307 	bic.w	r3, r3, #7
 80066a6:	3308      	adds	r3, #8
 80066a8:	9303      	str	r3, [sp, #12]
 80066aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ac:	4433      	add	r3, r6
 80066ae:	9309      	str	r3, [sp, #36]	; 0x24
 80066b0:	e767      	b.n	8006582 <_svfiprintf_r+0x4e>
 80066b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80066b6:	460c      	mov	r4, r1
 80066b8:	2001      	movs	r0, #1
 80066ba:	e7a5      	b.n	8006608 <_svfiprintf_r+0xd4>
 80066bc:	2300      	movs	r3, #0
 80066be:	3401      	adds	r4, #1
 80066c0:	9305      	str	r3, [sp, #20]
 80066c2:	4619      	mov	r1, r3
 80066c4:	f04f 0c0a 	mov.w	ip, #10
 80066c8:	4620      	mov	r0, r4
 80066ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ce:	3a30      	subs	r2, #48	; 0x30
 80066d0:	2a09      	cmp	r2, #9
 80066d2:	d903      	bls.n	80066dc <_svfiprintf_r+0x1a8>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0c5      	beq.n	8006664 <_svfiprintf_r+0x130>
 80066d8:	9105      	str	r1, [sp, #20]
 80066da:	e7c3      	b.n	8006664 <_svfiprintf_r+0x130>
 80066dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80066e0:	4604      	mov	r4, r0
 80066e2:	2301      	movs	r3, #1
 80066e4:	e7f0      	b.n	80066c8 <_svfiprintf_r+0x194>
 80066e6:	ab03      	add	r3, sp, #12
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	462a      	mov	r2, r5
 80066ec:	4b0f      	ldr	r3, [pc, #60]	; (800672c <_svfiprintf_r+0x1f8>)
 80066ee:	a904      	add	r1, sp, #16
 80066f0:	4638      	mov	r0, r7
 80066f2:	f3af 8000 	nop.w
 80066f6:	1c42      	adds	r2, r0, #1
 80066f8:	4606      	mov	r6, r0
 80066fa:	d1d6      	bne.n	80066aa <_svfiprintf_r+0x176>
 80066fc:	89ab      	ldrh	r3, [r5, #12]
 80066fe:	065b      	lsls	r3, r3, #25
 8006700:	f53f af2c 	bmi.w	800655c <_svfiprintf_r+0x28>
 8006704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006706:	b01d      	add	sp, #116	; 0x74
 8006708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800670c:	ab03      	add	r3, sp, #12
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	462a      	mov	r2, r5
 8006712:	4b06      	ldr	r3, [pc, #24]	; (800672c <_svfiprintf_r+0x1f8>)
 8006714:	a904      	add	r1, sp, #16
 8006716:	4638      	mov	r0, r7
 8006718:	f000 f87a 	bl	8006810 <_printf_i>
 800671c:	e7eb      	b.n	80066f6 <_svfiprintf_r+0x1c2>
 800671e:	bf00      	nop
 8006720:	08006f18 	.word	0x08006f18
 8006724:	08006f22 	.word	0x08006f22
 8006728:	00000000 	.word	0x00000000
 800672c:	0800647d 	.word	0x0800647d
 8006730:	08006f1e 	.word	0x08006f1e

08006734 <_printf_common>:
 8006734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006738:	4616      	mov	r6, r2
 800673a:	4699      	mov	r9, r3
 800673c:	688a      	ldr	r2, [r1, #8]
 800673e:	690b      	ldr	r3, [r1, #16]
 8006740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006744:	4293      	cmp	r3, r2
 8006746:	bfb8      	it	lt
 8006748:	4613      	movlt	r3, r2
 800674a:	6033      	str	r3, [r6, #0]
 800674c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006750:	4607      	mov	r7, r0
 8006752:	460c      	mov	r4, r1
 8006754:	b10a      	cbz	r2, 800675a <_printf_common+0x26>
 8006756:	3301      	adds	r3, #1
 8006758:	6033      	str	r3, [r6, #0]
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	0699      	lsls	r1, r3, #26
 800675e:	bf42      	ittt	mi
 8006760:	6833      	ldrmi	r3, [r6, #0]
 8006762:	3302      	addmi	r3, #2
 8006764:	6033      	strmi	r3, [r6, #0]
 8006766:	6825      	ldr	r5, [r4, #0]
 8006768:	f015 0506 	ands.w	r5, r5, #6
 800676c:	d106      	bne.n	800677c <_printf_common+0x48>
 800676e:	f104 0a19 	add.w	sl, r4, #25
 8006772:	68e3      	ldr	r3, [r4, #12]
 8006774:	6832      	ldr	r2, [r6, #0]
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	42ab      	cmp	r3, r5
 800677a:	dc26      	bgt.n	80067ca <_printf_common+0x96>
 800677c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006780:	1e13      	subs	r3, r2, #0
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	bf18      	it	ne
 8006786:	2301      	movne	r3, #1
 8006788:	0692      	lsls	r2, r2, #26
 800678a:	d42b      	bmi.n	80067e4 <_printf_common+0xb0>
 800678c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006790:	4649      	mov	r1, r9
 8006792:	4638      	mov	r0, r7
 8006794:	47c0      	blx	r8
 8006796:	3001      	adds	r0, #1
 8006798:	d01e      	beq.n	80067d8 <_printf_common+0xa4>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	68e5      	ldr	r5, [r4, #12]
 800679e:	6832      	ldr	r2, [r6, #0]
 80067a0:	f003 0306 	and.w	r3, r3, #6
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	bf08      	it	eq
 80067a8:	1aad      	subeq	r5, r5, r2
 80067aa:	68a3      	ldr	r3, [r4, #8]
 80067ac:	6922      	ldr	r2, [r4, #16]
 80067ae:	bf0c      	ite	eq
 80067b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067b4:	2500      	movne	r5, #0
 80067b6:	4293      	cmp	r3, r2
 80067b8:	bfc4      	itt	gt
 80067ba:	1a9b      	subgt	r3, r3, r2
 80067bc:	18ed      	addgt	r5, r5, r3
 80067be:	2600      	movs	r6, #0
 80067c0:	341a      	adds	r4, #26
 80067c2:	42b5      	cmp	r5, r6
 80067c4:	d11a      	bne.n	80067fc <_printf_common+0xc8>
 80067c6:	2000      	movs	r0, #0
 80067c8:	e008      	b.n	80067dc <_printf_common+0xa8>
 80067ca:	2301      	movs	r3, #1
 80067cc:	4652      	mov	r2, sl
 80067ce:	4649      	mov	r1, r9
 80067d0:	4638      	mov	r0, r7
 80067d2:	47c0      	blx	r8
 80067d4:	3001      	adds	r0, #1
 80067d6:	d103      	bne.n	80067e0 <_printf_common+0xac>
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e0:	3501      	adds	r5, #1
 80067e2:	e7c6      	b.n	8006772 <_printf_common+0x3e>
 80067e4:	18e1      	adds	r1, r4, r3
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	2030      	movs	r0, #48	; 0x30
 80067ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067ee:	4422      	add	r2, r4
 80067f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067f8:	3302      	adds	r3, #2
 80067fa:	e7c7      	b.n	800678c <_printf_common+0x58>
 80067fc:	2301      	movs	r3, #1
 80067fe:	4622      	mov	r2, r4
 8006800:	4649      	mov	r1, r9
 8006802:	4638      	mov	r0, r7
 8006804:	47c0      	blx	r8
 8006806:	3001      	adds	r0, #1
 8006808:	d0e6      	beq.n	80067d8 <_printf_common+0xa4>
 800680a:	3601      	adds	r6, #1
 800680c:	e7d9      	b.n	80067c2 <_printf_common+0x8e>
	...

08006810 <_printf_i>:
 8006810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006814:	460c      	mov	r4, r1
 8006816:	4691      	mov	r9, r2
 8006818:	7e27      	ldrb	r7, [r4, #24]
 800681a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800681c:	2f78      	cmp	r7, #120	; 0x78
 800681e:	4680      	mov	r8, r0
 8006820:	469a      	mov	sl, r3
 8006822:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006826:	d807      	bhi.n	8006838 <_printf_i+0x28>
 8006828:	2f62      	cmp	r7, #98	; 0x62
 800682a:	d80a      	bhi.n	8006842 <_printf_i+0x32>
 800682c:	2f00      	cmp	r7, #0
 800682e:	f000 80d8 	beq.w	80069e2 <_printf_i+0x1d2>
 8006832:	2f58      	cmp	r7, #88	; 0x58
 8006834:	f000 80a3 	beq.w	800697e <_printf_i+0x16e>
 8006838:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800683c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006840:	e03a      	b.n	80068b8 <_printf_i+0xa8>
 8006842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006846:	2b15      	cmp	r3, #21
 8006848:	d8f6      	bhi.n	8006838 <_printf_i+0x28>
 800684a:	a001      	add	r0, pc, #4	; (adr r0, 8006850 <_printf_i+0x40>)
 800684c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006850:	080068a9 	.word	0x080068a9
 8006854:	080068bd 	.word	0x080068bd
 8006858:	08006839 	.word	0x08006839
 800685c:	08006839 	.word	0x08006839
 8006860:	08006839 	.word	0x08006839
 8006864:	08006839 	.word	0x08006839
 8006868:	080068bd 	.word	0x080068bd
 800686c:	08006839 	.word	0x08006839
 8006870:	08006839 	.word	0x08006839
 8006874:	08006839 	.word	0x08006839
 8006878:	08006839 	.word	0x08006839
 800687c:	080069c9 	.word	0x080069c9
 8006880:	080068ed 	.word	0x080068ed
 8006884:	080069ab 	.word	0x080069ab
 8006888:	08006839 	.word	0x08006839
 800688c:	08006839 	.word	0x08006839
 8006890:	080069eb 	.word	0x080069eb
 8006894:	08006839 	.word	0x08006839
 8006898:	080068ed 	.word	0x080068ed
 800689c:	08006839 	.word	0x08006839
 80068a0:	08006839 	.word	0x08006839
 80068a4:	080069b3 	.word	0x080069b3
 80068a8:	680b      	ldr	r3, [r1, #0]
 80068aa:	1d1a      	adds	r2, r3, #4
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	600a      	str	r2, [r1, #0]
 80068b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0a3      	b.n	8006a04 <_printf_i+0x1f4>
 80068bc:	6825      	ldr	r5, [r4, #0]
 80068be:	6808      	ldr	r0, [r1, #0]
 80068c0:	062e      	lsls	r6, r5, #24
 80068c2:	f100 0304 	add.w	r3, r0, #4
 80068c6:	d50a      	bpl.n	80068de <_printf_i+0xce>
 80068c8:	6805      	ldr	r5, [r0, #0]
 80068ca:	600b      	str	r3, [r1, #0]
 80068cc:	2d00      	cmp	r5, #0
 80068ce:	da03      	bge.n	80068d8 <_printf_i+0xc8>
 80068d0:	232d      	movs	r3, #45	; 0x2d
 80068d2:	426d      	negs	r5, r5
 80068d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068d8:	485e      	ldr	r0, [pc, #376]	; (8006a54 <_printf_i+0x244>)
 80068da:	230a      	movs	r3, #10
 80068dc:	e019      	b.n	8006912 <_printf_i+0x102>
 80068de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068e2:	6805      	ldr	r5, [r0, #0]
 80068e4:	600b      	str	r3, [r1, #0]
 80068e6:	bf18      	it	ne
 80068e8:	b22d      	sxthne	r5, r5
 80068ea:	e7ef      	b.n	80068cc <_printf_i+0xbc>
 80068ec:	680b      	ldr	r3, [r1, #0]
 80068ee:	6825      	ldr	r5, [r4, #0]
 80068f0:	1d18      	adds	r0, r3, #4
 80068f2:	6008      	str	r0, [r1, #0]
 80068f4:	0628      	lsls	r0, r5, #24
 80068f6:	d501      	bpl.n	80068fc <_printf_i+0xec>
 80068f8:	681d      	ldr	r5, [r3, #0]
 80068fa:	e002      	b.n	8006902 <_printf_i+0xf2>
 80068fc:	0669      	lsls	r1, r5, #25
 80068fe:	d5fb      	bpl.n	80068f8 <_printf_i+0xe8>
 8006900:	881d      	ldrh	r5, [r3, #0]
 8006902:	4854      	ldr	r0, [pc, #336]	; (8006a54 <_printf_i+0x244>)
 8006904:	2f6f      	cmp	r7, #111	; 0x6f
 8006906:	bf0c      	ite	eq
 8006908:	2308      	moveq	r3, #8
 800690a:	230a      	movne	r3, #10
 800690c:	2100      	movs	r1, #0
 800690e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006912:	6866      	ldr	r6, [r4, #4]
 8006914:	60a6      	str	r6, [r4, #8]
 8006916:	2e00      	cmp	r6, #0
 8006918:	bfa2      	ittt	ge
 800691a:	6821      	ldrge	r1, [r4, #0]
 800691c:	f021 0104 	bicge.w	r1, r1, #4
 8006920:	6021      	strge	r1, [r4, #0]
 8006922:	b90d      	cbnz	r5, 8006928 <_printf_i+0x118>
 8006924:	2e00      	cmp	r6, #0
 8006926:	d04d      	beq.n	80069c4 <_printf_i+0x1b4>
 8006928:	4616      	mov	r6, r2
 800692a:	fbb5 f1f3 	udiv	r1, r5, r3
 800692e:	fb03 5711 	mls	r7, r3, r1, r5
 8006932:	5dc7      	ldrb	r7, [r0, r7]
 8006934:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006938:	462f      	mov	r7, r5
 800693a:	42bb      	cmp	r3, r7
 800693c:	460d      	mov	r5, r1
 800693e:	d9f4      	bls.n	800692a <_printf_i+0x11a>
 8006940:	2b08      	cmp	r3, #8
 8006942:	d10b      	bne.n	800695c <_printf_i+0x14c>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	07df      	lsls	r7, r3, #31
 8006948:	d508      	bpl.n	800695c <_printf_i+0x14c>
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	6861      	ldr	r1, [r4, #4]
 800694e:	4299      	cmp	r1, r3
 8006950:	bfde      	ittt	le
 8006952:	2330      	movle	r3, #48	; 0x30
 8006954:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006958:	f106 36ff 	addle.w	r6, r6, #4294967295
 800695c:	1b92      	subs	r2, r2, r6
 800695e:	6122      	str	r2, [r4, #16]
 8006960:	f8cd a000 	str.w	sl, [sp]
 8006964:	464b      	mov	r3, r9
 8006966:	aa03      	add	r2, sp, #12
 8006968:	4621      	mov	r1, r4
 800696a:	4640      	mov	r0, r8
 800696c:	f7ff fee2 	bl	8006734 <_printf_common>
 8006970:	3001      	adds	r0, #1
 8006972:	d14c      	bne.n	8006a0e <_printf_i+0x1fe>
 8006974:	f04f 30ff 	mov.w	r0, #4294967295
 8006978:	b004      	add	sp, #16
 800697a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697e:	4835      	ldr	r0, [pc, #212]	; (8006a54 <_printf_i+0x244>)
 8006980:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	680e      	ldr	r6, [r1, #0]
 8006988:	061f      	lsls	r7, r3, #24
 800698a:	f856 5b04 	ldr.w	r5, [r6], #4
 800698e:	600e      	str	r6, [r1, #0]
 8006990:	d514      	bpl.n	80069bc <_printf_i+0x1ac>
 8006992:	07d9      	lsls	r1, r3, #31
 8006994:	bf44      	itt	mi
 8006996:	f043 0320 	orrmi.w	r3, r3, #32
 800699a:	6023      	strmi	r3, [r4, #0]
 800699c:	b91d      	cbnz	r5, 80069a6 <_printf_i+0x196>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	f023 0320 	bic.w	r3, r3, #32
 80069a4:	6023      	str	r3, [r4, #0]
 80069a6:	2310      	movs	r3, #16
 80069a8:	e7b0      	b.n	800690c <_printf_i+0xfc>
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	f043 0320 	orr.w	r3, r3, #32
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	2378      	movs	r3, #120	; 0x78
 80069b4:	4828      	ldr	r0, [pc, #160]	; (8006a58 <_printf_i+0x248>)
 80069b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069ba:	e7e3      	b.n	8006984 <_printf_i+0x174>
 80069bc:	065e      	lsls	r6, r3, #25
 80069be:	bf48      	it	mi
 80069c0:	b2ad      	uxthmi	r5, r5
 80069c2:	e7e6      	b.n	8006992 <_printf_i+0x182>
 80069c4:	4616      	mov	r6, r2
 80069c6:	e7bb      	b.n	8006940 <_printf_i+0x130>
 80069c8:	680b      	ldr	r3, [r1, #0]
 80069ca:	6826      	ldr	r6, [r4, #0]
 80069cc:	6960      	ldr	r0, [r4, #20]
 80069ce:	1d1d      	adds	r5, r3, #4
 80069d0:	600d      	str	r5, [r1, #0]
 80069d2:	0635      	lsls	r5, r6, #24
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	d501      	bpl.n	80069dc <_printf_i+0x1cc>
 80069d8:	6018      	str	r0, [r3, #0]
 80069da:	e002      	b.n	80069e2 <_printf_i+0x1d2>
 80069dc:	0671      	lsls	r1, r6, #25
 80069de:	d5fb      	bpl.n	80069d8 <_printf_i+0x1c8>
 80069e0:	8018      	strh	r0, [r3, #0]
 80069e2:	2300      	movs	r3, #0
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	4616      	mov	r6, r2
 80069e8:	e7ba      	b.n	8006960 <_printf_i+0x150>
 80069ea:	680b      	ldr	r3, [r1, #0]
 80069ec:	1d1a      	adds	r2, r3, #4
 80069ee:	600a      	str	r2, [r1, #0]
 80069f0:	681e      	ldr	r6, [r3, #0]
 80069f2:	6862      	ldr	r2, [r4, #4]
 80069f4:	2100      	movs	r1, #0
 80069f6:	4630      	mov	r0, r6
 80069f8:	f7f9 fc22 	bl	8000240 <memchr>
 80069fc:	b108      	cbz	r0, 8006a02 <_printf_i+0x1f2>
 80069fe:	1b80      	subs	r0, r0, r6
 8006a00:	6060      	str	r0, [r4, #4]
 8006a02:	6863      	ldr	r3, [r4, #4]
 8006a04:	6123      	str	r3, [r4, #16]
 8006a06:	2300      	movs	r3, #0
 8006a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a0c:	e7a8      	b.n	8006960 <_printf_i+0x150>
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	4632      	mov	r2, r6
 8006a12:	4649      	mov	r1, r9
 8006a14:	4640      	mov	r0, r8
 8006a16:	47d0      	blx	sl
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d0ab      	beq.n	8006974 <_printf_i+0x164>
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	079b      	lsls	r3, r3, #30
 8006a20:	d413      	bmi.n	8006a4a <_printf_i+0x23a>
 8006a22:	68e0      	ldr	r0, [r4, #12]
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	4298      	cmp	r0, r3
 8006a28:	bfb8      	it	lt
 8006a2a:	4618      	movlt	r0, r3
 8006a2c:	e7a4      	b.n	8006978 <_printf_i+0x168>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4632      	mov	r2, r6
 8006a32:	4649      	mov	r1, r9
 8006a34:	4640      	mov	r0, r8
 8006a36:	47d0      	blx	sl
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d09b      	beq.n	8006974 <_printf_i+0x164>
 8006a3c:	3501      	adds	r5, #1
 8006a3e:	68e3      	ldr	r3, [r4, #12]
 8006a40:	9903      	ldr	r1, [sp, #12]
 8006a42:	1a5b      	subs	r3, r3, r1
 8006a44:	42ab      	cmp	r3, r5
 8006a46:	dcf2      	bgt.n	8006a2e <_printf_i+0x21e>
 8006a48:	e7eb      	b.n	8006a22 <_printf_i+0x212>
 8006a4a:	2500      	movs	r5, #0
 8006a4c:	f104 0619 	add.w	r6, r4, #25
 8006a50:	e7f5      	b.n	8006a3e <_printf_i+0x22e>
 8006a52:	bf00      	nop
 8006a54:	08006f29 	.word	0x08006f29
 8006a58:	08006f3a 	.word	0x08006f3a

08006a5c <memmove>:
 8006a5c:	4288      	cmp	r0, r1
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	eb01 0402 	add.w	r4, r1, r2
 8006a64:	d902      	bls.n	8006a6c <memmove+0x10>
 8006a66:	4284      	cmp	r4, r0
 8006a68:	4623      	mov	r3, r4
 8006a6a:	d807      	bhi.n	8006a7c <memmove+0x20>
 8006a6c:	1e43      	subs	r3, r0, #1
 8006a6e:	42a1      	cmp	r1, r4
 8006a70:	d008      	beq.n	8006a84 <memmove+0x28>
 8006a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a7a:	e7f8      	b.n	8006a6e <memmove+0x12>
 8006a7c:	4402      	add	r2, r0
 8006a7e:	4601      	mov	r1, r0
 8006a80:	428a      	cmp	r2, r1
 8006a82:	d100      	bne.n	8006a86 <memmove+0x2a>
 8006a84:	bd10      	pop	{r4, pc}
 8006a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a8e:	e7f7      	b.n	8006a80 <memmove+0x24>

08006a90 <_free_r>:
 8006a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a92:	2900      	cmp	r1, #0
 8006a94:	d048      	beq.n	8006b28 <_free_r+0x98>
 8006a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a9a:	9001      	str	r0, [sp, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f1a1 0404 	sub.w	r4, r1, #4
 8006aa2:	bfb8      	it	lt
 8006aa4:	18e4      	addlt	r4, r4, r3
 8006aa6:	f000 f8d3 	bl	8006c50 <__malloc_lock>
 8006aaa:	4a20      	ldr	r2, [pc, #128]	; (8006b2c <_free_r+0x9c>)
 8006aac:	9801      	ldr	r0, [sp, #4]
 8006aae:	6813      	ldr	r3, [r2, #0]
 8006ab0:	4615      	mov	r5, r2
 8006ab2:	b933      	cbnz	r3, 8006ac2 <_free_r+0x32>
 8006ab4:	6063      	str	r3, [r4, #4]
 8006ab6:	6014      	str	r4, [r2, #0]
 8006ab8:	b003      	add	sp, #12
 8006aba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006abe:	f000 b8cd 	b.w	8006c5c <__malloc_unlock>
 8006ac2:	42a3      	cmp	r3, r4
 8006ac4:	d90b      	bls.n	8006ade <_free_r+0x4e>
 8006ac6:	6821      	ldr	r1, [r4, #0]
 8006ac8:	1862      	adds	r2, r4, r1
 8006aca:	4293      	cmp	r3, r2
 8006acc:	bf04      	itt	eq
 8006ace:	681a      	ldreq	r2, [r3, #0]
 8006ad0:	685b      	ldreq	r3, [r3, #4]
 8006ad2:	6063      	str	r3, [r4, #4]
 8006ad4:	bf04      	itt	eq
 8006ad6:	1852      	addeq	r2, r2, r1
 8006ad8:	6022      	streq	r2, [r4, #0]
 8006ada:	602c      	str	r4, [r5, #0]
 8006adc:	e7ec      	b.n	8006ab8 <_free_r+0x28>
 8006ade:	461a      	mov	r2, r3
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	b10b      	cbz	r3, 8006ae8 <_free_r+0x58>
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	d9fa      	bls.n	8006ade <_free_r+0x4e>
 8006ae8:	6811      	ldr	r1, [r2, #0]
 8006aea:	1855      	adds	r5, r2, r1
 8006aec:	42a5      	cmp	r5, r4
 8006aee:	d10b      	bne.n	8006b08 <_free_r+0x78>
 8006af0:	6824      	ldr	r4, [r4, #0]
 8006af2:	4421      	add	r1, r4
 8006af4:	1854      	adds	r4, r2, r1
 8006af6:	42a3      	cmp	r3, r4
 8006af8:	6011      	str	r1, [r2, #0]
 8006afa:	d1dd      	bne.n	8006ab8 <_free_r+0x28>
 8006afc:	681c      	ldr	r4, [r3, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	6053      	str	r3, [r2, #4]
 8006b02:	4421      	add	r1, r4
 8006b04:	6011      	str	r1, [r2, #0]
 8006b06:	e7d7      	b.n	8006ab8 <_free_r+0x28>
 8006b08:	d902      	bls.n	8006b10 <_free_r+0x80>
 8006b0a:	230c      	movs	r3, #12
 8006b0c:	6003      	str	r3, [r0, #0]
 8006b0e:	e7d3      	b.n	8006ab8 <_free_r+0x28>
 8006b10:	6825      	ldr	r5, [r4, #0]
 8006b12:	1961      	adds	r1, r4, r5
 8006b14:	428b      	cmp	r3, r1
 8006b16:	bf04      	itt	eq
 8006b18:	6819      	ldreq	r1, [r3, #0]
 8006b1a:	685b      	ldreq	r3, [r3, #4]
 8006b1c:	6063      	str	r3, [r4, #4]
 8006b1e:	bf04      	itt	eq
 8006b20:	1949      	addeq	r1, r1, r5
 8006b22:	6021      	streq	r1, [r4, #0]
 8006b24:	6054      	str	r4, [r2, #4]
 8006b26:	e7c7      	b.n	8006ab8 <_free_r+0x28>
 8006b28:	b003      	add	sp, #12
 8006b2a:	bd30      	pop	{r4, r5, pc}
 8006b2c:	20004248 	.word	0x20004248

08006b30 <_malloc_r>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	1ccd      	adds	r5, r1, #3
 8006b34:	f025 0503 	bic.w	r5, r5, #3
 8006b38:	3508      	adds	r5, #8
 8006b3a:	2d0c      	cmp	r5, #12
 8006b3c:	bf38      	it	cc
 8006b3e:	250c      	movcc	r5, #12
 8006b40:	2d00      	cmp	r5, #0
 8006b42:	4606      	mov	r6, r0
 8006b44:	db01      	blt.n	8006b4a <_malloc_r+0x1a>
 8006b46:	42a9      	cmp	r1, r5
 8006b48:	d903      	bls.n	8006b52 <_malloc_r+0x22>
 8006b4a:	230c      	movs	r3, #12
 8006b4c:	6033      	str	r3, [r6, #0]
 8006b4e:	2000      	movs	r0, #0
 8006b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b52:	f000 f87d 	bl	8006c50 <__malloc_lock>
 8006b56:	4921      	ldr	r1, [pc, #132]	; (8006bdc <_malloc_r+0xac>)
 8006b58:	680a      	ldr	r2, [r1, #0]
 8006b5a:	4614      	mov	r4, r2
 8006b5c:	b99c      	cbnz	r4, 8006b86 <_malloc_r+0x56>
 8006b5e:	4f20      	ldr	r7, [pc, #128]	; (8006be0 <_malloc_r+0xb0>)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	b923      	cbnz	r3, 8006b6e <_malloc_r+0x3e>
 8006b64:	4621      	mov	r1, r4
 8006b66:	4630      	mov	r0, r6
 8006b68:	f000 f862 	bl	8006c30 <_sbrk_r>
 8006b6c:	6038      	str	r0, [r7, #0]
 8006b6e:	4629      	mov	r1, r5
 8006b70:	4630      	mov	r0, r6
 8006b72:	f000 f85d 	bl	8006c30 <_sbrk_r>
 8006b76:	1c43      	adds	r3, r0, #1
 8006b78:	d123      	bne.n	8006bc2 <_malloc_r+0x92>
 8006b7a:	230c      	movs	r3, #12
 8006b7c:	6033      	str	r3, [r6, #0]
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f000 f86c 	bl	8006c5c <__malloc_unlock>
 8006b84:	e7e3      	b.n	8006b4e <_malloc_r+0x1e>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	1b5b      	subs	r3, r3, r5
 8006b8a:	d417      	bmi.n	8006bbc <_malloc_r+0x8c>
 8006b8c:	2b0b      	cmp	r3, #11
 8006b8e:	d903      	bls.n	8006b98 <_malloc_r+0x68>
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	441c      	add	r4, r3
 8006b94:	6025      	str	r5, [r4, #0]
 8006b96:	e004      	b.n	8006ba2 <_malloc_r+0x72>
 8006b98:	6863      	ldr	r3, [r4, #4]
 8006b9a:	42a2      	cmp	r2, r4
 8006b9c:	bf0c      	ite	eq
 8006b9e:	600b      	streq	r3, [r1, #0]
 8006ba0:	6053      	strne	r3, [r2, #4]
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f000 f85a 	bl	8006c5c <__malloc_unlock>
 8006ba8:	f104 000b 	add.w	r0, r4, #11
 8006bac:	1d23      	adds	r3, r4, #4
 8006bae:	f020 0007 	bic.w	r0, r0, #7
 8006bb2:	1ac2      	subs	r2, r0, r3
 8006bb4:	d0cc      	beq.n	8006b50 <_malloc_r+0x20>
 8006bb6:	1a1b      	subs	r3, r3, r0
 8006bb8:	50a3      	str	r3, [r4, r2]
 8006bba:	e7c9      	b.n	8006b50 <_malloc_r+0x20>
 8006bbc:	4622      	mov	r2, r4
 8006bbe:	6864      	ldr	r4, [r4, #4]
 8006bc0:	e7cc      	b.n	8006b5c <_malloc_r+0x2c>
 8006bc2:	1cc4      	adds	r4, r0, #3
 8006bc4:	f024 0403 	bic.w	r4, r4, #3
 8006bc8:	42a0      	cmp	r0, r4
 8006bca:	d0e3      	beq.n	8006b94 <_malloc_r+0x64>
 8006bcc:	1a21      	subs	r1, r4, r0
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f000 f82e 	bl	8006c30 <_sbrk_r>
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d1dd      	bne.n	8006b94 <_malloc_r+0x64>
 8006bd8:	e7cf      	b.n	8006b7a <_malloc_r+0x4a>
 8006bda:	bf00      	nop
 8006bdc:	20004248 	.word	0x20004248
 8006be0:	2000424c 	.word	0x2000424c

08006be4 <_realloc_r>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	4607      	mov	r7, r0
 8006be8:	4614      	mov	r4, r2
 8006bea:	460e      	mov	r6, r1
 8006bec:	b921      	cbnz	r1, 8006bf8 <_realloc_r+0x14>
 8006bee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	f7ff bf9c 	b.w	8006b30 <_malloc_r>
 8006bf8:	b922      	cbnz	r2, 8006c04 <_realloc_r+0x20>
 8006bfa:	f7ff ff49 	bl	8006a90 <_free_r>
 8006bfe:	4625      	mov	r5, r4
 8006c00:	4628      	mov	r0, r5
 8006c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c04:	f000 f830 	bl	8006c68 <_malloc_usable_size_r>
 8006c08:	42a0      	cmp	r0, r4
 8006c0a:	d20f      	bcs.n	8006c2c <_realloc_r+0x48>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4638      	mov	r0, r7
 8006c10:	f7ff ff8e 	bl	8006b30 <_malloc_r>
 8006c14:	4605      	mov	r5, r0
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d0f2      	beq.n	8006c00 <_realloc_r+0x1c>
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	4622      	mov	r2, r4
 8006c1e:	f7ff fbf7 	bl	8006410 <memcpy>
 8006c22:	4631      	mov	r1, r6
 8006c24:	4638      	mov	r0, r7
 8006c26:	f7ff ff33 	bl	8006a90 <_free_r>
 8006c2a:	e7e9      	b.n	8006c00 <_realloc_r+0x1c>
 8006c2c:	4635      	mov	r5, r6
 8006c2e:	e7e7      	b.n	8006c00 <_realloc_r+0x1c>

08006c30 <_sbrk_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	4d06      	ldr	r5, [pc, #24]	; (8006c4c <_sbrk_r+0x1c>)
 8006c34:	2300      	movs	r3, #0
 8006c36:	4604      	mov	r4, r0
 8006c38:	4608      	mov	r0, r1
 8006c3a:	602b      	str	r3, [r5, #0]
 8006c3c:	f7fa fa76 	bl	800112c <_sbrk>
 8006c40:	1c43      	adds	r3, r0, #1
 8006c42:	d102      	bne.n	8006c4a <_sbrk_r+0x1a>
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	b103      	cbz	r3, 8006c4a <_sbrk_r+0x1a>
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}
 8006c4c:	20004328 	.word	0x20004328

08006c50 <__malloc_lock>:
 8006c50:	4801      	ldr	r0, [pc, #4]	; (8006c58 <__malloc_lock+0x8>)
 8006c52:	f000 b811 	b.w	8006c78 <__retarget_lock_acquire_recursive>
 8006c56:	bf00      	nop
 8006c58:	20004330 	.word	0x20004330

08006c5c <__malloc_unlock>:
 8006c5c:	4801      	ldr	r0, [pc, #4]	; (8006c64 <__malloc_unlock+0x8>)
 8006c5e:	f000 b80c 	b.w	8006c7a <__retarget_lock_release_recursive>
 8006c62:	bf00      	nop
 8006c64:	20004330 	.word	0x20004330

08006c68 <_malloc_usable_size_r>:
 8006c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c6c:	1f18      	subs	r0, r3, #4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	bfbc      	itt	lt
 8006c72:	580b      	ldrlt	r3, [r1, r0]
 8006c74:	18c0      	addlt	r0, r0, r3
 8006c76:	4770      	bx	lr

08006c78 <__retarget_lock_acquire_recursive>:
 8006c78:	4770      	bx	lr

08006c7a <__retarget_lock_release_recursive>:
 8006c7a:	4770      	bx	lr

08006c7c <_init>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	bf00      	nop
 8006c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c82:	bc08      	pop	{r3}
 8006c84:	469e      	mov	lr, r3
 8006c86:	4770      	bx	lr

08006c88 <_fini>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	bf00      	nop
 8006c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8e:	bc08      	pop	{r3}
 8006c90:	469e      	mov	lr, r3
 8006c92:	4770      	bx	lr
